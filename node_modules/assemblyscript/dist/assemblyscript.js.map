{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/collections.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/math.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/vector.ts","webpack://assemblyscript/./src/extra/ast.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","STUB_DELIMITER","CommonNames","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","externref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_TABLE_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_LOW_MEMORY_LIMIT","ASC_WASI","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","ASC_FEATURE_MULTI_VALUE","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Externref","String","Array","StaticArray","Set","Map","Function","ArrayBufferView","ArrayBuffer","Math","Mathf","NativeMath","NativeMathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","trace","seed","pow","ipow32","ipow64","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocBuffer","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","DiagnosticCategory","diagnosticCategoryToString","category","PEDANTIC","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_MAGENTA","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","other","thisRange","otherRange","equals","thisRelatedRange","otherRelatedRange","source","toString","normalizedPath","lineAt","start","columnAt","end","formatDiagnosticContext","useColors","text","len","length","isLineBreak","charCodeAt","sb","substring","push","join","showContext","relatedSource","diagnostics","seen","withRange","has","seenInSource","seenMessagesAtPos","k","set","emitDiagnostic","NodeKind","DecoratorKind","LiteralKind","SourceKind","Node","kind","TypeName","createIdentifierExpression","typeArguments","isNullable","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createSimpleTypeName","extendsType","defaultType","TypeParameterNode","parameterKind","type","initializer","ParameterNode","args","DecoratorNode","fromNode","commentKind","CommentNode","isQuoted","IdentifierExpression","elementExpressions","ArrayLiteralExpression","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","elementExpression","ElementAccessExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","typeName","NewExpression","NullExpression","names","values","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","patternFlags","RegexpLiteralExpression","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","decorators","flags","typeParameters","implementsTypes","members","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","ExportDefaultStatement","externalName","ExportImportStatement","localName","exportedName","ExportMember","ExpressionStatement","ifTrue","ifFalse","IfStatement","declarations","ImportStatement","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","variable","iterable","ForOfStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureNode","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","literalKind","LITERAL","changetype","FLOAT","INTEGER","STRING","NULL","TRUE","FALSE","node","CALL","PROPERTYACCESS","isAccessOn","THIS","SUPER","TypeNode","super","typeParameterNodes","NAMEDTYPE","namedTypeNode","next","typeArgumentNodes","hasGenericComponent","identifier","FUNCTIONTYPE","functionTypeNode","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","FINAL","GLOBAL","INLINE","LAZY","OPERATOR","UNMANAGED","UNSAFE","propertyAccessNode","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","decoratorKind","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","numTypeArguments","Range","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","OMITTED","PARENTHESIZED","REGEXP","TERNARY","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","sourceKind","SOURCE","debugInfoIndex","exportPaths","lineCache","lineColumn","internalPath","mangleInternalPath","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","off","unchecked","DeclarationStatement","INDEXSIGNATURE","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","indexSignature","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","normalizePath","startsWith","resolvePath","EXPORTDEFAULT","EXPRESSION","parameterIndex","FIELDDECLARATION","FOR","FOROF","ArrowKind","FUNCTIONDECLARATION","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","cur","isTrivialAlphanum","decorator","Token","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","CONST","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","ENUM","EXTENDS","FINALLY","FROM","GET","IMPLEMENTS","IN","INTERFACE","IS","KEYOF","LET","MODULE","NAMESPACE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","SET","STATIC","TYPE","TYPEOF","VAR","WITH","YIELD","INVALID","tokenIsAlsoIdentifier","token","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","debugInfoRef","a","b","Tokenizer","DiagnosticEmitter","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","MAX_VALUE","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","error","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","result","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","sepEnd","i64_new","i64_4","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","sepCount","readDecimalFloatPartial","replaceAll","parseFloat","allowLeadingZeroSep","remain","value32","i64_low","invalid","i64_high","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PREFIX_INC","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","fromBinaryToken","fromUnaryPrefixToken","fromUnaryPostfixToken","Program","options","sources","diagnosticsOffset","nextClassId","nextSignatureId","initialized","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","_arrayBufferViewInstance","_arrayBufferInstance","_arrayPrototype","_staticArrayPrototype","_setPrototype","_mapPrototype","_functionPrototype","_int8ArrayPrototype","_int16ArrayPrototype","_int32ArrayPrototype","_int64ArrayPrototype","_uint8ArrayPrototype","_uint8ClampedArrayPrototype","_uint16ArrayPrototype","_uint32ArrayPrototype","_uint64ArrayPrototype","_float32ArrayPrototype","_float64ArrayPrototype","_stringInstance","_allocInstance","_reallocInstance","_freeInstance","_retainInstance","_releaseInstance","_collectInstance","_visitInstance","_typeinfoInstance","_instanceofInstance","_allocBufferInstance","_allocArrayInstance","nativeDummySignature","nativeSource","Source","parser","Parser","resolver","Resolver","nativeFile","File","internalName","cached","requireClass","CLASS_PROTOTYPE","lookupFunction","requireFunction","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamedType","createFunctionDeclaration","createNamespaceDeclaration","parent","decoratorFlags","FunctionPrototype","makeNativeFunctionDeclaration","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","registerConstantInteger","isWasm64","WASM64","WASM32","noAssert","memoryBase","tableBase","optimizeLevelHint","shrinkLevelHint","lowMemoryLimit","hasFeature","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","_keys","Map_keys","starExports","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","madeProgress","queuedImport","element","lookupForeign","splice","asAliasNamespace","Module_0_has_no_exported_member_1","exportNames","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","isDeclaredElement","arrayBufferInstance","id","stringInstance","arrayBufferViewInstance","registerWrapperClass","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_final_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","INTERFACE_PROTOTYPE","An_interface_can_only_extend_an_interface","implementsNodes","implementsNode","interfaceElement","interfacePrototype","interfacePrototypes","A_class_can_only_implement_an_interface","markVirtuals","globalAliases","isWasi","BuiltinNames","wasiAbort","wasiTrace","wasiSeed","alias","delete","firstChar","parseInt","_values","Map_values","USER_ENTRY","markModuleExports","thisInstanceMembers","instanceMembers","baseInstanceMembers","thisMember","isAny","baseMember","FUNCTION_PROTOTYPE","thisMethod","baseMethod","visibilityEquals","errorRelated","Overload_signatures_must_all_be_public_private_or_protected","VIRTUAL","overloads","baseMethodInstances","instances","PROPERTY_PROTOTYPE","thisProperty","baseProperty","baseGetter","getterPrototype","thisGetter","baseGetterInstances","baseSetter","setterPrototype","thisSetter","baseSetterInstances","Duplicate_identifier_0","nextPrototype","resolved","resolveClass","resolveFunction","markModuleExport","exportsStar","MODULE_EXPORT","member","propertyPrototype","PROPERTY","FIELD","staticMembers","setType","className","isInternalReference","classElement","wrappedType","isIntegerInclReference","global","Global","makeNativeVariableDeclaration","setConstantIntegerValue","isFloatValue","setConstantFloatValue","existing","merged","tryMerge","elements","lookupExport","fileQueuedExports","queuedExportForeignPath","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","memberDeclarations","memberDeclaration","initializeField","methodDeclaration","initializeProperty","method","initializeMethod","constructorPrototype","is","AMBIENT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","isLiteralKind","_0_is_not_a_valid_operator","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","endsWith","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","initializeFieldAsProperty","typeNode","atEnd","createMethodDeclaration","createParameter","original","Namespace","copyMembers","cyclics","instance","isAcyclic","Element","program","shadowType","FILE","current","localIdentifierIfImport","originalDeclaration","reportedIdentifier","isBound","isPublic","vis","declaredElements","DeclaredElement","signatureNode","base","isAssignableTo","selfProperty","selfGetter","getterInstance","selfSetter","setterInstance","AcyclicState","typedElements","TypedElement","RESOLVED","aliasNamespaces","startFunction","makeNativeFunction","Signature","ensureGlobal","includes","makeNativeNamespaceDeclaration","SCOPED","copyExportsToNamespace","memberName","TYPEDEFINITION","mangleInternalName","lookup","inSelf","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","i64_zero","constantFloatValue","INLINED","ENUMVALUE","isImmutable","Local","index","LOCAL","originalName","boundPrototypes","classInstance","bound","instanceKey","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","varargsStub","virtualStub","memorySegment","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempExternrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","localIndex","thisType","local","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","createParent","registerConcreteElement","getDefaultParameterName","postfix","stub","clone","COMPILED","STUB","locals","sourceMap","setDebugLocation","FIELD_PROTOTYPE","memoryOffset","getterRef","setterRef","firstDeclaration","toBound","isUnchecked","lookupOverload","_isInterface","extendees","extends","basePtototype","Class","interfaces","nextMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","implementers","didCheckFieldInitialization","size","classReference","isBuiltinArray","lengthField","inheritedTypeArguments","baseName","baseType","iface","target","Set_values","uncheckedOverload","overload","fieldName","field","overhead","buffer","runtimeHeaderSize","writeI32","baseOffset","fieldInstance","offset","typeKind","i64_is","writeI8","writeI16","writeI64","writeI32AsI64","writeI64AsI32","writeF32","writeF64","extendedPrototype","arrayPrototype","getTypeArgumentsTo","staticArrayPrototype","abvInstance","float32ArrayPrototype","float64ArrayPrototype","int8ArrayPrototype","int16ArrayPrototype","int32ArrayPrototype","int64ArrayPrototype","uint8ArrayPrototype","uint8ClampedArrayPrototype","uint16ArrayPrototype","uint32ArrayPrototype","uint64ArrayPrototype","acyclic","hasCycle","cyclesTo","except","fieldType","isReference","getClass","setPrototype","mapPrototype","exceptIfMember","out","extendee","getAllExtendees","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","cachedDefaultParameterNames","NativeType","FeatureFlags","ExpressionId","BinaryOp","SideEffects","None","Unreachable","Funcref","Nullref","Exnref","Auto","UnaryOp","HostOp","AtomicRMWOp","SIMDExtractOp","SIMDReplaceOp","SIMDShiftOp","SIMDTernaryOp","SIMDLoadOp","ExpressionRunnerFlags","Module","hasTemporaryFunction","cachedStrings","lit","binaryen","_malloc","_BinaryenSizeofLiteral","_BinaryenModuleCreate","cArr","allocU8Array","_BinaryenModuleRead","_free","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","_BinaryenRefNull","op","expr","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","stmts","nop","single","getExpressionId","Return","Throw","singleType","getExpressionType","block","_BinaryenBreak","_BinaryenDrop","getSideEffects","ReadsLocal","ReadsGlobal","drop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPop","_BinaryenTupleMake","tuple","_BinaryenTupleExtract","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","_BinaryenRefIsNull","_BinaryenRefFunc","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","segment","cArr1","cArr2","cArr3","cArr4","u32s","val","__i32_store","allocU32Array","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","_BinaryenGetDebugInfo","on","_BinaryenSetDebugInfo","_BinaryenGetLowMemoryUnused","_BinaryenSetLowMemoryUnused","_BinaryenGetPassArgument","readString","_BinaryenSetPassArgument","_BinaryenClearPassArguments","_BinaryenGetAlwaysInlineMaxSize","_BinaryenSetAlwaysInlineMaxSize","_BinaryenGetFlexibleInlineMaxSize","_BinaryenSetFlexibleInlineMaxSize","_BinaryenGetOneCallerInlineMaxSize","_BinaryenSetOneCallerInlineMaxSize","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","pass","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","passes","cStrs","optimizeLevel","shrinkLevel","debugInfo","usesARC","runPasses","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","binary","BinaryModule","__i32_load8_u","readBuffer","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenExpressionCopy","maxLoopIterations","runner","_ExpressionRunnerCreate","precomp","_ExpressionRunnerRunAndDispose","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChildAt","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperandAt","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperandAt","_BinaryenHostGetNameOperand","_BinaryenFunctionGetBody","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInitExpr","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetParams","_BinaryenEventGetResults","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","i32s","allocI32Array","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","features","All","_BinaryenExpressionGetSideEffects","u8s","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","arr","ch","fromCharCodes","defaultIndex","indexOf","labelPostfix","numCases","numValues","labels","local_set","br","EqI32","local_get","defaultLabel","unshift","lastCase","output","needsExplicitUnreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperandAt","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","Select","Drop","Host","Nop","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Pop","RefNull","RefIsNull","_BinaryenRefIsNullGetValue","RefFunc","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperandAt","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","TupleMake","_BinaryenTupleMakeGetNumOperands","_BinaryenTupleMakeGetOperandAt","TupleExtract","TypeKind","TypeFlags","_nonNullableType","_nullableType","byteSize","ceil","signatureReference","auto","isize64","isize32","usize64","usize32","clz","isIntegerValue","getSignature","wrapper","functionPrototype","targetType","nullableType","isNullableReference","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isBooleanValue","isSignedIntegerValue","isVectorValue","signednessIsImportant","validWat","nullablePostfix","typesToNativeTypes","numTypes","toNativeType","requiredParameters","hasRest","signatureTypes","compare","numParameterTypes","nativeTypes","thisThisType","otherThisType","thisParameterTypes","otherParameterTypes","numParameters","requireSameSize","targetThisType","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cloneParameterTypes","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveClassPending","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Type_0_cannot_be_nullable","resolveClassInclTypeArguments","uniqueMap","typeDefinition","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","getClassOrWrapper","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","currentType","ensureResolvedLazyGlobal","isTypedElement","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","isExternalReference","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","variableLikeElement","propertyInstance","resolveProperty","indexedGet","resolvedType","functionInstance","baseInstance","targetExpression","intValue","isValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","PREFIX","Type_0_is_illegal_in_this_context","NONNULL","Not_implemented_0","nonNullableType","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","isNumericValue","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","isInline","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","elementType","numNullLiterals","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","maybeInferCall","varType","varElement","ftype","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","nameInclTypeParamters","Interface","pendingClasses","anyPending","_0_is_referenced_directly_or_indirectly_in_its_own_base_expression","setBase","addInterface","finishResolveClass","unimplemented","ifaceMembers","isCompatibleOverride","This_overload_signature_is_not_compatible_with_its_implementation_signature","identifierAndSignatureRange","baseMembers","instanceMemberPrototypes","properties","fieldPrototype","fieldTypeNode","baseField","Field","isPowerOf2","boundPrototype","propertyGetter","propertySetter","Getter_and_setter_accessors_do_not_agree_in_visibility","Property_0_only_has_a_setter_and_is_missing_a_getter","Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2","ctorPrototype","ctorInstance","operatorInstance","overloadKind","overloadPrototype","Type_0_is_not_assignable_to_type_1","IndexSignature","pending","dependsOnInstance","_values2","Property","LocalFlags","FieldFlags","FlowFlags","ConditionKind","parentFunction","continueLabel","scopedLocals","localFlags","thisFieldFlags","inlineFunction","inlineReturnLabel","initThisFieldFlags","resetBreakContext","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","setLocalFlag","RETAINED","resetTemporaryName","scopedLocal","setTemporaryName","scopedDummy","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","actualClass","setThisFieldFlag","INITIALIZED","fieldFlags","stack","otherFlags","conditionKind","inherit","thisFlags","newFlags","thisLocalFlags","numThisLocalFlags","otherLocalFlags","numOtherLocalFlags","maxLocalFlags","max","CONSTANT","WRAPPED","CONDITIONALLY_RETAINED","leftFlags","rightFlags","rightLocalFlags","leftLocalFlags","numLeftLocalFlags","numRightLocalFlags","leftFieldFlags","newFieldFlags","rightFieldFlags","before","after","min","isShortIntegerValue","isLocalFlag","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","iff","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","retainInstance","getCallOperandAt","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChildAt","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","started","argumentsLength","setArgumentsLength","isInteger","isFloat","isBoolean","isSigned","isString","isArray","isArrayLike","isFunction","isDefined","isConstant","isManaged","isVoid","ctz","popcnt","rotl","rotr","abs","floor","copysign","nearest","reinterpret","sqrt","trunc","load","store","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","sizeof","alignof","offsetof","nameof","lengthof","select","unreachable","instantiate","idof","i32_clz","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_splat","v128_extract_lane","v128_replace_lane","v128_shuffle","v128_swizzle","v128_load_splat","v128_load_ext","v128_load","v128_store","v128_add","v128_sub","v128_mul","v128_div","v128_neg","v128_add_saturate","v128_sub_saturate","v128_shl","v128_shr","v128_and","v128_or","v128_xor","v128_andnot","v128_not","v128_bitselect","v128_any_true","v128_all_true","v128_bitmask","v128_min","v128_max","v128_pmin","v128_pmax","v128_dot","v128_avgr","v128_abs","v128_sqrt","v128_ceil","v128_floor","v128_trunc","v128_nearest","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","v128_convert","v128_trunc_sat","v128_narrow","v128_widen_low","v128_widen_high","v128_qfma","v128_qfms","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_avgr_u","i8x16_abs","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_bitmask","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_avgr_u","i16x8_abs","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_bitmask","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_abs","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_bitmask","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_pmin","f32x4_pmax","f32x4_abs","f32x4_sqrt","f32x4_ceil","f32x4_floor","f32x4_trunc","f32x4_nearest","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_pmin","f64x2_pmax","f64x2_abs","f64x2_sqrt","f64x2_ceil","f64x2_floor","f64x2_trunc","f64x2_nearest","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","heap_base","rtti_base","visit_globals","visit_members","isNaN","isFinite","memory_size","memory_grow","memory_copy","memory_fill","memory_data","builtin_clz","ctx","compiler","checkTypeOptional","checkArgsRequired","compileExpression","unary","ClzI64","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","builtin_ctz","CtzI64","builtin_popcnt","PopcntI64","builtin_rotl","ensureSmallIntegerWrap","RotlI32","RotlI64","builtin_rotr","RotrI32","RotrI64","builtin_abs","currentFlow","temp1","temp2","XorI32","AddI32","local_tee","XorI64","AddI64","ShrI64","nativeSizeType","AbsF32","AbsF64","builtin_max","isNumericLiteral","MaxF32","MaxF64","nativeType","builtin_min","MinF32","MinF64","builtin_ceil","CeilF32","CeilF64","builtin_floor","FloorF32","FloorF64","builtin_copysign","CopysignF32","CopysignF64","builtin_nearest","NearestF32","NearestF64","builtin_reinterpret","checkTypeRequired","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","builtin_sqrt","SqrtF32","SqrtF64","builtin_trunc","TruncF32","TruncF64","builtin_load","checkArgsOptional","contextualType","outType","numOperands","immOffset","immAlign","evaluateImmediateOffset","evaluateImmediateAlign","builtin_store","contextIsExact","inType","convertExpression","builtin_atomic_load","checkFeatureEnabled","builtin_atomic_store","builtin_atomic_binary","opName","atomic_rmw","builtin_atomic_add","Add","builtin_atomic_sub","Sub","builtin_atomic_and","And","builtin_atomic_or","Or","builtin_atomic_xor","Xor","builtin_atomic_xchg","Xchg","builtin_atomic_cmpxchg","builtin_atomic_wait","builtin_diagnostic","checkTypeAbsent","User_defined_0","builtin_conversion","builtin_i8x16","runExpression","PreserveSideeffects","Expression_must_be_a_compile_time_constant","builtin_v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","builtin_v128_extract_lane","maxIdx","_0_must_be_a_value_between_1_and_2_inclusive","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","builtin_v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","builtin_v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","builtin_v128_swizzle","SwizzleV8x16","builtin_v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","builtin_v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","builtin_v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","builtin_v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","builtin_v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","builtin_v128_div","DivF32x4","DivF64x2","builtin_v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","builtin_v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","builtin_v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","builtin_v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","builtin_v128_pmin","PminF32x4","PminF64x2","builtin_v128_pmax","PmaxF32x4","PmaxF64x2","builtin_v128_dot","DotI16x8","builtin_v128_avgr","AvgrU8x16","AvgrU16x8","builtin_v128_eq","EqI8x16","EqI16x8","EqI32x4","EqF32x4","EqF64x2","builtin_v128_ne","NeI8x16","NeI16x8","NeI32x4","NeF32x4","NeF64x2","builtin_v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","builtin_v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","builtin_v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","builtin_v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","builtin_v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","builtin_v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","builtin_v128_abs","AbsI8x16","AbsI16x8","AbsI32x4","AbsF32x4","AbsF64x2","builtin_v128_sqrt","SqrtF32x4","SqrtF64x2","builtin_v128_ceil","CeilF32x4","CeilF64x2","builtin_v128_floor","FloorF32x4","FloorF64x2","builtin_v128_trunc","TruncF32x4","TruncF64x2","builtin_v128_nearest","NearestF32x4","NearestF64x2","builtin_v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","builtin_v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","builtin_v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","builtin_v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","builtin_v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","builtin_v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","builtin_v128_bitwise_binary","builtin_v128_any_true","AnyTrueI8x16","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","builtin_v128_all_true","AllTrueI8x16","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","builtin_v128_bitmask","BitmaskI8x16","BitmaskI16x8","BitmaskI32x4","builtin_v128_qfma","simd_ternary","QFMAF32x4","QFMAF64x2","builtin_v128_qfms","QFMSF32x4","QFMSF64x2","typeToRuntimeFlags","alignLog2","evaluateConstantType","argumentsRange","naturalAlign","_0_must_be_a_power_of_two","feature","Feature_0_is_not_enabled","setCurrentTypeOnError","expectedMinimum","expectedMaximum","Expected_at_least_0_arguments_but_got_1","contextualUsize","thisOperand","builtins","function_builtins","firstOperand","classMembers","Type_0_has_no_property_1","resultType","ensureStaticString","maybeDropCondition","temp","SubF32","SubF64","makeIsTrueish","host","MemorySize","MemoryGrow","compileFunction","compileCallDirect","valuesOperand","Array_literal_expected","numElements","exprs","makeZero","buf","writeStaticBuffer","byteLength","addMemorySegment","isChangeableTo","Type_0_cannot_be_changed_to_type_1","evaled","Default","makeAbort","if","alreadyUnchecked","unset","indexArg","operandExprs","nativeParamTypes","ctor","ensureConstructor","checkFieldInitialization","compileInstantiate","thisArg","compileCallIndirect","AndV128","OrV128","XorV128","AndNotV128","builtin_v128_bitwise_unary","NotV128","builtin_v128_bitwise_ternary","Bitselect","runtimeFeatures","visitInstance","global_get","addFunction","nativeSizeSize","blocks","relooper","outer","addBlockWithSwitch","SubI64","SubI32","lastId","visitImpl","instanceId","isDeclaredInLibrary","visitFunc","visitSig","visitThisType","isStrictlyAssignableTo","fieldOffset","return","addBlock","flatten","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","getArrayValueType","addGlobal","instanceofInstance","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","ExportNames","mangleImportName_moduleName","mangleImportName_elementName","exportMemory","importMemory","initialMemory","maximumMemory","sharedMemory","importTable","exportTable","explicitStart","noUnsafe","pedantic","Constraints","RuntimeFeatures","memory","table","Compiler","currentParent","memorySegments","stringSegments","functionTable","builtinArgumentsLength","skippedAutoreleases","inlineStack","lazyFunctions","pendingClassInstanceOf","virtualCalls","pendingElements","doneModuleExports","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","i32PowInstance","i64PowInstance","setLowMemoryUnused","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","MultiValue","setFeatures","startFunctionInstance","currentBody","compile","initialize","startFunctionBody","files","compileFile","compileExports","startIsEmpty","global_set","funcRef","nativeParams","nativeResults","finalize","addFunctionExport","setStart","cyclicClasses","findCyclicClasses","Type_0_is_cyclic_Module_will_include_deferred_garbage_collection","functionsToCompile","clear","compileClassInstanceOf","ensureVirtualStub","finalizeVirtualStub","ensureVarargsStub","removeGlobal","compileRTTI","compileVisitGlobals","compileVisitMembers","i64_align","lowMemoryLimit32","i64_gt","Low_memory_limit_exceeded_by_static_data_0_1","i64_to_string","initialPages","i64_shr_u","Module_requires_at_least_0_pages_of_initial_memory","maximumPages","Module_requires_at_least_0_pages_of_maximum_memory","isSharedMemory","Shared_memory_requires_maximum_memory_to_be_defined","Shared_memory_requires_feature_threads_to_be_enabled","setMemory","addMemoryImport","functionTableNames","setFunctionTable","addTableImport","willOptimize","Importing_the_table_disables_some_indirect_call_optimizations","addTableExport","Exporting_the_table_disables_some_indirect_call_optimizations","ensureModuleExports","elementName","ensureModuleExport","prefix","functionInstances","fullName","warning","Exported_generic_function_or_class_has_no_concrete_instances","classInstances","addGlobalExport","Cannot_export_a_mutable_global","enumValue","ensureArgumentsLength","internalGetterName","internalSetterName","isUnmanaged","subPrefix","implicitExport","compileMembers","compileGlobal","compileEnum","compileClass","compileProperty","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","ERRORED","initExpr","checkTypeSupported","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","initializeInStart","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","compileInlineConstant","findDecorator","decoratorNodes","makeRetain","previousParent","previousValue","previousValueIsMut","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","makeGlobalAssignment","forceStdAlternative","previousType","bodyNode","declarationNode","checkSignatureSupported","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","performAutoreleases","addFunctionImport","getFunction","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileStatements","compileReturnedExpression","indexBefore","nonNull","isNonnull","allocStmts","makeAllocation","makeFieldInitializationInConstructor","firstStmt","Explicitly_returning_constructor_drops_this_allocation","A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","compileField","compileFieldGetter","compileFieldSetter","nativeThisType","nativeValueType","valueExpr","makeRelease","compilePropertyGetter","compilePropertySetter","alignment","MemorySegment","stringValue","stringSegment","rtHeaderSize","createBuffer","bufferSegment","arrayInstance","bufferLength","arrayLength","bufferAddress","writeField","rtInstance","memberStatements","getElementByDeclaration","exportStatement","compileFileByPath","importStatement","stmt","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileForOfStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","labelNode","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","doCompileDoStatement","flowAfter","pushBreakLabel","unifyLocalFlags","flowBefore","bodyFlow","bodyStmts","condFlow","condExpr","condKind","evaluateCondition","tcond","hasIncompatibleLocalStates","popBreakLabel","hasScopedLocals","loop","doCompileForStatement","loopLabel","loopStmts","inheritBranch","ifStmts","incrFlow","thenStmts","thenFlow","elseStmts","elseFlow","inheritMutual","valueExpression","constraints","context","tempLocal","tempLocalIndex","breaks","breakIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","terminates","newArgs","dropped","numDeclarations","initializers","initAutoreleaseSkipped","dummy","addScopedDummyLocal","freeScopedDummyLocal","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","doCompileWhileStatement","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","tryUndoAutorelease","explicit","makeRuntimeNonNullCheck","makeRuntimeUpcastCheck","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","isLongIntegerValue","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","isVaryingIntegerValue","Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit","inheritedConstraints","exceptVoid","info","Expression_is_never_null","leftExpr","rightExpr","compound","compileBinaryOverload","compileAssignment","AddF32","AddF64","MulI64","MulF32","MulF64","makeCallDirect","namespace","namespaceMembers","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrU64","AndI64","OrI32","OrI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","retainLeftInThen","makeAssignment","thisExpression","Variable_0_used_before_its_declaration","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","Indexed_access_may_involve_bounds_checking","indexExpression","tee","makeLocalAssignment","isConstructor","fieldParent","makeFieldAssignment","makeAutorelease","thisExpr","nativeReturnType","tempThis","elementExpr","tempTarget","tempElement","alreadyRetained","makeReplace","nativeFieldType","findUsedLocals","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","baseCtorInstance","superCall","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","compileCallExpressionBuiltin","callee","BuiltinContext","fn","methodName","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","relatedReportNode","Operation_is_unsafe","argumentExpressions","checkCallSignature","isAccessOnThis","isAccessOnSuper","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","addScopedAlias","initType","checkFieldInitializationInFlow","originalSignature","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","newStub","ofN","switch","Optional_parameter_must_have_an_initializer","theCall","tempIndex","builder","SwitchBuilder","unboundOverloadPrototype","unboundOverloadParent","isProperty","propertyParent","overloadInstance","boundProperty","boundPropertyInstance","overloadType","originalType","overloadSignature","overloadParameterTypes","overloadNumParameters","paramExprs","needsVarargsStub","calledName","addCase","removeFunction","render","releaseInstance","newExpr","newType","oldExpr","oldType","getAutoreleaseLocal","lengthBefore","maybeFinishAutorelease","skipAutorelease","Function_0_is_virtual_and_will_not_be_inlined","theOperands","allOptionalsAreConstant","compilesToConst","lastOperand","WritesGlobal","lastOperandType","makeCallIndirect","numExpressions","contextualSignature","numPresentParameters","thisTypeNode","ensureRuntimeFunction","Expression_resolves_to_unusual_type_0","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","ref_func","namedType","hasTypeArguments","makeInstanceofClass","makeInstanceofType","actualType","Expression_compiles_to_a_dynamic_check_at_runtime","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","contextualClass","compileStaticArrayLiteral","arrayType","tempDataStart","nativeElementType","addStaticBuffer","arraySegment","addStaticArrayHeader","arrayAddress","allocArrayInstance","nativeArrayType","dataStartMember","bufferSize","allocBufferInstance","classType","Cannot_create_an_instance_of_an_abstract_class","Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal","hasErrors","nativeClassType","omittedFields","memberKey","Property_0_is_private_and_only_accessible_within_class_1","Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses","Property_0_is_missing_in_type_1_but_required_in_type_2","baseClass","baseCtor","allocExpr","relatedNode","isThisFieldFlag","DEFINITELY_ASSIGNED","Property_0_is_always_assigned_before_being_used","Unnecessary_definite_assignment","Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned","parentEnum","Property_0_is_used_before_being_assigned","Object_is_possibly_null","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","supported","v128_zero","allocInstance","thisLocalIndex","codeLocation","abortInstance","messageArg","makeStaticAbort","messageExpr","filenameExpr","Dependee","backlog","seenlog","donelog","currentSource","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","dependee","USER","tn","parseTopLevelStatement","skipStatement","startPos","parseDecorator","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","abstractStart","abstractEnd","reset","parseStatement","_abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","parameter","notNullStart","notNull","bracketStart","bracketRange","nullable","isSignature","firstParamNameNoType","firstParamKind","paramStart","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","isFor","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","explicitThis","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","accessStart","accessEnd","staticStart","staticEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","getStart","getEnd","setEnd","isGetterOrSetter","createConstructorExpression","retIndex","parseIndexSignature","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","_0_keyword_cannot_be_used_here","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignature","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createWildcardImportStatement","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","parseForOfStatement","The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer","createForStatement","createForOfStatement","elseStatement","createIfStatement","switchCases","switchCase","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createOmittedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","Type_argument_list_cannot_be_empty","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","ExportsWalker","includePrivate","visitFile","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitFunction","hasCompiledMember","visitNamespace","visitAlias","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","remainingMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","Infinity","NaN","clz32","round","x","y","sign","isTrueish","apply","parts","fromCodePoint","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","exp2","arguments","console","byteOffset","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","i64_neg_one","fromInt","isLong","lo","hi","fromBits","low","high","sub","mul","i64_pow","rightLo","rightHi","eq","shru","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","i64_not","not","i64_eq","i64_ne","ne","gt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","map","keys","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","FEATURE_MULTI_VALUE","getSource","parseFile","nextFile","getDependee","finish","util","readI32","readI64","valueI64","overrides","cloned","v","ipos","dirname","origin","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","ASTBuilder","visitNode","visitSource","visitNamedTypeNode","visitFunctionTypeNode","visitTypeParameter","visitIdentifierExpression","visitAssertionExpression","visitBinaryExpression","visitCallExpression","visitClassExpression","visitCommaExpression","visitElementAccessExpression","visitFunctionExpression","visitInstanceOfExpression","visitLiteralExpression","visitNewExpression","visitParenthesizedExpression","visitPropertyAccessExpression","visitTernaryExpression","visitUnaryPostfixExpression","visitUnaryPrefixExpression","visitBlockStatement","visitBreakStatement","visitContinueStatement","visitDoStatement","visitEmptyStatement","visitExportStatement","visitExportDefaultStatement","visitExportImportStatement","visitExpressionStatement","visitForStatement","visitForOfStatement","visitIfStatement","visitImportStatement","visitReturnStatement","visitSwitchStatement","visitThrowStatement","visitTryStatement","visitVariableStatement","visitWhileStatement","visitClassDeclaration","visitEnumDeclaration","visitEnumValueDeclaration","visitFieldDeclaration","visitFunctionDeclaration","visitImportDeclaration","visitInterfaceDeclaration","visitMethodDeclaration","visitNamespaceDeclaration","visitTypeDeclaration","visitVariableDeclaration","serializeDecorator","visitExportMember","serializeParameter","visitSwitchCase","visitIndexSignature","visitNodeAndTerminate","visitTypeName","visitTypeNode","visitStringLiteral","visitArguments","visitFunctionCommon","visitFloatLiteralExpression","visitIntegerLiteralExpression","visitStringLiteralExpression","visitRegexpLiteralExpression","visitArrayLiteralExpression","visitObjectLiteralExpression","singleQuoted","lastCharPos","isDefault","serializeExternalModifiers","numMembers","serializeAccessModifiers"],"mappings":"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vB,EAAMwB,MACX,KAAKxB,EAAM0B,OACX,KAAK1B,EAAM2B,UACX,KAAK3B,EAAMtI,KACX,KAAKsI,EAAMiC,SACX,KAAKjC,EAAMkC,IACX,KAAKlC,EAAMoC,KACX,KAAKpC,EAAML,KAAM,OAAO,EACxB,QAAS,OAAO,IAlSpB,SAAYK,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYC,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAgIA,0BAwBA,uCAA4Crf,GAE1C,OADAsK,OAAOtK,EAAKyM,QACJzM,EAAK2M,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR3M,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB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AmB,EACnB,EAAAglC,QAAsB,EACtB,EAAA/kC,UAAwB,EACxB,EAAAglC,QAAsB,EACtB,EAAAC,OAAqB,GACrB,EAAAC,MAAoB,EAZnC,CAAiBV,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAe3B,SAAYC,GACV,iBACA,yBACA,uCACA,+CACA,yBACA,gCACA,0BACA,8CACA,6BACA,yCACA,iCACA,oBAZF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAexB,SAAYC,GACV,yBACA,qBACA,eACA,mBACA,qBACA,uBACA,mBACA,mCACA,2BACA,2BACA,8BACA,8BACA,oBACA,sBACA,sBACA,sBACA,wBACA,wBACA,oBACA,wBACA,oBACA,kBACA,kCACA,sCACA,8BACA,gCACA,oCACA,kCACA,kCACA,kCACA,kCACA,kCACA,8BACA,4BACA,gCACA,4BACA,gCACA,gCACA,kBACA,0BACA,8BACA,0BACA,kBACA,sBACA,0BACA,0BACA,8BACA,oCAhDF,CAAYA,EAAA,EAAAA,eAAA,EAAAA,aAAY,KAmDxB,SAAYS,GACV,uBACA,uBACA,uBACA,uBACA,6BACA,6BACA,uBACA,uBACA,uBACA,uBACA,0BACA,0BACA,4BACA,4BACA,4BACA,4BACA,gCACA,gCACA,0BACA,0BACA,wBACA,wBACA,8BACA,8BACA,0BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCACA,wCACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,0CACA,gCACA,8BACA,wCACA,wCAGA,sCACA,wCACA,sCACA,wCACA,wCAGA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CAGA,gCACA,gCACA,gCACA,gCACA,gCACA,gCACA,0BACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,4BACA,oCACA,oCACA,oCACA,4BACA,oCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,4BACA,4BACA,8BACA,8BACA,gCACA,gCACA,oCACA,oDACA,qDACA,qDACA,qDACA,mDACA,mDACA,mDACA,mDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDACA,qDACA,uDAzHF,CAAY,EAAAA,UAAA,EAAAA,QAAO,KA4HnB,SAAYR,GACV,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,qBACA,uBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,sBACA,wBACA,wBACA,wBACA,wBACA,0BACA,0BACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBACA,wBACA,wBACA,wBACA,kCACA,wBACA,wBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBAGA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,0BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,2BACA,yBACA,2BACA,iCACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,mCACA,mCACA,6BACA,mCACA,mCACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BAEA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,+BACA,+BACA,iDACA,iDACA,iD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A,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,gKACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,8HACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,0HACA,wGACA,oIACA,wFACA,4KACA,sHACA,gFACA,oKACA,gLACA,4FACA,0MACA,wKACA,0FACA,kQACA,8DACA,kGACA,gKACA,oIACA,kJACA,0GACA,kKACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,sNACA,8FACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,0HACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA9KF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAkL1B,kCAAuCI,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,sDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,0DACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,iCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,qFACjB,KAAK,IA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4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4Bx8H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCkL,GAChC,OAAOA,GAAQ,IAAcA,GAAQ,KAC9BA,GAAQ,IAAcA,GAAQ,IAC9BA,GAAQ,IAAeA,GAAQ,IAIxC,6BAAkClL,GAChC,MAAMy8H,EAAS,GAAJz8H,EACX,OAAOy8H,GAAM,IAAcA,GAAM,KACrB,IAALz8H,GACK,IAALA,GACAA,EAAI,SAmLqBkL,EAnLYlL,GAoL9B,KAAOkL,EAAO,QACrBwxH,EAAmBxxH,EAAayxH,IAFzC,IAAkCzxH,GA/KlC,8BAAmClL,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAMy8H,EAAS,GAAJz8H,EACX,OAAOy8H,GAAM,IAAcA,GAAM,KAC1Bz8H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBkL,EAzKYlL,GA0K7B,KAAOkL,EAAO,QACrBwxH,EAAmBxxH,EAAa0xH,IAFzC,IAAiC1xH,GArKjC,MAAMyxH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * @fileoverview Various utility.\n * @license Apache-2.0\n */\n\nexport * from \"./binary\";\nexport * from \"./collections\";\nexport * from \"./math\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./vector\";\n","/**\n * @fileoverview Common constants used by various parts of the compiler.\n * @license Apache-2.0\n */\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITELY_ASSIGNED = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Did error. */\n  ERRORED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a stub. */\n  STUB = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 28,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n/** Stub function delimiter. */\nexport const STUB_DELIMITER = \"@\";\n\n/** Common names. */\nexport namespace CommonNames {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const externref = \"externref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_TABLE_BASE = \"ASC_TABLE_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_LOW_MEMORY_LIMIT = \"ASC_LOW_MEMORY_LIMIT\";\n  export const ASC_WASI = \"ASC_WASI\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  export const ASC_FEATURE_MULTI_VALUE = \"ASC_FEATURE_MULTI_VALUE\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Externref = \"Externref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const StaticArray = \"StaticArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const Function = \"Function\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const NativeMath = \"NativeMath\";\n  export const NativeMathf = \"NativeMathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const trace = \"trace\";\n  export const seed = \"seed\";\n  export const pow = \"pow\";\n  export const ipow32 = \"ipow32\";\n  export const ipow64 = \"ipow64\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocBuffer = \"__allocBuffer\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * @fileoverview Shared diagnostic handling.\n * @license Apache-2.0\n */\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Source\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Overly pedantic message. */\n  PEDANTIC,\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return \"PEDANTIC\";\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence for magenta foreground. */\nexport const COLOR_MAGENTA: string = \"\\u001b[95m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.PEDANTIC: return COLOR_MAGENTA;\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null; // TODO: Make this a related message for chains?\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 !== null) message = message.replace(\"{0}\", arg0);\n    if (arg1 !== null) message = message.replace(\"{1}\", arg1);\n    if (arg2 !== null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Tests if this message equals the specified. */\n  equals(other: DiagnosticMessage): bool {\n    if (this.code != other.code) return false;\n    var thisRange = this.range;\n    var otherRange = other.range;\n    if (thisRange) {\n      if (!otherRange || !thisRange.equals(otherRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    var thisRelatedRange = this.relatedRange;\n    var otherRelatedRange = other.relatedRange;\n    if (thisRelatedRange) {\n      if (!otherRelatedRange || !thisRelatedRange.equals(otherRelatedRange)) return false;\n    } else if (otherRange) {\n      return false;\n    }\n    return this.message == other.message;\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    var range = this.range;\n    if (range) {\n      let source = range.source;\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString() +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        source.normalizedPath +\n        \"(\" +\n        source.lineAt(range.start).toString() +\n        \",\" +\n        source.columnAt().toString() +\n        \"+\" +\n        (range.end - range.start).toString() +\n        \")\"\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString() +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString());\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  var range = message.range;\n  if (range) {\n    let source = range.source;\n\n    // include context information if requested\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(source.lineAt(range.start).toString());\n    sb.push(\",\");\n    sb.push(source.columnAt().toString());\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      let relatedSource = relatedRange.source;\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedSource.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedSource.lineAt(relatedRange.start).toString());\n      sb.push(\",\");\n      sb.push(relatedSource.columnAt().toString());\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n  /** Diagnostic messages already seen, by range. */\n  private seen: Map<Source,Map<i32,DiagnosticMessage[]>> = new Map();\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range | null,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2);\n    if (range) message = message.withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    // It is possible that the same diagnostic is emitted twice, for example\n    // when compiling generics with different types or when recompiling a loop\n    // because our initial assumptions didn't hold. It is even possible to get\n    // multiple instances of the same range during parsing. Deduplicate these.\n    if (range) {\n      let seen = this.seen;\n      if (seen.has(range.source)) {\n        let seenInSource = assert(seen.get(range.source));\n        if (seenInSource.has(range.start)) {\n          let seenMessagesAtPos = assert(seenInSource.get(range.start));\n          for (let i = 0, k = seenMessagesAtPos.length; i < k; ++i) {\n            if (seenMessagesAtPos[i].equals(message)) return;\n          }\n          seenMessagesAtPos.push(message);\n        } else {\n          seenInSource.set(range.start, [ message ]);\n        }\n      } else {\n        let seenInSource = new Map<i32,DiagnosticMessage[]>();\n        seenInSource.set(range.start, [ message ]);\n        seen.set(range.source, seenInSource);\n      }\n    }\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an overly pedantic diagnostic message. */\n  pedantic(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an overly pedantic diagnostic message with a related range. */\n  pedanticRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.PEDANTIC, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * @fileoverview Abstract syntax tree representing a source file once parsed.\n *\n * Each node in the AST is represented by an instance of a subclass of `Node`,\n * with its `Node#kind` represented by one of the `NodeKind` constants, which\n * dependent code typically switches over. The intended way to create a node\n * is to use the respective `Node.createX` method instead of its constructor.\n *\n * Note that the AST does not contain any type information except type names.\n *\n * @license Apache-2.0\n */\n\n// TODO: Make the AST more easily serializable by refactoring `Node#range` so\n// it doesn't reference the non-serializable `Source` object.\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode,\n  isTrivialAlphanum\n} from \"./util\";\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  OMITTED,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  FOROF,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  INDEXSIGNATURE,\n  COMMENT\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n  constructor(\n    /** Kind of this node. */\n    public kind: NodeKind,\n    /** Source range. */\n    public range: Range\n  ) {}\n\n  // types\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return new TypeName(Node.createIdentifierExpression(name, range), null, range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(name, typeArguments, isNullable, range);\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    return new FunctionTypeNode(parameters, returnType, explicitThisType, isNullable, range);\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return new NamedTypeNode(Node.createSimpleTypeName(\"\", range), null, false, range);\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    return new TypeParameterNode(name, extendsType, defaultType, range);\n  }\n\n  static createParameter(\n    parameterKind: ParameterKind,\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    range: Range\n  ): ParameterNode {\n    return new ParameterNode(parameterKind, name, type, initializer, range);\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    return new DecoratorNode(DecoratorKind.fromNode(name), name, args, range);\n  }\n\n  static createComment(\n    commentKind: CommentKind,\n    text: string,\n    range: Range\n  ): CommentNode {\n    return new CommentNode(commentKind, text, range);\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    text: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    return new IdentifierExpression(text, isQuoted, range);\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    return new IdentifierExpression(\"\", false, range);\n  }\n\n  static createArrayLiteralExpression(\n    elementExpressions: Expression[],\n    range: Range\n  ): ArrayLiteralExpression {\n    return new ArrayLiteralExpression(elementExpressions, range);\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    return new AssertionExpression(assertionKind, expression, toType, range);\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    return new BinaryExpression(operator, left, right, range);\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    return new CallExpression(expression, typeArguments, args, range);\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    return new ClassExpression(declaration);\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    return new CommaExpression(expressions, range);\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    return new ConstructorExpression(range);\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    elementExpression: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    return new ElementAccessExpression(expression, elementExpression, range);\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    return new FalseExpression(range);\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    return new FloatLiteralExpression(value, range);\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    return new FunctionExpression(declaration);\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    return new InstanceOfExpression(expression, isType, range);\n  }\n\n  static createIntegerLiteralExpression(\n    value: i64,\n    range: Range\n  ): IntegerLiteralExpression {\n    return new IntegerLiteralExpression(value, range);\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArguments: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    return new NewExpression(typeName, typeArguments, args, range);\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    return new NullExpression(range);\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    return new ObjectLiteralExpression(names, values, range);\n  }\n\n  static createOmittedExpression(\n    range: Range\n  ): OmittedExpression {\n    return new OmittedExpression(range);\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    return new ParenthesizedExpression(expression, range);\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    return new PropertyAccessExpression(expression, property, range);\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    patternFlags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    return new RegexpLiteralExpression(pattern, patternFlags, range);\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    return new TernaryExpression(condition, ifThen, ifElse, range);\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    return new StringLiteralExpression(value, range);\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    return new SuperExpression(range);\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    return new ThisExpression(range);\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    return new TrueExpression(range);\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    return new UnaryPostfixExpression(operator, operand, range);\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    return new UnaryPrefixExpression(operator, operand, range);\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    return new BlockStatement(statements, range);\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    return new BreakStatement(label, range);\n  }\n\n  static createClassDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): ClassDeclaration {\n    return new ClassDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    return new ContinueStatement(label, range);\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    return new DoStatement(statement, condition, range);\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    return new EmptyStatement(range);\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    values: EnumValueDeclaration[],\n    range: Range\n  ): EnumDeclaration {\n    return new EnumDeclaration(name, decorators, flags, values, range);\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    flags: CommonFlags,\n    initializer: Expression | null,\n    range: Range\n  ): EnumValueDeclaration {\n    return new EnumValueDeclaration(name, flags, initializer, range);\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    return new ExportStatement(members, path, isDeclare, range);\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    return new ExportDefaultStatement(declaration, range);\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    return new ExportImportStatement(name, externalName, range);\n  }\n\n  static createExportMember(\n    localName: IdentifierExpression,\n    exportedName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    if (!exportedName) exportedName = localName;\n    return new ExportMember(localName, exportedName, range);\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    return new ExpressionStatement(expression);\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    return new IfStatement(condition, ifTrue, ifFalse, range);\n  }\n\n  static createImportStatement(\n    declarations: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(declarations, null, path, range);\n  }\n\n  static createWildcardImportStatement(\n    namespaceName: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    return new ImportStatement(null, namespaceName, path, range);\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    if (!name) name = foreignName;\n    return new ImportDeclaration(name, foreignName, range);\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null,\n    implementsTypes: NamedTypeNode[] | null,\n    members: DeclarationStatement[],\n    range: Range\n  ): InterfaceDeclaration {\n    return new InterfaceDeclaration(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): FieldDeclaration {\n    return new FieldDeclaration(name, decorators, flags, type, initializer, -1, range);\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    return new ForStatement(initializer, condition, incrementor, statement, range);\n  }\n\n  static createForOfStatement(\n    variable: Statement,\n    iterable: Expression,\n    statement: Statement,\n    range: Range\n  ): ForOfStatement {\n    return new ForOfStatement(variable, iterable, statement, range);\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    return new FunctionDeclaration(name, decorators, flags, typeParameters, signature, body, arrowKind, range);\n  }\n\n  static createIndexSignature(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    flags: CommonFlags,\n    range: Range\n  ): IndexSignatureNode {\n    return new IndexSignatureNode(keyType, valueType, flags, range);\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    range: Range\n  ): MethodDeclaration {\n    return new MethodDeclaration(name, decorators, flags, typeParameters, signature, body, range);\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    members: Statement[],\n    range: Range\n  ): NamespaceDeclaration {\n    return new NamespaceDeclaration(name, decorators, flags, members, range);\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    return new ReturnStatement(value, range);\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    return new SwitchStatement(condition, cases, range);\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    return new SwitchCase(label, statements, range);\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    return new ThrowStatement(value, range);\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    return new TryStatement(statements, catchVariable, catchStatements, finallyStatements, range);\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    typeParameters: TypeParameterNode[] | null,\n    type: TypeNode,\n    range: Range\n  ): TypeDeclaration {\n    return new TypeDeclaration(name, decorators, flags, typeParameters, type, range);\n  }\n\n  static createVariableStatement(\n    decorators: DecoratorNode[] | null,\n    declarations: VariableDeclaration[],\n    range: Range\n  ): VariableStatement {\n    return new VariableStatement(decorators, declarations, range);\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    range: Range\n  ): VariableDeclaration {\n    return new VariableDeclaration(name, decorators, flags, type, initializer, range);\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    return new VoidStatement(expression, range);\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    return new WhileStatement(condition, statement, range);\n  }\n\n  /** Tests if this node is a literal of the specified kind. */\n  isLiteralKind(literalKind: LiteralKind): bool {\n    return this.kind == NodeKind.LITERAL\n        && (<LiteralExpression>changetype<Node>(this)).literalKind == literalKind; // TS\n  }\n\n  /** Tests if this node is a literal of a numeric kind (float or integer). */\n  get isNumericLiteral(): bool {\n    if (this.kind == NodeKind.LITERAL) {\n      switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n        case LiteralKind.FLOAT:\n        case LiteralKind.INTEGER: return true;\n      }\n    }\n    return false;\n  }\n\n  /** Tests whether this node is guaranteed to compile to a constant value. */\n  get compilesToConst(): bool {\n    switch (this.kind) {\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>changetype<Node>(this)).literalKind) { // TS\n          case LiteralKind.FLOAT:\n          case LiteralKind.INTEGER:\n          case LiteralKind.STRING: return true;\n        }\n        break;\n      }\n      case NodeKind.NULL:\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return true;\n    }\n    return false;\n  }\n\n  private isAccessOn(kind: NodeKind): bool {\n    let node = changetype<Node>(this);\n    if (node.kind == NodeKind.CALL) {\n      node = (<CallExpression>node).expression;\n    }\n    if (node.kind == NodeKind.PROPERTYACCESS) {\n      let target = (<PropertyAccessExpression>node).expression;\n      if (target.kind == kind) return true;\n    }\n    return false;\n  }\n\n  /** Checks if this node accesses a method or property on `this`. */\n  get isAccessOnThis(): bool {\n    return this.isAccessOn(NodeKind.THIS);\n  }\n\n  /** Checks if this node accesses a method or property on `super`. */\n  get isAccessOnSuper(): bool {\n    return this.isAccessOn(NodeKind.SUPER);\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  constructor(\n    /** Kind of the type node. */\n    kind: NodeKind,\n    /** Whether nullable or not. */\n    public isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>changetype<TypeNode>(this); // TS\n      if (!namedTypeNode.name.next) {\n        let typeArgumentNodes = namedTypeNode.typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = namedTypeNode.name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let functionTypeNode = <FunctionTypeNode>changetype<TypeNode>(this); // TS\n      let parameterNodes = functionTypeNode.parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if (functionTypeNode.returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = functionTypeNode.explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  constructor(\n    /** Identifier of this part. */\n    public identifier: IdentifierExpression,\n    /** Next part of the type name or `null` if this is the last part. */\n    public next: TypeName | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPENAME, range);\n  }\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  constructor(\n    /** Type name. */\n    public name: TypeName,\n    /** Type argument references. */\n    public typeArguments: TypeNode[] | null,\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMEDTYPE, isNullable, range);\n  }\n\n  /** Checks if this type node has type arguments. */\n  get hasTypeArguments(): bool {\n    var typeArguments = this.typeArguments;\n    return typeArguments !== null && typeArguments.length > 0;\n  }\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  constructor(\n    /** Function parameters. */\n    public parameters: ParameterNode[],\n    /** Return type. */\n    public returnType: TypeNode,\n    /** Explicitly provided this type, if any. */\n    public explicitThisType: NamedTypeNode | null, // can't be a function\n    /** Whether nullable or not. */\n    isNullable: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONTYPE, isNullable, range);\n  }\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  constructor(\n    /** Identifier reference. */\n    public name: IdentifierExpression,\n    /** Extended type reference, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Default type if omitted, if any. */\n    public defaultType: NamedTypeNode | null, // can't be a function\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEPARAMETER, range);\n  }\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  constructor(\n    /** Parameter kind. */\n    public parameterKind: ParameterKind,\n    /** Parameter name. */\n    public name: IdentifierExpression,\n    /** Parameter type. */\n    public type: TypeNode,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARAMETER, range);\n  }\n\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  FINAL,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.f: {\n          if (nameStr == \"final\") return DecoratorKind.FINAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (nameNode.kind == NodeKind.PROPERTYACCESS) {\n      let propertyAccessNode = <PropertyAccessExpression>nameNode;\n      let expression = propertyAccessNode.expression;\n      if (expression.kind == NodeKind.IDENTIFIER) {\n        let nameStr = (<IdentifierExpression>expression).text;\n        assert(nameStr.length);\n        let propStr = propertyAccessNode.property.text;\n        assert(propStr.length);\n        if (nameStr == \"operator\") {\n          switch (propStr.charCodeAt(0)) {\n            case CharCode.b: {\n              if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n              break;\n            }\n            case CharCode.p: {\n              if (propStr == \"prefix\") return DecoratorKind.OPERATOR_PREFIX;\n              if (propStr == \"postfix\") return DecoratorKind.OPERATOR_POSTFIX;\n              break;\n            }\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  constructor(\n    /** Built-in decorator kind, or custom. */\n    public decoratorKind: DecoratorKind,\n    /** Name expression. */\n    public name: Expression,\n    /** Argument expressions. */\n    public args: Expression[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DECORATOR, range);\n  }\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash line comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  constructor(\n    /** Comment kind. */\n    public commentKind: CommentKind,\n    /** Comment text. */\n    public text: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMENT, range);\n  }\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  constructor(\n    /** Textual name. */\n    public text: string,\n    /** Whether quoted or not. */\n    public isQuoted: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IDENTIFIER, range);\n  }\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  constructor(\n    /** Specific literal kind. */\n    public literalKind: LiteralKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.LITERAL, range);\n  }\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Nested element expressions. */\n    public elementExpressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.ARRAY, range);\n  }\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  /** A prefix assertion, i.e. `<T>expr`. */\n  PREFIX,\n  /** An as assertion, i.e. `expr as T`. */\n  AS,\n  /** A non-null assertion, i.e. `!expr`. */\n  NONNULL,\n  /** A const assertion, i.e. `expr as const`. */\n  CONST\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  constructor(\n    /** Specific kind of this assertion. */\n    public assertionKind: AssertionKind,\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Target type, if applicable. */\n    public toType: TypeNode | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ASSERTION, range);\n  }\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  constructor(\n    /** Operator token. */\n    public operator: Token,\n    /** Left-hand side expression */\n    public left: Expression,\n    /** Right-hand side expression. */\n    public right: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BINARY, range);\n  }\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  constructor(\n    /** Called expression. Usually an identifier or property access expression. */\n    public expression: Expression,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CALL, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments) {\n      if (numTypeArguments = typeArguments.length) {\n        return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n      }\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  constructor(\n    /** Inline class declaration. */\n    public declaration: ClassDeclaration\n  ) {\n    super(NodeKind.CLASS, declaration.range);\n  }\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  constructor(\n    /** Sequential expressions. */\n    public expressions: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.COMMA, range);\n  }\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"constructor\", false, range);\n    this.kind = NodeKind.CONSTRUCTOR;\n  }\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Element of the expression being accessed. */\n    public elementExpression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ELEMENTACCESS, range);\n  }\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Float value. */\n    public value: f64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.FLOAT, range);\n  }\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  constructor(\n    /** Inline function declaration. */\n    public declaration: FunctionDeclaration\n  ) {\n    super(NodeKind.FUNCTION, declaration.range);\n  }\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  constructor(\n    /** Expression being asserted. */\n    public expression: Expression,\n    /** Type to test for. */\n    public isType: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INSTANCEOF, range);\n  }\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Integer value. */\n    public value: i64,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.INTEGER, range);\n  }\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  constructor(\n    /** Type being constructed. */\n    public typeName: TypeName,\n    /** Provided type arguments. */\n    public typeArguments: TypeNode[] | null,\n    /** Provided arguments. */\n    public args: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NEW, range);\n  }\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments !== null && (numTypeArguments = typeArguments.length) > 0) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.args;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"null\", false, range);\n    this.kind = NodeKind.NULL;\n  }\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Field names. */\n    public names: IdentifierExpression[],\n    /** Field values. */\n    public values: Expression[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.OBJECT, range);\n  }\n}\n\n/** Represents an omitted expression, e.g. within an array literal. */\nexport class OmittedExpression extends Expression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.OMITTED, range);\n  }\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  constructor(\n    /** Expression in parenthesis. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PARENTHESIZED, range);\n  }\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  constructor(\n    /** Expression being accessed. */\n    public expression: Expression,\n    /** Property of the expression being accessed. */\n    public property: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.PROPERTYACCESS, range);\n  }\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  constructor(\n    /** Regular expression pattern. */\n    public pattern: string,\n    /** Regular expression flags. */\n    public patternFlags: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.REGEXP, range);\n  }\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Expression executed when condition is `true`. */\n    public ifThen: Expression,\n    /** Expression executed when condition is `false`. */\n    public ifElse: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TERNARY, range);\n  }\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  constructor(\n    /** String value without quotes. */\n    public value: string,\n    /** Source range. */\n    range: Range\n  ) {\n    super(LiteralKind.STRING, range);\n  }\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"super\", false, range);\n    this.kind = NodeKind.SUPER;\n  }\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"this\", false, range);\n    this.kind = NodeKind.THIS;\n  }\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"true\", false, range);\n    this.kind = NodeKind.TRUE;\n  }\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(\"false\", false, range);\n    this.kind = NodeKind.FALSE;\n  }\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n  constructor(\n    /** Unary expression kind. */\n    kind: NodeKind,\n    /** Operator token. */\n    public operator: Token,\n    /** Operand expression. */\n    public operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPOSTFIX, operator, operand, range);\n  }\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  constructor(\n    /** Operator token. */\n    operator: Token,\n    /** Operand expression. */\n    operand: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.UNARYPREFIX, operator, operand, range);\n  }\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  constructor(\n    /** Source kind. */\n    public sourceKind: SourceKind,\n    /** Normalized path with file extension. */\n    public normalizedPath: string,\n    /** Full source text. */\n    public text: string\n  ) {\n    super(NodeKind.SOURCE, new Range(0, text.length));\n    var internalPath = mangleInternalPath(normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.range.source = this;\n  }\n\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[] = new Array();\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n\n  /** Cached line starts. */\n  private lineCache: i32[] | null = null;\n\n  /** Remembered column number. */\n  private lineColumn: i32 = 1;\n\n  /** Determines the line number at the specified position. Starts at `1`. */\n  lineAt(pos: i32): i32 {\n    assert(pos >= 0 && pos < 0x7fffffff);\n    var lineCache = this.lineCache;\n    if (!lineCache) {\n      this.lineCache = lineCache = [0];\n      let text = this.text;\n      let off = 0;\n      let end = text.length;\n      while (off < end) {\n        if (text.charCodeAt(off++) == CharCode.LINEFEED) lineCache.push(off);\n      }\n      lineCache.push(0x7fffffff);\n    }\n    var l = 0;\n    var r = lineCache.length - 1;\n    while (l < r) {\n      let m = l + ((r - l) >> 1);\n      let s = unchecked(lineCache[m]);\n      if (pos < s) r = m;\n      else if (pos < unchecked(lineCache[m + 1])) {\n        this.lineColumn = pos - s + 1;\n        return m + 1;\n      }\n      else l = m + 1;\n    }\n    return assert(0);\n  }\n\n  /** Gets the column number at the last position queried with `lineAt`. Starts at `1`. */\n  columnAt(): i32 {\n    return this.lineColumn;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  constructor(\n    /** Declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    public name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    public decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, range);\n  }\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature. */\nexport class IndexSignatureNode extends Node {\n  constructor(\n    /** Key type. */\n    public keyType: NamedTypeNode,\n    /** Value type. */\n    public valueType: TypeNode,\n    /** Common flags indicating specific traits. */\n    public flags: CommonFlags,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.INDEXSIGNATURE, range);\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n  constructor(\n    /** Variable-like declaration node kind. */\n    kind: NodeKind,\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    public type: TypeNode | null,\n    /** Initializer expression, if any. */\n    public initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(kind, name, decorators, flags, range);\n  }\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BLOCK, range);\n  }\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  constructor(\n    /** Target label, if any. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.BREAK, range);\n  }\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    public extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    public implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    public members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CLASSDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Index signature, if present. */\n  indexSignature: IndexSignatureNode | null = null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  constructor(\n    /** Target label, if applicable. */\n    public label: IdentifierExpression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.CONTINUE, range);\n  }\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  constructor(\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Condition when to repeat. */\n    public condition: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.DO, range);\n  }\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  constructor(\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EMPTY, range);\n  }\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Enum value declarations. */\n    public values: EnumValueDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.ENUMVALUEDECLARATION, name, null, flags, null, initializer, range);\n  }\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Statement {\n  constructor(\n    /** Identifier being imported. */\n    public name: IdentifierExpression,\n    /** Identifier being exported. */\n    public externalName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTIMPORT, range);\n  }\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  constructor(\n    /** Local identifier. */\n    public localName: IdentifierExpression,\n    /** Exported identifier. */\n    public exportedName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTMEMBER, range);\n  }\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  constructor(\n    /** Array of members if a set of named exports, or `null` if a file export. */\n    public members: ExportMember[] | null,\n    /** Path being exported from, if applicable. */\n    public path: StringLiteralExpression | null,\n    /** Whether this is a declared export. */\n    public isDeclare: bool,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORT, range);\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      this.internalPath = normalizedPath;\n    } else {\n      this.internalPath = null;\n    }\n  }\n\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  constructor(\n    /** Declaration being exported as default. */\n    public declaration: DeclarationStatement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.EXPORTDEFAULT, range);\n  }\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  constructor(\n    /** Expression being used as a statement.*/\n    public expression: Expression\n  ) {\n    super(NodeKind.EXPRESSION, expression.range);\n  }\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n    public parameterIndex: i32,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FIELDDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  constructor(\n    /** Initializer statement, if present. Either a `VariableStatement` or `ExpressionStatement`. */\n    public initializer: Statement | null,\n    /** Condition expression, if present. */\n    public condition: Expression | null,\n    /** Incrementor expression, if present. */\n    public incrementor: Expression | null,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOR, range);\n  }\n}\n\n/** Represents a `for..of` statement. */\nexport class ForOfStatement extends Statement {\n  constructor(\n    /** Variable statement. Either a `VariableStatement` or `ExpressionStatement` of `IdentifierExpression`. */\n    public variable: Statement,\n    /** Iterable expression being iterated. */\n    public iterable: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FOROF, range);\n  }\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    public signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    public body: Statement | null,\n    /** Arrow function kind, if applicable. */\n    public arrowKind: ArrowKind,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.FUNCTIONDECLARATION, name, decorators, flags, range);\n  }\n\n  /** Gets if this function is generic. */\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return new FunctionDeclaration(\n      this.name,\n      this.decorators,\n      this.flags,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  constructor(\n    /** Condition. */\n    public condition: Expression,\n    /** Statement executed when condition is `true`. */\n    public ifTrue: Statement,\n    /** Statement executed when condition is `false`. */\n    public ifFalse: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IF, range);\n  }\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Identifier being imported. */\n    public foreignName: IdentifierExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORTDECLARATION, name, null, CommonFlags.NONE, range);\n  }\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  constructor(\n    /** Array of member declarations or `null` if an asterisk import. */\n    public declarations: ImportDeclaration[] | null,\n    /** Name of the local namespace, if an asterisk import. */\n    public namespaceName: IdentifierExpression | null,\n    /** Path being imported from. */\n    public path: StringLiteralExpression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.IMPORT, range);\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    this.internalPath = normalizedPath;\n  }\n\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Accepted type parameters. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Base class type being extended, if any. */\n    extendsType: NamedTypeNode | null, // can't be a function\n    /** Interface types being implemented, if any. */\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    /** Class member declarations. */\n    members: DeclarationStatement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, extendsType, implementsTypes, members, range);\n    this.kind = NodeKind.INTERFACEDECLARATION;\n  }\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    typeParameters: TypeParameterNode[] | null,\n    /** Function signature. */\n    signature: FunctionTypeNode,\n    /** Body statement. Usually a block. */\n    body: Statement | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(name, decorators, flags, typeParameters, signature, body, ArrowKind.NONE, range);\n    this.kind = NodeKind.METHODDECLARATION;\n  }\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Array of namespace members. */\n    public members: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.NAMESPACEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  constructor(\n    /** Value expression being returned, if present. */\n    public value: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.RETURN, range);\n  }\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  constructor(\n    /** Label expression. `null` indicates the default case. */\n    public label: Expression | null,\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCHCASE, range);\n  }\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Contained cases. */\n    public cases: SwitchCase[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.SWITCH, range);\n  }\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  constructor(\n    /** Value expression being thrown. */\n    public value: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.THROW, range);\n  }\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  constructor(\n    /** Contained statements. */\n    public statements: Statement[],\n    /** Exception variable name, if a `catch` clause is present. */\n    public catchVariable: IdentifierExpression | null,\n    /** Statements being executed on catch, if a `catch` clause is present. */\n    public catchStatements: Statement[] | null,\n    /** Statements being executed afterwards, if a `finally` clause is present. */\n    public finallyStatements: Statement[] | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TRY, range);\n  }\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Type parameters, if any. */\n    public typeParameters: TypeParameterNode[] | null,\n    /** Type being aliased. */\n    public type: TypeNode,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.TYPEDECLARATION, name, decorators, flags, range);\n  }\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  constructor(\n    /** Simple name being declared. */\n    name: IdentifierExpression,\n    /** Array of decorators, if any. */\n    decorators: DecoratorNode[] | null,\n    /** Common flags indicating specific traits. */\n    flags: CommonFlags,\n    /** Annotated type node, if any. */\n    type: TypeNode | null,\n    /** Initializer expression, if any. */\n    initializer: Expression | null,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLEDECLARATION, name, decorators, flags, type, initializer, range);\n  }\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  constructor(\n    /** Array of decorators. */\n    public decorators: DecoratorNode[] | null,\n    /** Array of member declarations. */\n    public declarations: VariableDeclaration[],\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VARIABLE, range);\n  }\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  constructor(\n    /** Expression being dropped. */\n    public expression: Expression,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.VOID, range);\n  }\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  constructor(\n    /** Condition expression. */\n    public condition: Expression,\n    /** Statement being looped over. */\n    public statement: Statement,\n    /** Source range. */\n    range: Range\n  ) {\n    super(NodeKind.WHILE, range);\n  }\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  var pos = path.lastIndexOf(\".\");\n  var len = path.length;\n  if (pos >= 0 && len - pos >= 2) { // at least one char plus dot\n    let cur = pos;\n    while (++cur < len) {\n      if (!isTrivialAlphanum(path.charCodeAt(cur))) {\n        assert(false); // not a valid external path\n        return path;\n      }\n    }\n    return path.substring(0, pos);\n  }\n  assert(false); // not an external path\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next !== null || name.identifier.text.length > 0);\n  }\n  return false;\n}\n","/**\n * @fileoverview A TypeScript tokenizer modified for AssemblyScript.\n *\n * The `Tokenizer` scans over a source file and returns one syntactic token\n * at a time that the parser will combine to an abstract syntax tree.\n *\n * It skips over trivia like comments and whitespace and provides a general\n * mark/reset mechanism for the parser to utilize on ambiguous tokens, with\n * one token of lookahead otherwise.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      if (text == \"abstract\") return Token.ABSTRACT;\n      if (text == \"as\") return Token.AS;\n      if (text == \"async\") return Token.ASYNC;\n      if (text == \"await\") return Token.AWAIT;\n      break;\n    }\n    case CharCode.b: {\n      if (text == \"break\") return Token.BREAK;\n      break;\n    }\n    case CharCode.c: {\n      if (text == \"case\") return Token.CASE;\n      if (text == \"catch\") return Token.CATCH;\n      if (text == \"class\") return Token.CLASS;\n      if (text == \"continue\") return Token.CONTINUE;\n      if (text == \"const\") return Token.CONST;\n      if (text == \"constructor\") return Token.CONSTRUCTOR;\n      break;\n    }\n    case CharCode.d: {\n      if (text == \"debugger\") return Token.DEBUGGER;\n      if (text == \"declare\") return Token.DECLARE;\n      if (text == \"default\") return Token.DEFAULT;\n      if (text == \"delete\") return Token.DELETE;\n      if (text == \"do\") return Token.DO;\n      break;\n    }\n    case CharCode.e: {\n      if (text == \"else\") return Token.ELSE;\n      if (text == \"enum\") return Token.ENUM;\n      if (text == \"export\") return Token.EXPORT;\n      if (text == \"extends\") return Token.EXTENDS;\n      break;\n    }\n    case CharCode.f: {\n      if (text == \"false\") return Token.FALSE;\n      if (text == \"finally\") return Token.FINALLY;\n      if (text == \"for\") return Token.FOR;\n      if (text == \"from\") return Token.FROM;\n      if (text == \"function\") return Token.FUNCTION;\n      break;\n    }\n    case CharCode.g: {\n      if (text == \"get\") return Token.GET;\n      break;\n    }\n    case CharCode.i: {\n      if (text == \"if\") return Token.IF;\n      if (text == \"implements\") return Token.IMPLEMENTS;\n      if (text == \"import\") return Token.IMPORT;\n      if (text == \"in\") return Token.IN;\n      if (text == \"instanceof\") return Token.INSTANCEOF;\n      if (text == \"interface\") return Token.INTERFACE;\n      if (text == \"is\") return Token.IS;\n      break;\n    }\n    case CharCode.k: {\n      if (text == \"keyof\") return Token.KEYOF;\n      break;\n    }\n    case CharCode.l: {\n      if (text == \"let\") return Token.LET;\n      break;\n    }\n    case CharCode.m: {\n      if (text == \"module\") return Token.MODULE;\n      break;\n    }\n    case CharCode.n: {\n      if (text == \"namespace\") return Token.NAMESPACE;\n      if (text == \"new\") return Token.NEW;\n      if (text == \"null\") return Token.NULL;\n      break;\n    }\n    case CharCode.o: {\n      if (text == \"of\") return Token.OF;\n      break;\n    }\n    case CharCode.p: {\n      if (text == \"package\") return Token.PACKAGE;\n      if (text == \"private\") return Token.PRIVATE;\n      if (text == \"protected\") return Token.PROTECTED;\n      if (text == \"public\") return Token.PUBLIC;\n      break;\n    }\n    case CharCode.r: {\n      if (text == \"readonly\") return Token.READONLY;\n      if (text == \"return\") return Token.RETURN;\n      break;\n    }\n    case CharCode.s: {\n      if (text == \"set\") return Token.SET;\n      if (text == \"static\") return Token.STATIC;\n      if (text == \"super\") return Token.SUPER;\n      if (text == \"switch\") return Token.SWITCH;\n      break;\n    }\n    case CharCode.t: {\n      if (text == \"this\") return Token.THIS;\n      if (text == \"throw\") return Token.THROW;\n      if (text == \"true\") return Token.TRUE;\n      if (text == \"try\") return Token.TRY;\n      if (text == \"type\") return Token.TYPE;\n      if (text == \"typeof\") return Token.TYPEOF;\n      break;\n    }\n    case CharCode.v: {\n      if (text == \"var\") return Token.VAR;\n      if (text == \"void\") return Token.VOID;\n      break;\n    }\n    case CharCode.w: {\n      if (text == \"while\") return Token.WHILE;\n      if (text == \"with\") return Token.WITH;\n      break;\n    }\n    case CharCode.y: {\n      if (text == \"yield\") return Token.YIELD;\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  start: i32;\n  end: i32;\n  source!: Source;\n  debugInfoRef: usize = 0;\n\n  constructor(start: i32, end: i32) {\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    let range = new Range(\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n    range.source = a.source;\n    return range;\n  }\n\n  equals(other: Range): bool {\n    return this.source == other.source && this.start == other.start && this.end == other.end;\n  }\n\n  get atStart(): Range {\n    let range = new Range(this.start, this.start);\n    range.source = this.source;\n    return range;\n  }\n\n  get atEnd(): Range {\n    let range = new Range(this.end, this.end);\n    range.source = this.source;\n    return range;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n}\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    if (!diagnostics) diagnostics = [];\n    this.diagnostics = diagnostics;\n    this.source = source;\n\n    var text = source.text;\n    var end = text.length;\n    var pos = 0;\n    // skip bom\n    if (\n      pos < end &&\n      text.charCodeAt(pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++pos;\n    }\n\n    // skip shebang\n    if (\n      pos + 1 < end &&\n      text.charCodeAt(pos) == CharCode.HASH &&\n      text.charCodeAt(pos + 1) == CharCode.EXCLAMATION\n    ) {\n      pos += 2;\n      while (\n        pos < end &&\n        text.charCodeAt(pos) != CharCode.LINEFEED\n      ) {\n        ++pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n    this.pos = pos;\n    this.end = end;\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    var token: Token;\n    do token = this.unsafeNext(identifierHandling);\n    while (token == Token.INVALID);\n    this.token = token;\n    return token;\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    while (pos < end) {\n      this.tokenPos = pos;\n      let c = text.charCodeAt(pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++pos < end &&\n            text.charCodeAt(pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            ++pos;\n            if (\n              maxTokenLength > 2 && pos < end &&\n              text.charCodeAt(pos) == CharCode.EQUALS\n            ) {\n              this.pos = pos + 1;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            this.pos = pos;\n            return Token.EXCLAMATION_EQUALS;\n          }\n          this.pos = pos;\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          this.pos = pos;\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.PERCENT_EQUALS;\n          }\n          this.pos = pos;\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.AMPERSAND) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          this.pos = pos + 1;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          this.pos = pos + 1;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++pos;\n              if (\n                maxTokenLength > 2 && pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              this.pos = pos;\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          this.pos = pos;\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.PLUS) {\n              this.pos = pos + 1;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          this.pos = pos + 1;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.MINUS) {\n              this.pos = pos + 1;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (isDecimalDigit(chr)) {\n              this.pos = pos - 1;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(pos + 1) == CharCode.DOT\n            ) {\n              this.pos = pos + 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          this.pos = pos;\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = pos;\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                pos + 1 < end &&\n                text.charCodeAt(pos + 1) == CharCode.SLASH\n              ) {\n                ++pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++pos < end) {\n                if (text.charCodeAt(pos) == CharCode.LINEFEED) {\n                  ++pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++pos < end) {\n                c = text.charCodeAt(pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  pos + 1 < end &&\n                  text.charCodeAt(pos + 1) == CharCode.SLASH\n                ) {\n                  pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, pos),\n                  this.range(commentStartPos, pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          this.pos = pos;\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          this.pos = pos + 1;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          this.pos = pos + 1;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              this.pos = pos;\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.EQUALS) {\n              ++pos;\n              if (\n                maxTokenLength > 2 &&\n                pos < end &&\n                text.charCodeAt(pos) == CharCode.EQUALS\n              ) {\n                this.pos = pos + 1;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              this.pos = pos;\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              this.pos = pos + 1;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          this.pos = pos;\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++pos;\n              if (maxTokenLength > 2 && pos < end) {\n                chr = text.charCodeAt(pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++pos;\n                  if (\n                    maxTokenLength > 3 && pos < end &&\n                    text.charCodeAt(pos) == CharCode.EQUALS\n                  ) {\n                    this.pos = pos + 1;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  this.pos = pos;\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  this.pos = pos + 1;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              this.pos = pos;\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          this.pos = pos + 1;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          this.pos = pos + 1;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++pos;\n          if (\n            maxTokenLength > 1 && pos < end &&\n            text.charCodeAt(pos) == CharCode.EQUALS\n          ) {\n            this.pos = pos + 1;\n            return Token.CARET_EQUALS;\n          }\n          this.pos = pos;\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          this.pos = pos + 1;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++pos;\n          if (maxTokenLength > 1 && pos < end) {\n            let chr = text.charCodeAt(pos);\n            if (chr == CharCode.BAR) {\n              this.pos = pos + 1;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              this.pos = pos + 1;\n              return Token.BAR_EQUALS;\n            }\n          }\n          this.pos = pos;\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          this.pos = pos + 1;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          this.pos = pos + 1;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          this.pos = pos + 1;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = pos;\n              while (\n                ++pos < end &&\n                isIdentifierPart(c = text.charCodeAt(pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                this.pos = pos;\n                return keywordToken;\n              }\n              this.pos = pos = posBefore;\n            }\n            this.pos = pos;\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++pos;\n            break;\n          }\n          let start = pos++;\n          if ( // surrogate pair?\n            (c & 0xFC00) == 0xD800 && pos < end &&\n            ((text.charCodeAt(pos)) & 0xFC00) == 0xDC00\n          ) ++pos;\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(start, pos)\n          );\n          this.pos = pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    this.pos = pos;\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      let nextToken: Token;\n      do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      while (nextToken == Token.INVALID);\n      this.nextToken = nextToken;\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    if (token == Token.GREATERTHAN) {  // where parsing type arguments\n      maxCompoundLength = 1;\n    }\n    var nextToken: Token;\n    do nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n    while (nextToken == Token.INVALID);\n    if (nextToken == token) {\n      this.token = token;\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state = reusableState;\n    if (state) {\n      reusableState = null;\n      state.pos = this.pos;\n      state.token = this.token;\n      state.tokenPos = this.tokenPos;\n    } else {\n      state = new State(this.pos, this.token, this.tokenPos);\n    }\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    let range = new Range(start, end);\n    range.source = this.source;\n    return range;\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var start = pos;\n    while (\n      ++pos < end &&\n      isIdentifierPart(text.charCodeAt(pos))\n    );\n    this.pos = pos;\n    return text.substring(start, pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var end = this.end;\n    var pos = this.pos;\n    var quote = text.charCodeAt(pos++);\n    var start = pos;\n    var result = \"\";\n    while (true) {\n      if (pos >= end) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(pos);\n      if (c == quote) {\n        result += text.substring(start, pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, pos);\n        this.pos = pos; // save\n        result += this.readEscapeSequence();\n        pos = this.pos; // restore\n        start = pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, pos)\n        );\n        break;\n      }\n      ++pos;\n    }\n    this.pos = pos;\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 2 < this.end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos = pos + 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos = pos + 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos = pos + 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(pos + 1))) {\n        let start = pos;\n        this.pos = pos + 1;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): i64 {\n    var text = this.source.text;\n    let pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readDecimalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readOctalInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readBinaryInteger(): i64 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    var start = pos;\n    var sepEnd = start;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++pos;\n    }\n    if (pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    this.pos = pos;\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    var text = this.source.text;\n    var end = this.end;\n    var start = this.pos;\n    var sepCount = this.readDecimalFloatPartial(false);\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      sepCount += this.readDecimalFloatPartial();\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        sepCount += this.readDecimalFloatPartial();\n      }\n    }\n    let result = text.substring(start, this.pos);\n    if (sepCount) result = result.replaceAll(\"_\", \"\");\n    return parseFloat(result);\n  }\n\n  /** Reads past one section of a decimal float literal. Returns the number of separators encountered. */\n  private readDecimalFloatPartial(allowLeadingZeroSep: bool = true): u32 {\n    var text = this.source.text;\n    var pos = this.pos;\n    var start = pos;\n    var end = this.end;\n    var sepEnd = start;\n    var sepCount = 0;\n\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n\n      if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        } else if (!allowLeadingZeroSep && pos - 1 == start && text.charCodeAt(pos - 1) == CharCode._0) {\n          this.error(\n            DiagnosticCode.Numeric_separators_are_not_allowed_here,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n        ++sepCount;\n      } else if (!isDecimalDigit(c)) {\n        break;\n      }\n      ++pos;\n    }\n\n    if (pos != start && sepEnd == pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n\n    this.pos = pos;\n    return sepCount;\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var text = this.source.text;\n    var pos = this.pos;\n    var end = this.end;\n    while (pos < end) {\n      let c = text.charCodeAt(pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(pos - 1, pos)\n        );\n        this.pos = pos;\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(pos)\n      );\n      this.pos = pos;\n      return \"\";\n    }\n    this.pos = pos;\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  constructor(\n    /** Current position. */\n    public pos: i32,\n    /** Current token. */\n    public token: Token,\n    /** Current token's position. */\n    public tokenPos: i32\n  ) {}\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * @fileoverview AssemblyScript's intermediate representation.\n *\n * The compiler uses Binaryen IR, which is fairly low level, as its\n * primary intermediate representation, with the following structures\n * holding any higher level information that cannot be represented by\n * Binaryen IR alone, for example higher level types.\n *\n * Similar to the AST being composed of `Node`s in `Source`s, the IR is\n * composed of `Element`s in a `Program`. Each class or function is\n * represented by a \"prototype\" holding all the relevant information,\n * including each's concrete instances. If a class or function is not\n * generic, there is exactly one instance, otherwise there is one for\n * each concrete set of type arguments.\n *\n * @license Apache-2.0\n */\n\n// Element                    Base class of all elements\n// ├─DeclaredElement          Base class of elements with a declaration\n// │ ├─TypedElement           Base class of elements resolving to a type\n// │ │ ├─TypeDefinition       Type alias declaration\n// │ │ ├─VariableLikeElement  Base class of all variable-like elements\n// │ │ │ ├─EnumValue          Enum value\n// │ │ │ ├─Global             File global\n// │ │ │ ├─Local              Function local\n// │ │ │ ├─Field              Class field (instance only)\n// │ │ │ └─Property           Class property\n// │ │ ├─IndexSignature       Class index signature\n// │ │ ├─Function             Concrete function instance\n// │ │ └─Class                Concrete class instance\n// │ ├─Namespace              Namespace with static members\n// │ ├─FunctionPrototype      Prototype of concrete function instances\n// │ ├─FieldPrototype         Prototype of concrete field instances\n// │ ├─PropertyPrototype      Prototype of concrete property instances\n// │ └─ClassPrototype         Prototype of concrete classe instances\n// └─File                     File, analogous to Source in the AST\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  STUB_DELIMITER,\n  CommonNames,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  Signature,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  Token,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportDefaultStatement,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n  ParameterKind\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef,\n  MemorySegment\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  writeI64,\n  writeI32AsI64,\n  writeI64AsI32\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    public options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(SourceKind.LIBRARY_ENTRY, LIBRARY_SUBST + \".wasm\", \"[native code]\");\n    this.nativeSource = nativeSource;\n    this.parser = new Parser(this.diagnostics, this.sources);\n    this.resolver = new Resolver(this);\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n  }\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver!: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile!: File;\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** An indicator if the program has been initialized. */\n  initialized: bool = false;\n\n  // Lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // Standard library\n\n  /** Gets the standard `ArrayBufferView` instance. */\n  get arrayBufferViewInstance(): Class {\n    var cached = this._arrayBufferViewInstance;\n    if (!cached) this._arrayBufferViewInstance = cached = this.requireClass(CommonNames.ArrayBufferView);\n    return cached;\n  }\n  private _arrayBufferViewInstance: Class | null = null;\n\n  /** Gets the standard `ArrayBuffer` instance. */\n  get arrayBufferInstance(): Class {\n    var cached = this._arrayBufferInstance;\n    if (!cached) this._arrayBufferInstance = cached = this.requireClass(CommonNames.ArrayBuffer);\n    return cached;\n  }\n  private _arrayBufferInstance: Class | null = null;\n\n  /** Gets the standard `Array` prototype. */\n  get arrayPrototype(): ClassPrototype {\n    var cached = this._arrayPrototype;\n    if (!cached) this._arrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _arrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `StaticArray` prototype. */\n  get staticArrayPrototype(): ClassPrototype {\n    var cached = this._staticArrayPrototype;\n    if (!cached) this._staticArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.StaticArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _staticArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Set` prototype. */\n  get setPrototype(): ClassPrototype {\n    var cached = this._setPrototype;\n    if (!cached) this._setPrototype = cached = <ClassPrototype>this.require(CommonNames.Set, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _setPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Map` prototype. */\n  get mapPrototype(): ClassPrototype {\n    var cached = this._mapPrototype;\n    if (!cached) this._mapPrototype = cached = <ClassPrototype>this.require(CommonNames.Map, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _mapPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Function` prototype. */\n  get functionPrototype(): ClassPrototype {\n    var cached = this._functionPrototype;\n    if (!cached) this._functionPrototype = cached = <ClassPrototype>this.require(CommonNames.Function, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _functionPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int8Array` prototype. */\n  get int8ArrayPrototype(): ClassPrototype {\n    var cached = this._int8ArrayPrototype;\n    if (!cached) this._int8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int16Array` prototype. */\n  get int16ArrayPrototype(): ClassPrototype {\n    var cached = this._int16ArrayPrototype;\n    if (!cached) this._int16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int32Array` prototype. */\n  get int32ArrayPrototype(): ClassPrototype {\n    var cached = this._int32ArrayPrototype;\n    if (!cached) this._int32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Int64Array` prototype. */\n  get int64ArrayPrototype(): ClassPrototype {\n    var cached = this._int64ArrayPrototype;\n    if (!cached) this._int64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _int64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8Array` prototype. */\n  get uint8ArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ArrayPrototype;\n    if (!cached) this._uint8ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint8ClampedArray` prototype. */\n  get uint8ClampedArrayPrototype(): ClassPrototype {\n    var cached = this._uint8ClampedArrayPrototype;\n    if (!cached) this._uint8ClampedArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint8ClampedArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint16Array` prototype. */\n  get uint16ArrayPrototype(): ClassPrototype {\n    var cached = this._uint16ArrayPrototype;\n    if (!cached) this._uint16ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint16ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint32Array` prototype. */\n  get uint32ArrayPrototype(): ClassPrototype {\n    var cached = this._uint32ArrayPrototype;\n    if (!cached) this._uint32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Uint64Array` prototype. */\n  get uint64ArrayPrototype(): ClassPrototype {\n    var cached = this._uint64ArrayPrototype;\n    if (!cached) this._uint64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _uint64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float32Array` prototype. */\n  get float32ArrayPrototype(): ClassPrototype {\n    var cached = this._float32ArrayPrototype;\n    if (!cached) this._float32ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float32ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `Float64Array` prototype. */\n  get float64ArrayPrototype(): ClassPrototype {\n    var cached = this._float64ArrayPrototype;\n    if (!cached) this._float64ArrayPrototype = cached = <ClassPrototype>this.require(CommonNames.Float64Array, ElementKind.CLASS_PROTOTYPE);\n    return cached;\n  }\n  private _float64ArrayPrototype: ClassPrototype | null = null;\n\n  /** Gets the standard `String` instance. */\n  get stringInstance(): Class {\n    var cached = this._stringInstance;\n    if (!cached) this._stringInstance = cached = this.requireClass(CommonNames.String);\n    return cached;\n  }\n  private _stringInstance: Class | null = null;\n\n  /** Gets the standard `abort` instance, if not explicitly disabled. */\n  get abortInstance(): Function | null {\n    return this.lookupFunction(CommonNames.abort);\n  }\n\n  // Runtime interface\n\n  /** Gets the runtime `__alloc(size: usize, id: u32): usize` instance. */\n  get allocInstance(): Function {\n    var cached = this._allocInstance;\n    if (!cached) this._allocInstance = cached = this.requireFunction(CommonNames.alloc);\n    return cached;\n  }\n  private _allocInstance: Function | null = null;\n\n  /** Gets the runtime `__realloc(ptr: usize, newSize: usize): usize` instance. */\n  get reallocInstance(): Function {\n    var cached = this._reallocInstance;\n    if (!cached) this._reallocInstance = cached = this.requireFunction(CommonNames.realloc);\n    return cached;\n  }\n  private _reallocInstance: Function | null = null;\n\n  /** Gets the runtime `__free(ptr: usize): void` instance. */\n  get freeInstance(): Function {\n    var cached = this._freeInstance;\n    if (!cached) this._freeInstance = cached = this.requireFunction(CommonNames.free);\n    return cached;\n  }\n  private _freeInstance: Function | null = null;\n\n  /** Gets the runtime `__retain(ptr: usize): usize` instance. */\n  get retainInstance(): Function {\n    var cached = this._retainInstance;\n    if (!cached) this._retainInstance = cached = this.requireFunction(CommonNames.retain);\n    return cached;\n  }\n  private _retainInstance: Function | null = null;\n\n  /** Gets the runtime `__release(ptr: usize): void` instance. */\n  get releaseInstance(): Function {\n    var cached = this._releaseInstance;\n    if (!cached) this._releaseInstance = cached = this.requireFunction(CommonNames.release);\n    return cached;\n  }\n  private _releaseInstance: Function | null = null;\n\n  /** Gets the runtime `__collect(): void` instance. */\n  get collectInstance(): Function {\n    var cached = this._collectInstance;\n    if (!cached) this._collectInstance = cached = this.requireFunction(CommonNames.collect);\n    return cached;\n  }\n  private _collectInstance: Function | null = null;\n\n  /** Gets the runtime `__visit(ptr: usize, cookie: u32): void` instance. */\n  get visitInstance(): Function {\n    var cached = this._visitInstance;\n    if (!cached) this._visitInstance = cached = this.requireFunction(CommonNames.visit);\n    return cached;\n  }\n  private _visitInstance: Function | null = null;\n\n  /** Gets the runtime `__typeinfo(id: u32): RTTIFlags` instance. */\n  get typeinfoInstance(): Function {\n    var cached = this._typeinfoInstance;\n    if (!cached) this._typeinfoInstance = cached = this.requireFunction(CommonNames.typeinfo);\n    return cached;\n  }\n  private _typeinfoInstance: Function | null = null;\n\n  /** Gets the runtime `__instanceof(ptr: usize, superId: u32): bool` instance. */\n  get instanceofInstance(): Function {\n    var cached = this._instanceofInstance;\n    if (!cached) this._instanceofInstance = cached = this.requireFunction(CommonNames.instanceof_);\n    return cached;\n  }\n  private _instanceofInstance: Function | null = null;\n\n  /** Gets the runtime `__allocBuffer(size: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocBufferInstance(): Function {\n    var cached = this._allocBufferInstance;\n    if (!cached) this._allocBufferInstance = cached = this.requireFunction(CommonNames.allocBuffer);\n    return cached;\n  }\n  private _allocBufferInstance: Function | null = null;\n\n  /** Gets the runtime `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` instance. */\n  get allocArrayInstance(): Function {\n    var cached = this._allocArrayInstance;\n    if (!cached) this._allocArrayInstance = cached = this.requireFunction(CommonNames.allocArray);\n    return cached;\n  }\n  private _allocArrayInstance: Function | null = null;\n\n  // Utility\n\n  /** Tests whether this is a WASI program. */\n  get isWasi(): bool {\n    return this.elementsByName.has(CommonNames.ASC_WASI);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, null, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null, flags, null,\n      Node.createOmittedType(range),\n      range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    var signature = this.nativeDummySignature;\n    if (!signature) {\n      this.nativeDummySignature = signature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonNames.void_, range),\n          null, false, range\n        ),\n        null, false, range\n      );\n    }\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, null, signature, null, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, flags, [], range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      null,\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? assert(elementsByDeclaration.get(declaration))\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(): void {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    var options = this.options;\n\n    // register native types\n    this.registerNativeType(CommonNames.i8, Type.i8);\n    this.registerNativeType(CommonNames.i16, Type.i16);\n    this.registerNativeType(CommonNames.i32, Type.i32);\n    this.registerNativeType(CommonNames.i64, Type.i64);\n    this.registerNativeType(CommonNames.isize, options.isizeType);\n    this.registerNativeType(CommonNames.u8, Type.u8);\n    this.registerNativeType(CommonNames.u16, Type.u16);\n    this.registerNativeType(CommonNames.u32, Type.u32);\n    this.registerNativeType(CommonNames.u64, Type.u64);\n    this.registerNativeType(CommonNames.usize, options.usizeType);\n    this.registerNativeType(CommonNames.bool, Type.bool);\n    this.registerNativeType(CommonNames.f32, Type.f32);\n    this.registerNativeType(CommonNames.f64, Type.f64);\n    this.registerNativeType(CommonNames.void_, Type.void);\n    this.registerNativeType(CommonNames.number, Type.f64); // alias\n    this.registerNativeType(CommonNames.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonNames.native, new TypeDefinition(\n      CommonNames.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.indexof, new TypeDefinition(\n      CommonNames.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.valueof, new TypeDefinition(\n      CommonNames.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonNames.returnof, new TypeDefinition(\n      CommonNames.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonNames.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n\n    // The following types might not be enabled by compiler options, so the\n    // compiler needs to check this condition whenever such a value is created\n    // respectively stored or loaded.\n    this.registerNativeType(CommonNames.v128, Type.v128);\n    this.registerNativeType(CommonNames.externref, Type.externref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonNames.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonNames.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_TABLE_BASE, Type.i32,\n      i64_new(options.tableBase, 0));\n    this.registerConstantInteger(CommonNames.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonNames.ASC_LOW_MEMORY_LIMIT, Type.i32,\n      i64_new(options.lowMemoryLimit, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonNames.ASC_FEATURE_MULTI_VALUE, Type.bool,\n      i64_new(options.hasFeature(Feature.MULTI_VALUE) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file, queuedExtends);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    // TODO: for (let [file, starExports] of queuedExportsStar) {\n    for (let _keys = Map_keys(queuedExportsStar), i = 0, k = _keys.length; i < k; ++i) {\n      let file = _keys[i];\n      let starExports = assert(queuedExportsStar.get(file));\n      for (let j = 0, l = starExports.length; j < l; ++j) {\n        let exportStar = unchecked(starExports[j]);\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports.\n    // note that imports may depend upon imports, so repeat until there's no more progress.\n    do {\n      let i = 0, madeProgress = false;\n      while (i < queuedImports.length) {\n        let queuedImport = queuedImports[i];\n        let localIdentifier = queuedImport.localIdentifier;\n        let foreignIdentifier = queuedImport.foreignIdentifier;\n        if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            foreignIdentifier.text,\n            queuedImport.foreignPath,\n            queuedImport.foreignPathAlt,\n            queuedExports\n          );\n          if (element) {\n            queuedImport.localFile.add(\n              localIdentifier.text,\n              element,\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n          }\n        } else { // i.e. import * as bar from \"./bar\"\n          let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n          if (foreignFile) {\n            let localFile = queuedImport.localFile;\n            let localName = localIdentifier.text;\n            localFile.add(\n              localName,\n              foreignFile.asAliasNamespace(\n                localName,\n                localFile,\n                localIdentifier\n              ),\n              localIdentifier // isImport\n            );\n            queuedImports.splice(i, 1);\n            madeProgress = true;\n          } else {\n            ++i;\n            assert(false); // already reported by the parser not finding the file\n          }\n        }\n      }\n      if (!madeProgress) {\n        // report queued imports we were unable to resolve\n        for (let j = 0, l = queuedImports.length; j < l; ++j) {\n          let queuedImport = queuedImports[j];\n          let foreignIdentifier = queuedImport.foreignIdentifier;\n          if (foreignIdentifier) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n            );\n          }\n        }\n        break;\n      }\n    } while (true);\n\n    // queued exports should be resolvable now that imports are finalized\n    // TODO: for (let [file, exports] of queuedExports) {\n    for (let _keys = Map_keys(queuedExports), i = 0, k = _keys.length; i < k; ++i) {\n      let file = unchecked(_keys[i]);\n      let exports = assert(queuedExports.get(file));\n      // TODO: for (let [exportName, queuedExport] of exports) {\n      for (let exportNames = Map_keys(exports), j = 0, l = exportNames.length; j < l; ++j) {\n        let exportName = unchecked(exportNames[j]);\n        let queuedExport = assert(exports.get(exportName));\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement !== null && isDeclaredElement(globalElement.kind)) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.arrayBufferInstance.id == 0);\n    assert(this.stringInstance.id == 1);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonNames.I8);\n    this.registerWrapperClass(Type.i16, CommonNames.I16);\n    this.registerWrapperClass(Type.i32, CommonNames.I32);\n    this.registerWrapperClass(Type.i64, CommonNames.I64);\n    this.registerWrapperClass(options.isizeType, CommonNames.Isize);\n    this.registerWrapperClass(Type.u8, CommonNames.U8);\n    this.registerWrapperClass(Type.u16, CommonNames.U16);\n    this.registerWrapperClass(Type.u32, CommonNames.U32);\n    this.registerWrapperClass(Type.u64, CommonNames.U64);\n    this.registerWrapperClass(options.usizeType, CommonNames.Usize);\n    this.registerWrapperClass(Type.bool, CommonNames.Bool);\n    this.registerWrapperClass(Type.f32, CommonNames.F32);\n    this.registerWrapperClass(Type.f64, CommonNames.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonNames.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.externref, CommonNames.Externref);\n\n    // resolve prototypes of extended classes or interfaces\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent);\n      if (!baseElement) continue;\n      if (thisPrototype.kind == ElementKind.CLASS_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n          let basePrototype = <ClassPrototype>baseElement;\n          if (basePrototype.hasDecorator(DecoratorFlags.FINAL)) {\n            this.error(\n              DiagnosticCode.Class_0_is_final_and_cannot_be_extended,\n              extendsNode.range, basePrototype.identifierNode.text\n            );\n          }\n          if (\n            basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n            thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n          ) {\n            this.error(\n              DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n              Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n            );\n          }\n          thisPrototype.basePrototype = basePrototype;\n        } else {\n          this.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            extendsNode.range\n          );\n        }\n      } else if (thisPrototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n        if (baseElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          thisPrototype.basePrototype = <InterfacePrototype>baseElement;\n        } else {\n          this.error(\n            DiagnosticCode.An_interface_can_only_extend_an_interface,\n            extendsNode.range\n          );\n        }\n      }\n    }\n\n    // resolve prototypes of implemented interfaces\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let implementsNodes = assert(thisPrototype.implementsNodes); // must be present if in queuedImplements\n      for (let j = 0, l = implementsNodes.length; j < l; ++j) {\n        let implementsNode = implementsNodes[j];\n        let interfaceElement = resolver.resolveTypeName(implementsNode.name, thisPrototype.parent);\n        if (!interfaceElement) continue;\n        if (interfaceElement.kind == ElementKind.INTERFACE_PROTOTYPE) {\n          let interfacePrototype = <InterfacePrototype>interfaceElement;\n          let interfacePrototypes = thisPrototype.interfacePrototypes;\n          if (!interfacePrototypes) thisPrototype.interfacePrototypes = interfacePrototypes = new Array();\n          interfacePrototypes.push(interfacePrototype);\n        } else {\n          this.error(\n            DiagnosticCode.A_class_can_only_implement_an_interface,\n            implementsNode.range\n          );\n        }\n      }\n    }\n\n    // check for virtual overloads in extended classes and implemented interfaces\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let basePrototype = thisPrototype.basePrototype;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n    }\n    for (let i = 0, k = queuedImplements.length; i < k; ++i) {\n      let thisPrototype = queuedImplements[i];\n      let basePrototype = thisPrototype.basePrototype;\n      let interfacePrototypes = thisPrototype.interfacePrototypes;\n      if (basePrototype) {\n        this.markVirtuals(thisPrototype, basePrototype);\n      }\n      if (interfacePrototypes) {\n        for (let j = 0, l = interfacePrototypes.length; j < l; ++j) {\n          this.markVirtuals(thisPrototype, interfacePrototypes[j]);\n        }\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (!globalAliases) globalAliases = new Map();\n      let isWasi = this.isWasi;\n      if (!globalAliases.has(CommonNames.abort)) {\n        globalAliases.set(CommonNames.abort,\n          isWasi\n            ? BuiltinNames.wasiAbort\n            : BuiltinNames.abort\n        );\n      }\n      if (!globalAliases.has(CommonNames.trace)) {\n        globalAliases.set(CommonNames.trace,\n          isWasi\n            ? BuiltinNames.wasiTrace\n            : BuiltinNames.trace\n        );\n      }\n      if (!globalAliases.has(CommonNames.seed)) {\n        globalAliases.set(CommonNames.seed,\n          isWasi\n            ? BuiltinNames.wasiSeed\n            : BuiltinNames.seed\n        );\n      }\n      if (!globalAliases.has(CommonNames.Math)) {\n        globalAliases.set(CommonNames.Math, CommonNames.NativeMath);\n      }\n      if (!globalAliases.has(CommonNames.Mathf)) {\n        globalAliases.set(CommonNames.Mathf, CommonNames.NativeMathf);\n      }\n      // TODO: for (let [alias, name] of globalAliases) {\n      for (let _keys = Map_keys(globalAliases), i = 0, k = _keys.length; i < k; ++i) {\n        let alias = unchecked(_keys[i]);\n        let name = changetype<string>(globalAliases.get(alias));\n        assert(name != null);\n        if (!name.length) {\n          this.elementsByName.delete(alias);\n          continue;\n        }\n        let firstChar = name.charCodeAt(0);\n        if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n          this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n        } else {\n          let elementsByName = this.elementsByName;\n          if (elementsByName.has(name)) {\n            elementsByName.set(alias, assert(elementsByName.get(name)));\n          } else {\n            throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    // TODO: for (let file of this.filesByName.values()) {\n    for (let _values = Map_values(this.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.markModuleExports(file);\n      }\n    }\n  }\n\n  /** Marks virtual members in a base class overloaded in this class. */\n  private markVirtuals(thisPrototype: ClassPrototype, basePrototype: ClassPrototype): void {\n    // TODO: make this work with interfaaces as well\n    var thisInstanceMembers = thisPrototype.instanceMembers;\n    if (thisInstanceMembers) {\n      do {\n        let baseInstanceMembers = basePrototype.instanceMembers;\n        if (baseInstanceMembers) {\n          for (let _values = Map_values(thisInstanceMembers), j = 0, l = _values.length; j < l; ++j) {\n            let thisMember = _values[j];\n            if (\n              !thisMember.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.PRIVATE) &&\n              baseInstanceMembers.has(thisMember.name)\n            ) {\n              let baseMember = assert(baseInstanceMembers.get(thisMember.name));\n              if (\n                thisMember.kind == ElementKind.FUNCTION_PROTOTYPE &&\n                baseMember.kind == ElementKind.FUNCTION_PROTOTYPE\n              ) {\n                let thisMethod = <FunctionPrototype>thisMember;\n                let baseMethod = <FunctionPrototype>baseMember;\n                if (!thisMethod.visibilityEquals(baseMethod)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisMethod.identifierNode.range, baseMethod.identifierNode.range\n                  );\n                }\n                baseMember.set(CommonFlags.VIRTUAL);\n                let overloads = baseMethod.overloads;\n                if (!overloads) baseMethod.overloads = overloads = new Set();\n                overloads.add(<FunctionPrototype>thisMember);\n                let baseMethodInstances = baseMethod.instances;\n                if (baseMethodInstances) {\n                  for (let _values = Map_values(baseMethodInstances), a = 0, b = _values.length; a < b; ++a) {\n                    let baseMethodInstance = _values[a];\n                    baseMethodInstance.set(CommonFlags.VIRTUAL);\n                  }\n                }\n              } else if (\n                thisMember.kind == ElementKind.PROPERTY_PROTOTYPE &&\n                baseMember.kind == ElementKind.PROPERTY_PROTOTYPE\n              ) {\n                let thisProperty = <PropertyPrototype>thisMember;\n                let baseProperty = <PropertyPrototype>baseMember;\n                if (!thisProperty.visibilityEquals(baseProperty)) {\n                  this.errorRelated(\n                    DiagnosticCode.Overload_signatures_must_all_be_public_private_or_protected,\n                    thisProperty.identifierNode.range, baseProperty.identifierNode.range\n                  );\n                }\n                baseProperty.set(CommonFlags.VIRTUAL);\n                let baseGetter = baseProperty.getterPrototype;\n                if (baseGetter) {\n                  baseGetter.set(CommonFlags.VIRTUAL);\n                  let thisGetter = thisProperty.getterPrototype;\n                  if (thisGetter) {\n                    let overloads = baseGetter.overloads;\n                    if (!overloads) baseGetter.overloads = overloads = new Set();\n                    overloads.add(thisGetter);\n                  }\n                  let baseGetterInstances = baseGetter.instances;\n                  if (baseGetterInstances) {\n                    for (let _values = Map_values(baseGetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseGetterInstance = _values[a];\n                      baseGetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n                let baseSetter = baseProperty.setterPrototype;\n                if (baseSetter !== null && thisProperty.setterPrototype !== null) {\n                  baseSetter.set(CommonFlags.VIRTUAL);\n                  let thisSetter = thisProperty.setterPrototype;\n                  if (thisSetter) {\n                    let overloads = baseSetter.overloads;\n                    if (!overloads) baseSetter.overloads = overloads = new Set();\n                    overloads.add(thisSetter);\n                  }\n                  let baseSetterInstances = baseSetter.instances;\n                  if (baseSetterInstances) {\n                    for (let _values = Map_values(baseSetterInstances), a = 0, b = _values.length; a < b; ++a) {\n                      let baseSetterInstance = _values[a];\n                      baseSetterInstance.set(CommonFlags.VIRTUAL);\n                    }\n                  }\n                }\n              } else {\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  thisMember.identifierNode.range,\n                  baseMember.identifierNode.range\n                );\n              }\n            }\n          }\n        }\n        let nextPrototype = basePrototype.basePrototype;\n        if (!nextPrototype) break;\n        basePrototype = nextPrototype;\n      } while (true);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"Missing standard library component: \" + name);\n    if (element.kind != kind) throw Error(\"Invalid standard library component: \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"Invalid standard library class: \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = <FunctionPrototype>this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(prototype, typeArguments);\n    if (!resolved) throw new Error(\"Invalid standard library function: \" + name);\n    return resolved;\n  }\n\n  /** Marks all exports of the specified file as module exports. */\n  private markModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), j = 0, l = _values.length; j < l; ++j) {\n        let element = unchecked(_values[j]);\n        this.markModuleExport(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.markModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) {\n          // TODO: for (let member of instanceMembers.values()) {\n          for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n            let member = unchecked(_values[i]);\n            this.markModuleExport(member);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>element;\n        let getterPrototype = propertyPrototype.getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = propertyPrototype.setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    var staticMembers = element.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.markModuleExport(member);\n      }\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the wrapper class of a non-class type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.isInternalReference && !wrapperClasses.has(type));\n    var element = assert(this.lookupGlobal(className));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = assert(this.resolver.resolveClass(<ClassPrototype>element, null));\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  registerConstantInteger(name: string, type: Type, value: i64): void {\n    assert(type.isIntegerInclReference);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.isFloatValue);\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = assert(elementsByName.get(name));\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return assert(elements.get(name));\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n      ? assert(filesByName.get(foreignPath))\n      : filesByName.has(foreignPathAlt)\n        ? assert(filesByName.get(foreignPathAlt))\n        : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = assert(queuedExports.get(foreignFile));\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = assert(fileQueuedExports.get(foreignName));\n          let queuedExportForeignPath = queuedExport.foreignPath;\n          if (queuedExportForeignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExportForeignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.FINAL |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember classes that implement interfaces\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        // cannot implement interfaces when unmanaged\n        if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        } else {\n          queuedImplements.push(element);\n        }\n      }\n    }\n\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            let method = this.initializeMethod(methodDeclaration, element);\n            if (method !== null && methodDeclaration.name.kind == NodeKind.CONSTRUCTOR) {\n              element.constructorPrototype = method;\n            }\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATURE: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return null;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return null;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n    return element;\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let args = decorator.args;\n            let numArgs = args ? args.length : 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.args)[0];\n              if (firstArg.isLiteralKind(LiteralKind.STRING)) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString()\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers !== null && parentMembers.has(name)) {\n        let element = assert(parentMembers.get(name));\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = assert(queuedExportsStar.get(parent));\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = statement.internalPath!; // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = assert(queuedExports.get(localFile));\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent, queuedExtends);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = assert(exports.get(\"default\"));\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else {\n      let namespaceName = statement.namespaceName;\n      if (namespaceName) { // import * as foo from \"./bar\"\n        queuedImports.push(new QueuedImport(\n          parent,\n          namespaceName,\n          null, // indicates import *\n          statement.internalPath,\n          statement.internalPath + INDEX_SUFFIX\n        ));\n      } else {\n        // import \"./foo\"\n      }\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, declaration.name /* isImport */);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n      if (declaration.range.source.isLibrary || declaration.is(CommonFlags.EXPORT)) {\n        validDecorators |= DecoratorFlags.LAZY;\n      }\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    // remember interfaces that extend another interface\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeFieldAsProperty(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          let methodDeclaration = <MethodDeclaration>memberDeclaration;\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(methodDeclaration, element);\n          } else {\n            this.initializeMethod(methodDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of an interface, as a property. */\n  private initializeFieldAsProperty(\n    /** Field declaration. */\n    declaration: FieldDeclaration,\n    /** Parent interface. */\n    parent: InterfacePrototype\n  ): void {\n    var typeNode = declaration.type;\n    if (!typeNode) typeNode = Node.createOmittedType(declaration.name.range.atEnd);\n    this.initializeProperty(\n      Node.createMethodDeclaration(\n        declaration.name,\n        declaration.decorators,\n        declaration.flags | CommonFlags.GET,\n        null,\n        Node.createFunctionType(\n          [],\n          typeNode,\n          null,\n          false,\n          declaration.range\n        ),\n        null,\n        declaration.range\n      ),\n      parent\n    );\n    if (!declaration.is(CommonFlags.READONLY)) {\n      this.initializeProperty(\n        Node.createMethodDeclaration(\n          declaration.name,\n          declaration.decorators,\n          declaration.flags | CommonFlags.SET,\n          null,\n          Node.createFunctionType(\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                declaration.name,\n                typeNode,\n                null,\n                declaration.name.range\n              )\n            ],\n            Node.createOmittedType(declaration.name.range.atEnd),\n            null,\n            false,\n            declaration.range\n          ),\n          null,\n          declaration.range\n        ),\n        parent\n      );\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): DeclaredElement | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original, queuedExtends);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n\n  /** Finds all cyclic classes. */\n  findCyclicClasses(): Set<Class> {\n    var cyclics = new Set<Class>();\n    // TODO: for (let instance of this.managedClasses.values()) {\n    for (let _values = Map_values(this.managedClasses), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      if (!instance.isAcyclic) cyclics.add(instance);\n    }\n    return cyclics;\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a final class. */\n  FINAL = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.FINAL: return DecoratorFlags.FINAL;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent!: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do {\n      current = current.parent;\n      if (current.kind == ElementKind.FILE) return <File>current;\n    } while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members !== null && members.has(name)) return assert(members.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = assert(members.get(name));\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          let reportedIdentifier = localIdentifierIfImport\n            ? localIdentifierIfImport\n            : element.identifierNode;\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range,\n              (<DeclaredElement>existing).identifierNode.range,\n              reportedIdentifier.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportedIdentifier.range, reportedIdentifier.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Checks if this element is public, explicitly or implicitly. */\n  get isPublic(): bool {\n    return !this.isAny(CommonFlags.PRIVATE | CommonFlags.PROTECTED);\n  }\n\n  /** Checks if this element is implicitly public, i.e. not explicitly declared to be. */\n  get isImplicitlyPublic(): bool {\n    return this.isPublic && !this.is(CommonFlags.PUBLIC);\n  }\n\n  /** Checks if the visibility of this element equals the specified. */\n  visibilityEquals(other: Element): bool {\n    if (this.isPublic == other.isPublic) return true;\n    const vis = CommonFlags.PRIVATE | CommonFlags.PROTECTED;\n    return (this.flags & vis) == (other.flags & vis);\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return this.internalName + \", kind=\" + this.kind.toString();\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the signature node, if applicable, along the identifier node. */\n  get identifierAndSignatureRange(): Range {\n    var declaration = this.declaration;\n    var identifierNode = declaration.name;\n    if (declaration.kind == NodeKind.FUNCTIONDECLARATION || declaration.kind == NodeKind.METHODDECLARATION) {\n      let signatureNode = (<FunctionDeclaration>declaration).signature;\n      return Range.join(identifierNode.range, signatureNode.range);\n    }\n    return identifierNode.range;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n\n  /** Checks if this element is a compatible override of the specified. */\n  isCompatibleOverride(base: DeclaredElement): bool {\n    var self: DeclaredElement = this; // TS\n    var kind = self.kind;\n    if (kind == base.kind) {\n      switch (kind) {\n        case ElementKind.FUNCTION: {\n          return (<Function>self).signature.isAssignableTo((<Function>base).signature, /* sameSize */ true);\n        }\n        case ElementKind.PROPERTY: {\n          let selfProperty = <Property>self;\n          let baseProperty = <Property>base;\n          let selfGetter = selfProperty.getterInstance;\n          let baseGetter = baseProperty.getterInstance;\n          if (selfGetter) {\n            if (!baseGetter || !selfGetter.signature.isAssignableTo(baseGetter.signature, true)) {\n              return false;\n            }\n          } else if (baseGetter) {\n            return false;\n          }\n          let selfSetter = selfProperty.setterInstance;\n          let baseSetter = baseProperty.setterInstance;\n          if (selfSetter) {\n            if (!baseSetter || !selfSetter.signature.isAssignableTo(baseSetter.signature, true)) {\n              return false;\n            }\n          } else if (baseSetter) {\n            return false;\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction!: Function;\n  /** Array of `import * as X` alias namespaces of this file. */\n  aliasNamespaces: Array<Namespace> = new Array<Namespace>();\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, localIdentifierIfImport: IdentifierExpression | null = null): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element, localIdentifierIfImport)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !localIdentifierIfImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n\n    // Also, add to the namespaces that capture our exports\n    for(let i = 0; i < this.aliasNamespaces.length; i++) {\n      let ns = this.aliasNamespaces[i];\n      ns.add(name, element);\n    }\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports !== null && exports.has(name)) return assert(exports.get(name));\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asAliasNamespace(\n    name: string, \n    parent: Element, \n    localIdentifier: IdentifierExpression\n  ): Namespace {\n    var declaration = this.program.makeNativeNamespaceDeclaration(name);\n    declaration.name = localIdentifier;\n    var ns = new Namespace(name, parent, declaration);\n    ns.set(CommonFlags.SCOPED);\n    this.copyExportsToNamespace(ns);\n    // NOTE: Some exports are still queued, and can't yet be added here,\n    // so we remember all the alias namespaces and add to them as well\n    // when adding an element to the file.\n    this.aliasNamespaces.push(ns);\n    return ns;\n  }\n\n  /** Recursively copies the exports of this file to the specified namespace. */\n  private copyExportsToNamespace(ns: Namespace): void {\n    var exports = this.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        ns.add(memberName, member);\n      }\n    }\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        exportsStar[i].copyExportsToNamespace(ns);\n      }\n    }\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var inSelf = this.lookupInSelf(name);\n    if (inSelf) return inSelf;\n    return this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: i64 = i64_zero;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64 = 0;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: i64, type: Type): void {\n    assert(type.isIntegerInclReference);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.isFloatValue);\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).initializer;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Original name of the (temporary) local. */\n  private originalName: string;\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.originalName = name;\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n\n  /** Sets the temporary name of this local. */\n  setTemporaryName(name: string): void {\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n\n  /** Resets the temporary name of this local. */\n  resetTemporaryName(): void {\n    var name = this.originalName;\n    this.name = name;\n    this.internalName = mangleInternalName(name, this.parent, false);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n  /** Methods overloading this one, if any. These are unbound. */\n  overloads: Set<FunctionPrototype> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS ||\n           parent.kind == ElementKind.PROPERTY_PROTOTYPE && (\n             parent.parent.kind == ElementKind.CLASS ||\n             parent.parent.kind == ElementKind.INTERFACE\n           );\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var declaration = this.declaration;\n    assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    bound.overloads = this.overloads;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return assert(instances.get(instanceKey));\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Concrete type arguments. */\n  typeArguments: Type[] | null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow!: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Varargs stub for calling with omitted arguments. */\n  varargsStub: Function | null = null;\n  /** Virtual stub for calling overloads. */\n  virtualStub: Function | null = null;\n  /** Runtime memory segment, if created. */\n  memorySegment: MemorySegment | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.typeArguments = typeArguments;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = signature.type;\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        let local = new Local(\n          CommonNames.this_,\n          localIndex++,\n          thisType,\n          this\n        );\n        this.localsByName.set(CommonNames.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = this.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.createParent(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Gets the name of the parameter at the specified index. */\n  getParameterName(index: i32): string {\n    var parameters = (<FunctionDeclaration>this.declaration).signature.parameters;\n    return parameters.length > index\n      ? parameters[index].name.text\n      : getDefaultParameterName(index);\n  }\n\n  /** Creates a stub for use with this function, i.e. for varargs or virtual calls. */\n  newStub(postfix: string): Function {\n    var stub = new Function(\n      this.name + STUB_DELIMITER + postfix,\n      this.prototype,\n      this.typeArguments,\n      this.signature.clone(),\n      this.contextualTypeArguments\n    );\n    stub.set(this.flags & ~CommonFlags.COMPILED | CommonFlags.STUB);\n    return stub;\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    if (!declaration) declaration = this.program.makeNativeVariableDeclaration(localName);\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return assert(locals.get(name));\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempExternrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    var breakStack = this.breakStack;\n    assert(!breakStack || !breakStack.length); // internal error\n    this.breakStack = breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let range = debugLocations[i];\n        let source = range.source;\n        module.setDebugLocation(\n          ref,\n          range.debugInfoRef,\n          source.debugInfoIndex,\n          source.lineAt(range.start),\n          source.columnAt() - 1 // source maps are 0-based\n        );\n      }\n    }\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n  /** Getter function reference, if compiled. */\n  getterRef: FunctionRef = 0;\n  /** Setter function reference, if compiled. */\n  setterRef: FunctionRef = 0;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Gets the internal name of the respective getter function. */\n  get internalGetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + GETTER_PREFIX + this.name;\n  }\n\n  /** Gets the internal name of the respective setter function. */\n  get internalSetterName(): string {\n    return this.parent.internalName + INSTANCE_DELIMITER + SETTER_PREFIX + this.name;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n  /** Property instance, if resolved. */\n  instance: Property | null = null;\n\n  /** Clones of this prototype that are bound to specific classes. */\n  private boundPrototypes: Map<Class,PropertyPrototype> | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element. Either a class prototype or instance. */\n    parent: Element,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    switch (this.parent.kind) {\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: return true;\n    }\n    return false;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): PropertyPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return assert(boundPrototypes.get(classInstance));\n    var firstDeclaration = this.declaration;\n    assert(firstDeclaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new PropertyPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>firstDeclaration\n    );\n    bound.flags = this.flags;\n    var getterPrototype = this.getterPrototype;\n    if (getterPrototype) {\n      bound.getterPrototype = getterPrototype.toBound(classInstance);\n    }\n    var setterPrototype = this.setterPrototype;\n    if (setterPrototype) {\n      bound.setterPrototype = setterPrototype.toBound(classInstance);\n    }\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      Node.createVariableDeclaration(\n        prototype.identifierNode,\n        null,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE,\n        null, null,\n        prototype.identifierNode.range\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    if (this.is(CommonFlags.INSTANCE)) {\n      registerConcreteElement(this.program, this);\n    }\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved index signature. */\nexport class IndexSignature extends TypedElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(\n      ElementKind.INDEXSIGNATURE,\n      \"[]\",\n      parent.internalName + \"[]\",\n      parent.program,\n      parent,\n      parent.program.makeNativeVariableDeclaration(\"[]\") // is fine\n    );\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,DeclaredElement> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null;\n  /** Interface prototypes, if applicable. */\n  interfacePrototypes: InterfacePrototype[] | null = null;\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n  /** Classes extending this class. */\n  extendees: Set<ClassPrototype> = new Set();\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    var seen = new Set<ClassPrototype>();\n    do {\n      // cannot directly or indirectly extend itself\n      if (seen.has(current)) break;\n      seen.add(current);\n      if (current === basePtototype) return true;\n      current = current.basePrototype;\n    } while (current);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = assert(instanceMembers.get(name));\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances !== null && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null = null;\n  /** Implemented interfaces, if applicable. */\n  interfaces: Set<Interface> | null = null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  nextMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n  /** Classes directly extending this class. */\n  extendees: Set<Class> | null = null;\n  /** Classes implementing this interface. */\n  implementers: Set<Class> | null = null;\n  /** Whether the field initialization check has already been performed. */\n  didCheckFieldInitialization: bool = false;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY_PROTOTYPE &&\n        (<PropertyPrototype>lengthField).getterPrototype !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    type.classReference = this;\n    this.setType(type);\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters !== null && typeParameters.length > 0) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Sets the base class. */\n  setBase(base: Class): void {\n    assert(!this.base);\n    this.base = base;\n    var extendees = base.extendees;\n    if (!extendees) base.extendees = extendees = new Set();\n    extendees.add(this);\n\n    // Inherit contextual type arguments from base class\n    var inheritedTypeArguments = base.contextualTypeArguments;\n    if (inheritedTypeArguments) {\n      let contextualTypeArguments = this.contextualTypeArguments;\n      // TODO: for (let [baseName, baseType] of inheritedTypeArguments) {\n      for (let _keys = Map_keys(inheritedTypeArguments), i = 0, k = _keys.length; i < k; ++i) {\n        let baseName = unchecked(_keys[i]);\n        let baseType = assert(inheritedTypeArguments.get(baseName));\n        if (!contextualTypeArguments) {\n          this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        } else if (!contextualTypeArguments.has(baseName)) {\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n  }\n\n  /** Adds an interface. */\n  addInterface(iface: Interface): void {\n    var interfaces = this.interfaces;\n    if (!interfaces) this.interfaces = interfaces = new Set();\n    interfaces.add(iface);\n    var implementers = iface.implementers;\n    if (!implementers) iface.implementers = implementers = new Set();\n    implementers.add(this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do {\n      if (current == target) return true;\n      if (target.kind == ElementKind.INTERFACE) {\n        let interfaces = current.interfaces;\n        if (interfaces) {\n          for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n            let iface = _values[i];\n            if (iface.isAssignableTo(target)) return true;\n          }\n        }\n      }\n      current = current.base;\n    } while (current);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n      instance = instance.base;\n    } while (instance);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Creates a buffer suitable to hold a runtime instance of this class. */\n  createBuffer(overhead: i32 = 0): Uint8Array {\n    var size = this.nextMemoryOffset + overhead;\n    var buffer = new Uint8Array(this.program.runtimeHeaderSize + size);\n    assert(!this.program.options.isWasm64); // TODO: WASM64, mmInfo is usize\n    // see: std/assembly/rt/common.ts\n    assert(size < (1 << 28));     // 1 bit BUFFERED + 3 bits color\n    writeI32(size, buffer, 0);    // mmInfo = 0\n    writeI32(1, buffer, 4);       // gcInfo (RC) = 1\n    writeI32(this.id, buffer, 8); // rtId\n    writeI32(size, buffer, 12);   // rtSize\n    return buffer;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32 = this.program.runtimeHeaderSize): i32 {\n    var element = this.lookupInSelf(name);\n    if (element !== null && element.kind == ElementKind.FIELD) {\n      let fieldInstance = <Field>element;\n      let offset = baseOffset + fieldInstance.memoryOffset;\n      let typeKind = fieldInstance.type.kind;\n      switch (typeKind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          assert(!i64_is(value));\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          assert(!i64_is(value));\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          assert(!i64_is(value));\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          if (this.program.options.isWasm64) {\n            if (i64_is(value)) {\n              writeI64(value, buffer, offset);\n            } else {\n              writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.USIZE);\n            }\n            return 8;\n          } else {\n            if (i64_is(value)) {\n              writeI64AsI32(value, buffer, offset, typeKind == TypeKind.USIZE);\n            } else {\n              writeI32(i32(value), buffer, offset);\n            }\n            return 4;\n          }\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          if (i64_is(value)) {\n            writeI64(value, buffer, offset);\n          } else {\n            writeI32AsI64(i32(value), buffer, offset, typeKind == TypeKind.U64);\n          }\n          return 8;\n        }\n        case TypeKind.F32: {\n          assert(!i64_is(value));\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          assert(!i64_is(value));\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do {\n      if (current.prototype === extendedPrototype) return current.typeArguments;\n      current = current.base;\n    } while (current);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var arrayPrototype = program.arrayPrototype;\n    if (this.extends(arrayPrototype)) {\n      return this.getTypeArgumentsTo(arrayPrototype)![0];\n    }\n    var staticArrayPrototype = program.staticArrayPrototype;\n    if (this.extends(staticArrayPrototype)) {\n      return this.getTypeArgumentsTo(staticArrayPrototype)![0];\n    }\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    var prototype = current.prototype;\n    switch (prototype.name.charCodeAt(0)) {\n      case CharCode.F: {\n        if (prototype == program.float32ArrayPrototype) return Type.f32;\n        if (prototype == program.float64ArrayPrototype) return Type.f64;\n        break;\n      }\n      case CharCode.I: {\n        if (prototype == program.int8ArrayPrototype) return Type.i8;\n        if (prototype == program.int16ArrayPrototype) return Type.i16;\n        if (prototype == program.int32ArrayPrototype) return Type.i32;\n        if (prototype == program.int64ArrayPrototype) return Type.i64;\n        break;\n      }\n      case CharCode.U: {\n        if (prototype == program.uint8ArrayPrototype) return Type.u8;\n        if (prototype == program.uint8ClampedArrayPrototype) return Type.u8;\n        if (prototype == program.uint16ArrayPrototype) return Type.u16;\n        if (prototype == program.uint32ArrayPrototype) return Type.u32;\n        if (prototype == program.uint64ArrayPrototype) return Type.u64;\n        break;\n      }\n    }\n    assert(false);\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var instanceMembers = this.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind == ElementKind.FIELD) {\n          let fieldType = (<Field>member).type;\n          if (fieldType.isReference) {\n            if ((current = fieldType.getClass()) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) !== null && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n\n  /** Gets all extendees of this class (that do not have the specified instance member). */\n  getAllExtendees(exceptIfMember: string | null = null, out: Set<Class> = new Set()): Set<Class> {\n    var extendees = this.extendees;\n    if (extendees) {\n      for (let _values = Set_values(extendees), i = 0, k = _values.length; i < k; ++i) {\n        let extendee = _values[i];\n        if (exceptIfMember) {\n          let instanceMembers = extendee.prototype.instanceMembers;\n          if (instanceMembers !== null && instanceMembers.has(exceptIfMember)) continue;\n        }\n        out.add(extendee);\n        extendee.getAllExtendees(exceptIfMember, out);\n      }\n    }\n    return out;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: InterfacePrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  if (newer.members) return null;\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    // TODO: for (let [memberName, member] of srcMembers) {\n    for (let _keys = Map_keys(srcMembers), i = 0, k = _keys.length; i < k; ++i) {\n      let memberName = unchecked(_keys[i]);\n      let member = assert(srcMembers.get(memberName));\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    case ElementKind.PROPERTY_PROTOTYPE: // properties are just containers\n    case ElementKind.PROPERTY: {         //\n      parent = parent.parent;\n      // fall-through\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] = [];\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"$\" + i.toString());\n  }\n  return cachedDefaultParameterNames[index];\n}\n","/**\n * @fileoverview A thin wrapper around Binaryen's C-API.\n *\n * The AssemblyScript compiler utilizes Binaryen's C-API directly. Even\n * though it currently imports binaryen.js, none of the JS APIs it\n * provides are used.\n *\n * @license Apache-2.0\n */\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\n// The following constants must be updated by running scripts/update-constants.\n// This is necessary because the functions are not yet callable with Binaryen\n// compiled to WebAssembly, requiring awaiting the ready promise first. Note\n// that this essentially fixes the compiler to specific versions of Binaryen\n// sometimes, because these constants can differ between Binaryen versions.\n\nexport type NativeType = usize;\nexport namespace NativeType {\n  export const None: NativeType = 0 /* _BinaryenTypeNone */;\n  export const Unreachable: NativeType = 1 /* _BinaryenTypeUnreachable */;\n  export const I32: NativeType = 2 /* _BinaryenTypeInt32 */;\n  export const I64: NativeType = 3 /* _BinaryenTypeInt64 */;\n  export const F32: NativeType = 4 /* _BinaryenTypeFloat32 */;\n  export const F64: NativeType = 5 /* _BinaryenTypeFloat64 */;\n  export const V128: NativeType = 6 /* _BinaryenTypeVec128 */;\n  export const Funcref: NativeType = 7 /* _BinaryenTypeFuncref */;\n  export const Externref: NativeType = 8 /* _BinaryenTypeExternref */;\n  export const Nullref: NativeType = 9 /* _BinaryenTypeNullref */;\n  export const Exnref: NativeType = 10 /* _BinaryenTypeExnref */;\n  export const Auto: NativeType = -1 /* _BinaryenTypeAuto */;\n}\n\nexport enum FeatureFlags {\n  MVP = 0 /* _BinaryenFeatureMVP */,\n  Atomics = 1 /* _BinaryenFeatureAtomics */,\n  MutableGloabls = 2 /* _BinaryenFeatureMutableGlobals */,\n  NontrappingFPToInt = 4 /* _BinaryenFeatureNontrappingFPToInt */,\n  SIMD128 = 8 /* _BinaryenFeatureSIMD128 */,\n  BulkMemory = 16 /* _BinaryenFeatureBulkMemory */,\n  SignExt = 32 /* _BinaryenFeatureSignExt */,\n  ExceptionHandling = 64 /* _BinaryenFeatureExceptionHandling */,\n  TailCall = 128 /* _BinaryenFeatureTailCall */,\n  ReferenceTypes = 256 /* _BinaryenFeatureReferenceTypes */,\n  MultiValue = 512 /* _BinaryenFeatureMultivalue */,\n  All = 1023 /* _BinaryenFeatureAll */\n}\n\nexport enum ExpressionId {\n  Invalid = 0 /* _BinaryenInvalidId */,\n  Block = 1 /* _BinaryenBlockId */,\n  If = 2 /* _BinaryenIfId */,\n  Loop = 3 /* _BinaryenLoopId */,\n  Break = 4 /* _BinaryenBreakId */,\n  Switch = 5 /* _BinaryenSwitchId */,\n  Call = 6 /* _BinaryenCallId */,\n  CallIndirect = 7 /* _BinaryenCallIndirectId */,\n  LocalGet = 8 /* _BinaryenLocalGetId */,\n  LocalSet = 9 /* _BinaryenLocalSetId */,\n  GlobalGet = 10 /* _BinaryenGlobalGetId */,\n  GlobalSet = 11 /* _BinaryenGlobalSetId */,\n  Load = 12 /* _BinaryenLoadId */,\n  Store = 13 /* _BinaryenStoreId */,\n  Const = 14 /* _BinaryenConstId */,\n  Unary = 15 /* _BinaryenUnaryId */,\n  Binary = 16 /* _BinaryenBinaryId */,\n  Select = 17 /* _BinaryenSelectId */,\n  Drop = 18 /* _BinaryenDropId */,\n  Return = 19 /* _BinaryenReturnId */,\n  Host = 20 /* _BinaryenHostId */,\n  Nop = 21 /* _BinaryenNopId */,\n  Unreachable = 22 /* _BinaryenUnreachableId */,\n  AtomicCmpxchg = 24 /* _BinaryenAtomicCmpxchgId */,\n  AtomicRMW = 23 /* _BinaryenAtomicRMWId */,\n  AtomicWait = 25 /* _BinaryenAtomicWaitId */,\n  AtomicNotify = 26 /* _BinaryenAtomicNotifyId */,\n  AtomicFence = 27 /* _BinaryenAtomicFenceId */,\n  SIMDExtract = 28 /* _BinaryenSIMDExtractId */,\n  SIMDReplace = 29 /* _BinaryenSIMDReplaceId */,\n  SIMDShuffle = 30 /* _BinaryenSIMDShuffleId */,\n  SIMDTernary = 31 /* _BinaryenSIMDTernaryId */,\n  SIMDShift = 32 /* _BinaryenSIMDShiftId */,\n  SIMDLoad = 33 /* _BinaryenSIMDLoadId */,\n  MemoryInit = 34 /* _BinaryenMemoryInitId */,\n  DataDrop = 35 /* _BinaryenDataDropId */,\n  MemoryCopy = 36 /* _BinaryenMemoryCopyId */,\n  MemoryFill = 37 /* _BinaryenMemoryFillId */,\n  Pop = 38 /* _BinaryenPopId */,\n  RefNull = 39 /* _BinaryenRefNullId */,\n  RefIsNull = 40 /* _BinaryenRefIsNullId */,\n  RefFunc = 41 /* _BinaryenRefFuncId */,\n  Try = 42 /* _BinaryenTryId */,\n  Throw = 43 /* _BinaryenThrowId */,\n  Rethrow = 44 /* _BinaryenRethrowId */,\n  BrOnExn = 45 /* _BinaryenBrOnExnId */,\n  TupleMake = 46 /* _BinaryenTupleMakeId */,\n  TupleExtract = 47 /* _BinaryenTupleExtractId */\n}\n\nexport enum UnaryOp {\n  ClzI32 = 0 /* _BinaryenClzInt32 */,\n  ClzI64 = 1 /* _BinaryenClzInt64 */,\n  CtzI32 = 2 /* _BinaryenCtzInt32 */,\n  CtzI64 = 3 /* _BinaryenCtzInt64 */,\n  PopcntI32 = 4 /* _BinaryenPopcntInt32 */,\n  PopcntI64 = 5 /* _BinaryenPopcntInt64 */,\n  NegF32 = 6 /* _BinaryenNegFloat32 */,\n  NegF64 = 7 /* _BinaryenNegFloat64 */,\n  AbsF32 = 8 /* _BinaryenAbsFloat32 */,\n  AbsF64 = 9 /* _BinaryenAbsFloat64 */,\n  CeilF32 = 10 /* _BinaryenCeilFloat32 */,\n  CeilF64 = 11 /* _BinaryenCeilFloat64 */,\n  FloorF32 = 12 /* _BinaryenFloorFloat32 */,\n  FloorF64 = 13 /* _BinaryenFloorFloat64 */,\n  TruncF32 = 14 /* _BinaryenTruncFloat32 */,\n  TruncF64 = 15 /* _BinaryenTruncFloat64 */,\n  NearestF32 = 16 /* _BinaryenNearestFloat32 */,\n  NearestF64 = 17 /* _BinaryenNearestFloat64 */,\n  SqrtF32 = 18 /* _BinaryenSqrtFloat32 */,\n  SqrtF64 = 19 /* _BinaryenSqrtFloat64 */,\n  EqzI32 = 20 /* _BinaryenEqZInt32 */,\n  EqzI64 = 21 /* _BinaryenEqZInt64 */,\n  ExtendI32 = 22 /* _BinaryenExtendSInt32 */,\n  ExtendU32 = 23 /* _BinaryenExtendUInt32 */,\n  WrapI64 = 24 /* _BinaryenWrapInt64 */,\n  TruncF32ToI32 = 25 /* _BinaryenTruncSFloat32ToInt32 */,\n  TruncF32ToI64 = 26 /* _BinaryenTruncSFloat32ToInt64 */,\n  TruncF32ToU32 = 27 /* _BinaryenTruncUFloat32ToInt32 */,\n  TruncF32ToU64 = 28 /* _BinaryenTruncUFloat32ToInt64 */,\n  TruncF64ToI32 = 29 /* _BinaryenTruncSFloat64ToInt32 */,\n  TruncF64ToI64 = 30 /* _BinaryenTruncSFloat64ToInt64 */,\n  TruncF64ToU32 = 31 /* _BinaryenTruncUFloat64ToInt32 */,\n  TruncF64ToU64 = 32 /* _BinaryenTruncUFloat64ToInt64 */,\n  ReinterpretF32 = 33 /* _BinaryenReinterpretFloat32 */,\n  ReinterpretF64 = 34 /* _BinaryenReinterpretFloat64 */,\n  ConvertI32ToF32 = 35 /* _BinaryenConvertSInt32ToFloat32 */,\n  ConvertI32ToF64 = 36 /* _BinaryenConvertSInt32ToFloat64 */,\n  ConvertU32ToF32 = 37 /* _BinaryenConvertUInt32ToFloat32 */,\n  ConvertU32ToF64 = 38 /* _BinaryenConvertUInt32ToFloat64 */,\n  ConvertI64ToF32 = 39 /* _BinaryenConvertSInt64ToFloat32 */,\n  ConvertI64ToF64 = 40 /* _BinaryenConvertSInt64ToFloat64 */,\n  ConvertU64ToF32 = 41 /* _BinaryenConvertUInt64ToFloat32 */,\n  ConvertU64ToF64 = 42 /* _BinaryenConvertUInt64ToFloat64 */,\n  PromoteF32 = 43 /* _BinaryenPromoteFloat32 */,\n  DemoteF64 = 44 /* _BinaryenDemoteFloat64 */,\n  ReinterpretI32 = 45 /* _BinaryenReinterpretInt32 */,\n  ReinterpretI64 = 46 /* _BinaryenReinterpretInt64 */,\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = 47 /* _BinaryenExtendS8Int32 */,\n  ExtendI16ToI32 = 48 /* _BinaryenExtendS16Int32 */,\n  ExtendI8ToI64 = 49 /* _BinaryenExtendS8Int64 */,\n  ExtendI16ToI64 = 50 /* _BinaryenExtendS16Int64 */,\n  ExtendI32ToI64 = 51 /* _BinaryenExtendS32Int64 */,\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = 52 /* _BinaryenTruncSatSFloat32ToInt32 */,\n  TruncF32ToU32Sat = 53 /* _BinaryenTruncSatUFloat32ToInt32 */,\n  TruncF64ToI32Sat = 54 /* _BinaryenTruncSatSFloat64ToInt32 */,\n  TruncF64ToU32Sat = 55 /* _BinaryenTruncSatUFloat64ToInt32 */,\n  TruncF32ToI64Sat = 56 /* _BinaryenTruncSatSFloat32ToInt64 */,\n  TruncF32ToU64Sat = 57 /* _BinaryenTruncSatUFloat32ToInt64 */,\n  TruncF64ToI64Sat = 58 /* _BinaryenTruncSatSFloat64ToInt64 */,\n  TruncF64ToU64Sat = 59 /* _BinaryenTruncSatUFloat64ToInt64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = 60 /* _BinaryenSplatVecI8x16 */,\n  SplatI16x8 = 61 /* _BinaryenSplatVecI16x8 */,\n  SplatI32x4 = 62 /* _BinaryenSplatVecI32x4 */,\n  SplatI64x2 = 63 /* _BinaryenSplatVecI64x2 */,\n  SplatF32x4 = 64 /* _BinaryenSplatVecF32x4 */,\n  SplatF64x2 = 65 /* _BinaryenSplatVecF64x2 */,\n  NotV128 = 66 /* _BinaryenNotVec128 */,\n  AbsI8x16 = 67 /* __BinaryenAbsVecI8x16 */,\n  NegI8x16 = 68 /* _BinaryenNegVecI8x16 */,\n  AnyTrueI8x16 = 69 /* _BinaryenAnyTrueVecI8x16 */,\n  AllTrueI8x16 = 70 /* _BinaryenAllTrueVecI8x16 */,\n  BitmaskI8x16 = 71 /* __BinaryenBitmaskVecI8x16 */,\n  AbsI16x8 = 72 /* __BinaryenAbsVecI16x8 */,\n  NegI16x8 = 73 /* _BinaryenNegVecI16x8 */,\n  AnyTrueI16x8 = 74 /* _BinaryenAnyTrueVecI16x8 */,\n  AllTrueI16x8 = 75 /* _BinaryenAllTrueVecI16x8 */,\n  BitmaskI16x8 = 76 /* _BinaryenBitmaskVecI16x8 */,\n  AbsI32x4 = 77 /* _BinaryenAbsVecI32x4 */,\n  NegI32x4 = 78 /* _BinaryenNegVecI32x4 */,\n  AnyTrueI32x4 = 79 /* _BinaryenAnyTrueVecI32x4 */,\n  AllTrueI32x4 = 80 /* _BinaryenAllTrueVecI32x4 */,\n  BitmaskI32x4 = 81 /* _BinaryenBitmaskVecI32x4 */,\n  NegI64x2 = 82 /* _BinaryenNegVecI64x2 */,\n  AnyTrueI64x2 = 83 /* _BinaryenAnyTrueVecI64x2 */,\n  AllTrueI64x2 = 84 /* _BinaryenAllTrueVecI64x2 */,\n  AbsF32x4 = 85 /* _BinaryenAbsVecF32x4 */,\n  NegF32x4 = 86 /* _BinaryenNegVecF32x4 */,\n  SqrtF32x4 = 87 /* _BinaryenSqrtVecF32x4 */,\n  CeilF32x4 = 88 /* _BinaryenCeilVecF32x4 */,\n  FloorF32x4 = 89 /* _BinaryenFloorVecF32x4 */,\n  TruncF32x4 = 90 /* BinaryenTruncVecF32x4 */,\n  NearestF32x4 = 91 /* BinaryenNearestVecF32x4 */,\n  AbsF64x2 = 92 /* _BinaryenAbsVecF64x2 */,\n  NegF64x2 = 93 /* _BinaryenNegVecF64x2 */,\n  SqrtF64x2 = 94 /* _BinaryenSqrtVecF64x2 */,\n  CeilF64x2 = 95 /* _BinaryenCeilVecF64x2 */,\n  FloorF64x2 = 96 /* _BinaryenFloorVecF64x2 */,\n  TruncF64x2 = 97 /* BinaryenTruncVecF64x2 */,\n  NearestF64x2 = 98 /* BinaryenNearestVecF64x2 */,\n  TruncSatF32x4ToI32x4 = 99 /* _BinaryenTruncSatSVecF32x4ToVecI32x4 */,\n  TruncSatF32x4ToU32x4 = 100 /* _BinaryenTruncSatUVecF32x4ToVecI32x4 */,\n  TruncSatF64x2ToI64x2 = 101 /* _BinaryenTruncSatSVecF64x2ToVecI64x2 */,\n  TruncSatF64x2ToU64x2 = 102 /* _BinaryenTruncSatUVecF64x2ToVecI64x2 */,\n  ConvertI32x4ToF32x4 = 103 /* _BinaryenConvertSVecI32x4ToVecF32x4 */,\n  ConvertU32x4ToF32x4 = 104 /* _BinaryenConvertUVecI32x4ToVecF32x4 */,\n  ConvertI64x2ToF64x2 = 105 /* _BinaryenConvertSVecI64x2ToVecF64x2 */,\n  ConvertU64x2ToF64x2 = 106 /* _BinaryenConvertUVecI64x2ToVecF64x2 */,\n  WidenLowI8x16ToI16x8 = 107 /* _BinaryenWidenLowSVecI8x16ToVecI16x8 */,\n  WidenHighI8x16ToI16x8 = 108 /* _BinaryenWidenHighSVecI8x16ToVecI16x8 */,\n  WidenLowU8x16ToU16x8 = 109 /* _BinaryenWidenLowUVecI8x16ToVecI16x8 */,\n  WidenHighU8x16ToU16x8 = 110 /* _BinaryenWidenHighUVecI8x16ToVecI16x8 */,\n  WidenLowI16x8ToI32x4 = 111 /* _BinaryenWidenLowSVecI16x8ToVecI32x4 */,\n  WidenHighI16x8ToI32x4 = 112 /* _BinaryenWidenHighSVecI16x8ToVecI32x4 */,\n  WidenLowU16x8ToU32x4 = 113 /* _BinaryenWidenLowUVecI16x8ToVecI32x4 */,\n  WidenHighU16x8ToU32x4 = 114 /* _BinaryenWidenHighUVecI16x8ToVecI32x4 */\n}\n\nexport enum BinaryOp {\n  AddI32 = 0 /* _BinaryenAddInt32 */,\n  SubI32 = 1 /* _BinaryenSubInt32 */,\n  MulI32 = 2 /* _BinaryenMulInt32 */,\n  DivI32 = 3 /* _BinaryenDivSInt32 */,\n  DivU32 = 4 /* _BinaryenDivUInt32 */,\n  RemI32 = 5 /* _BinaryenRemSInt32 */,\n  RemU32 = 6 /* _BinaryenRemUInt32 */,\n  AndI32 = 7 /* _BinaryenAndInt32 */,\n  OrI32 = 8 /* _BinaryenOrInt32 */,\n  XorI32 = 9 /* _BinaryenXorInt32 */,\n  ShlI32 = 10 /* _BinaryenShlInt32 */,\n  ShrU32 = 11 /* _BinaryenShrUInt32 */,\n  ShrI32 = 12 /* _BinaryenShrSInt32 */,\n  RotlI32 = 13 /* _BinaryenRotLInt32 */,\n  RotrI32 = 14 /* _BinaryenRotRInt32 */,\n  EqI32 = 15 /* _BinaryenEqInt32 */,\n  NeI32 = 16 /* _BinaryenNeInt32 */,\n  LtI32 = 17 /* _BinaryenLtSInt32 */,\n  LtU32 = 18 /* _BinaryenLtUInt32 */,\n  LeI32 = 19 /* _BinaryenLeSInt32 */,\n  LeU32 = 20 /* _BinaryenLeUInt32 */,\n  GtI32 = 21 /* _BinaryenGtSInt32 */,\n  GtU32 = 22 /* _BinaryenGtUInt32 */,\n  GeI32 = 23 /* _BinaryenGeSInt32 */,\n  GeU32 = 24 /* _BinaryenGeUInt32 */,\n  AddI64 = 25 /* _BinaryenAddInt64 */,\n  SubI64 = 26 /* _BinaryenSubInt64 */,\n  MulI64 = 27 /* _BinaryenMulInt64 */,\n  DivI64 = 28 /* _BinaryenDivSInt64 */,\n  DivU64 = 29 /* _BinaryenDivUInt64 */,\n  RemI64 = 30 /* _BinaryenRemSInt64 */,\n  RemU64 = 31 /* _BinaryenRemUInt64 */,\n  AndI64 = 32 /* _BinaryenAndInt64 */,\n  OrI64 = 33 /* _BinaryenOrInt64 */,\n  XorI64 = 34 /* _BinaryenXorInt64 */,\n  ShlI64 = 35 /* _BinaryenShlInt64 */,\n  ShrU64 = 36 /* _BinaryenShrUInt64 */,\n  ShrI64 = 37 /* _BinaryenShrSInt64 */,\n  RotlI64 = 38 /* _BinaryenRotLInt64 */,\n  RotrI64 = 39 /* _BinaryenRotRInt64 */,\n  EqI64 = 40 /* _BinaryenEqInt64 */,\n  NeI64 = 41 /* _BinaryenNeInt64 */,\n  LtI64 = 42 /* _BinaryenLtSInt64 */,\n  LtU64 = 43 /* _BinaryenLtUInt64 */,\n  LeI64 = 44 /* _BinaryenLeSInt64 */,\n  LeU64 = 45 /* _BinaryenLeUInt64 */,\n  GtI64 = 46 /* _BinaryenGtSInt64 */,\n  GtU64 = 47 /* _BinaryenGtUInt64 */,\n  GeI64 = 48 /* _BinaryenGeSInt64 */,\n  GeU64 = 49 /* _BinaryenGeUInt64 */,\n  AddF32 = 50 /* _BinaryenAddFloat32 */,\n  SubF32 = 51 /* _BinaryenSubFloat32 */,\n  MulF32 = 52 /* _BinaryenMulFloat32 */,\n  DivF32 = 53 /* _BinaryenDivFloat32 */,\n  CopysignF32 = 54 /* _BinaryenCopySignFloat32 */,\n  MinF32 = 55 /* _BinaryenMinFloat32 */,\n  MaxF32 = 56 /* _BinaryenMaxFloat32 */,\n  EqF32 = 57 /* _BinaryenEqFloat32 */,\n  NeF32 = 58 /* _BinaryenNeFloat32 */,\n  LtF32 = 59 /* _BinaryenLtFloat32 */,\n  LeF32 = 60 /* _BinaryenLeFloat32 */,\n  GtF32 = 61 /* _BinaryenGtFloat32 */,\n  GeF32 = 62 /* _BinaryenGeFloat32 */,\n  AddF64 = 63 /* _BinaryenAddFloat64 */,\n  SubF64 = 64 /* _BinaryenSubFloat64 */,\n  MulF64 = 65 /* _BinaryenMulFloat64 */,\n  DivF64 = 66 /* _BinaryenDivFloat64 */,\n  CopysignF64 = 67 /* _BinaryenCopySignFloat64 */,\n  MinF64 = 68 /* _BinaryenMinFloat64 */,\n  MaxF64 = 69 /* _BinaryenMaxFloat64 */,\n  EqF64 = 70 /* _BinaryenEqFloat64 */,\n  NeF64 = 71 /* _BinaryenNeFloat64 */,\n  LtF64 = 72 /* _BinaryenLtFloat64 */,\n  LeF64 = 73 /* _BinaryenLeFloat64 */,\n  GtF64 = 74 /* _BinaryenGtFloat64 */,\n  GeF64 = 75 /* _BinaryenGeFloat64 */,\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = 76 /* _BinaryenEqVecI8x16 */,\n  NeI8x16 = 77 /* _BinaryenNeVecI8x16 */,\n  LtI8x16 = 78 /* _BinaryenLtSVecI8x16 */,\n  LtU8x16 = 79 /* _BinaryenLtUVecI8x16 */,\n  GtI8x16 = 80 /* _BinaryenGtSVecI8x16 */,\n  GtU8x16 = 81 /* _BinaryenGtUVecI8x16 */,\n  LeI8x16 = 82 /* _BinaryenLeSVecI8x16 */,\n  LeU8x16 = 83 /* _BinaryenLeUVecI8x16 */,\n  GeI8x16 = 84 /* _BinaryenGeSVecI8x16 */,\n  GeU8x16 = 85 /* _BinaryenGeUVecI8x16 */,\n  EqI16x8 = 86 /* _BinaryenEqVecI16x8 */,\n  NeI16x8 = 87 /* _BinaryenNeVecI16x8 */,\n  LtI16x8 = 88 /* _BinaryenLtSVecI16x8 */,\n  LtU16x8 = 89 /* _BinaryenLtUVecI16x8 */,\n  GtI16x8 = 90 /* _BinaryenGtSVecI16x8 */,\n  GtU16x8 = 91 /* _BinaryenGtUVecI16x8 */,\n  LeI16x8 = 92 /* _BinaryenLeSVecI16x8 */,\n  LeU16x8 = 93 /* _BinaryenLeUVecI16x8 */,\n  GeI16x8 = 94 /* _BinaryenGeSVecI16x8 */,\n  GeU16x8 = 95 /* _BinaryenGeUVecI16x8 */,\n  EqI32x4 = 96 /* _BinaryenEqVecI32x4 */,\n  NeI32x4 = 97 /* _BinaryenNeVecI32x4 */,\n  LtI32x4 = 98 /* _BinaryenLtSVecI32x4 */,\n  LtU32x4 = 99 /* _BinaryenLtUVecI32x4 */,\n  GtI32x4 = 100 /* _BinaryenGtSVecI32x4 */,\n  GtU32x4 = 101 /* _BinaryenGtUVecI32x4 */,\n  LeI32x4 = 102 /* _BinaryenLeSVecI32x4 */,\n  LeU32x4 = 103 /* _BinaryenLeUVecI32x4 */,\n  GeI32x4 = 104 /* _BinaryenGeSVecI32x4 */,\n  GeU32x4 = 105 /* _BinaryenGeUVecI32x4 */,\n  EqF32x4 = 106 /* _BinaryenEqVecF32x4 */,\n  NeF32x4 = 107 /* _BinaryenNeVecF32x4 */,\n  LtF32x4 = 108 /* _BinaryenLtVecF32x4 */,\n  GtF32x4 = 109 /* _BinaryenGtVecF32x4 */,\n  LeF32x4 = 110 /* _BinaryenLeVecF32x4 */,\n  GeF32x4 = 111 /* _BinaryenGeVecF32x4 */,\n  EqF64x2 = 112 /* _BinaryenEqVecF64x2 */,\n  NeF64x2 = 113 /* _BinaryenNeVecF64x2 */,\n  LtF64x2 = 114 /* _BinaryenLtVecF64x2 */,\n  GtF64x2 = 115 /* _BinaryenGtVecF64x2 */,\n  LeF64x2 = 116 /* _BinaryenLeVecF64x2 */,\n  GeF64x2 = 117 /* _BinaryenGeVecF64x2 */,\n  AndV128 = 118 /* _BinaryenAndVec128 */,\n  OrV128 = 119 /* _BinaryenOrVec128 */,\n  XorV128 = 120 /* _BinaryenXorVec128 */,\n  AndNotV128 = 121 /* _BinaryenAndNotVec128 */,\n  AddI8x16 = 122 /* _BinaryenAddVecI8x16 */,\n  AddSatI8x16 = 123 /* _BinaryenAddSatSVecI8x16 */,\n  AddSatU8x16 = 124 /* _BinaryenAddSatUVecI8x16 */,\n  SubI8x16 = 125 /* _BinaryenSubVecI8x16 */,\n  SubSatI8x16 = 126 /* _BinaryenSubSatSVecI8x16 */,\n  SubSatU8x16 = 127 /* _BinaryenSubSatUVecI8x16 */,\n  MulI8x16 = 128 /* _BinaryenMulVecI8x16 */,\n  MinI8x16 = 129 /* _BinaryenMinSVecI8x16 */,\n  MinU8x16 = 130 /* _BinaryenMinUVecI8x16 */,\n  MaxI8x16 = 131 /* _BinaryenMaxSVecI8x16 */,\n  MaxU8x16 = 132 /* _BinaryenMaxUVecI8x16 */,\n  AvgrU8x16 = 133 /* _BinaryenAvgrUVecI8x16 */,\n  AddI16x8 = 134 /* _BinaryenAddVecI16x8 */,\n  AddSatI16x8 = 135 /* _BinaryenAddSatSVecI16x8 */,\n  AddSatU16x8 = 136 /* _BinaryenAddSatUVecI16x8 */,\n  SubI16x8 = 137 /* _BinaryenSubVecI16x8 */,\n  SubSatI16x8 = 138 /* _BinaryenSubSatSVecI16x8 */,\n  SubSatU16x8 = 139 /* _BinaryenSubSatUVecI16x8 */,\n  MulI16x8 = 140 /* _BinaryenMulVecI16x8 */,\n  MinI16x8 = 141 /* _BinaryenMinSVecI16x8 */,\n  MinU16x8 = 142 /* _BinaryenMinUVecI16x8 */,\n  MaxI16x8 = 143 /* _BinaryenMaxSVecI16x8 */,\n  MaxU16x8 = 144 /* _BinaryenMaxUVecI16x8 */,\n  AvgrU16x8 = 145 /* _BinaryenAvgrUVecI16x8 */,\n  AddI32x4 = 146 /* _BinaryenAddVecI32x4 */,\n  SubI32x4 = 147 /* _BinaryenSubVecI32x4 */,\n  MulI32x4 = 148 /* _BinaryenMulVecI32x4 */,\n  MinI32x4 = 149 /* _BinaryenMinSVecI32x4 */,\n  MinU32x4 = 150 /* _BinaryenMinUVecI32x4 */,\n  MaxI32x4 = 151 /* _BinaryenMaxSVecI32x4 */,\n  MaxU32x4 = 152 /* _BinaryenMaxUVecI32x4 */,\n  DotI16x8 = 153 /* _BinaryenDotSVecI16x8ToVecI32x4 */,\n  AddI64x2 = 154 /* _BinaryenAddVecI64x2 */,\n  SubI64x2 = 155 /* _BinaryenSubVecI64x2 */,\n\n  AddF32x4 = 157 /* _BinaryenAddVecF32x4 */,\n  SubF32x4 = 158 /* _BinaryenSubVecF32x4 */,\n  MulF32x4 = 159 /* _BinaryenMulVecF32x4 */,\n  DivF32x4 = 160 /* _BinaryenDivVecF32x4 */,\n  MinF32x4 = 161 /* _BinaryenMinVecF32x4 */,\n  MaxF32x4 = 162 /* _BinaryenMaxVecF32x4 */,\n  PminF32x4 = 163 /* _BinaryenPMinVecF32x4 */,\n  PmaxF32x4 = 164 /* _BinaryenPMaxVecF32x4 */,\n  AddF64x2 = 165 /* _BinaryenAddVecF64x2 */,\n  SubF64x2 = 166 /* _BinaryenSubVecF64x2 */,\n  MulF64x2 = 167 /* _BinaryenMulVecF64x2 */,\n  DivF64x2 = 168 /* _BinaryenDivVecF64x2 */,\n  MinF64x2 = 169 /* _BinaryenMinVecF64x2 */,\n  MaxF64x2 = 170 /* _BinaryenMaxVecF64x2 */,\n  PminF64x2 = 171 /* _BinaryenPMinVecF64x2 */,\n  PmaxF64x2 = 172 /* _BinaryenPMaxVecF64x2 */,\n  NarrowI16x8ToI8x16 = 173 /* _BinaryenNarrowSVecI16x8ToVecI8x16 */,\n  NarrowU16x8ToU8x16 = 174 /* _BinaryenNarrowUVecI16x8ToVecI8x16 */,\n  NarrowI32x4ToI16x8 = 175 /* _BinaryenNarrowSVecI32x4ToVecI16x8 */,\n  NarrowU32x4ToU16x8 = 176 /* _BinaryenNarrowUVecI32x4ToVecI16x8 */,\n  SwizzleV8x16 = 177 /* _BinaryenSwizzleVec8x16 */\n}\n\nexport enum HostOp {\n  MemorySize = 0 /* _BinaryenMemorySize */,\n  MemoryGrow = 1 /* _BinaryenMemoryGrow */,\n}\n\nexport enum AtomicRMWOp {\n  Add = 0 /* _BinaryenAtomicRMWAdd */,\n  Sub = 1 /* _BinaryenAtomicRMWSub */,\n  And = 2 /* _BinaryenAtomicRMWAnd */,\n  Or = 3 /* _BinaryenAtomicRMWOr */,\n  Xor = 4 /* _BinaryenAtomicRMWXor */,\n  Xchg = 5 /* _BinaryenAtomicRMWXchg */\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = 0 /* _BinaryenExtractLaneSVecI8x16 */,\n  ExtractLaneU8x16 = 1 /* _BinaryenExtractLaneUVecI8x16 */,\n  ExtractLaneI16x8 = 2 /* _BinaryenExtractLaneSVecI16x8 */,\n  ExtractLaneU16x8 = 3 /* _BinaryenExtractLaneUVecI16x8 */,\n  ExtractLaneI32x4 = 4 /* _BinaryenExtractLaneVecI32x4 */,\n  ExtractLaneI64x2 = 5 /* _BinaryenExtractLaneVecI64x2 */,\n  ExtractLaneF32x4 = 6 /* _BinaryenExtractLaneVecF32x4 */,\n  ExtractLaneF64x2 = 7 /* _BinaryenExtractLaneVecF64x2 */,\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = 0 /* _BinaryenReplaceLaneVecI8x16 */,\n  ReplaceLaneI16x8 = 1 /* _BinaryenReplaceLaneVecI16x8 */,\n  ReplaceLaneI32x4 = 2 /* _BinaryenReplaceLaneVecI32x4 */,\n  ReplaceLaneI64x2 = 3 /* _BinaryenReplaceLaneVecI64x2 */,\n  ReplaceLaneF32x4 = 4 /* _BinaryenReplaceLaneVecF32x4 */,\n  ReplaceLaneF64x2 = 5 /* _BinaryenReplaceLaneVecF64x2 */\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = 0 /* _BinaryenShlVecI8x16 */,\n  ShrI8x16 = 1 /* _BinaryenShrSVecI8x16 */,\n  ShrU8x16 = 2 /* _BinaryenShrUVecI8x16 */,\n  ShlI16x8 = 3 /* _BinaryenShlVecI16x8 */,\n  ShrI16x8 = 4 /* _BinaryenShrSVecI16x8 */,\n  ShrU16x8 = 5 /* _BinaryenShrUVecI16x8 */,\n  ShlI32x4 = 6 /* _BinaryenShlVecI32x4 */,\n  ShrI32x4 = 7 /* _BinaryenShrSVecI32x4 */,\n  ShrU32x4 = 8 /* _BinaryenShrUVecI32x4 */,\n  ShlI64x2 = 9 /* _BinaryenShlVecI64x2 */,\n  ShrI64x2 = 10 /* _BinaryenShrSVecI64x2 */,\n  ShrU64x2 = 11 /* _BinaryenShrUVecI64x2 */\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = 0 /* _BinaryenBitselectVec128 */,\n  QFMAF32x4 = 1 /* _BinaryenQFMAVecF32x4 */,\n  QFMSF32x4 = 2 /* _BinaryenQFMSVecF32x4 */,\n  QFMAF64x2 = 3 /* _BinaryenQFMAVecF64x2 */,\n  QFMSF64x2 = 4 /* _BinaryenQFMSVecF64x2 */\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = 0 /* _BinaryenLoadSplatVec8x16 */,\n  LoadSplatV16x8 = 1 /* _BinaryenLoadSplatVec16x8 */,\n  LoadSplatV32x4 = 2 /* _BinaryenLoadSplatVec32x4 */,\n  LoadSplatV64x2 = 3 /* _BinaryenLoadSplatVec64x2 */,\n  LoadI8ToI16x8 = 4 /* _BinaryenLoadExtSVec8x8ToVecI16x8 */,\n  LoadU8ToU16x8 = 5 /* _BinaryenLoadExtUVec8x8ToVecI16x8 */,\n  LoadI16ToI32x4 = 6 /* _BinaryenLoadExtSVec16x4ToVecI32x4 */,\n  LoadU16ToU32x4 = 7 /* _BinaryenLoadExtUVec16x4ToVecI32x4 */,\n  LoadI32ToI64x2 = 8 /* _BinaryenLoadExtSVec32x2ToVecI64x2 */,\n  LoadU32ToU64x2 = 9 /* _BinaryenLoadExtUVec32x2ToVecI64x2 */\n}\n\nexport enum ExpressionRunnerFlags {\n  Default = 0 /* _ExpressionRunnerFlagsDefault */,\n  PreserveSideeffects = 1 /* _ExpressionRunnerFlagsPreserveSideeffects */,\n  TraverseCalls = 2 /* _ExpressionRunnerFlagsTraverseCalls */\n}\n\nexport class MemorySegment {\n  constructor(\n    /** Segment data. */\n    public buffer: Uint8Array,\n    /** Segment offset. */\n    public offset: i64\n  ) {}\n}\n\nexport class Module {\n  constructor(\n    /** Binaryen module reference. */\n    public ref: ModuleRef\n  ) {\n    this.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n  }\n\n  private lit: usize;\n\n  static create(): Module {\n    return new Module(binaryen._BinaryenModuleCreate());\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    var module = new Module(binaryen._BinaryenModuleRead(cArr, buffer.length));\n    binaryen._free(changetype<usize>(cArr));\n    return module;\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) {\n      binaryen.__i32_store8(out + i, bytes[i]);\n    }\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  ref_null(): ExpressionRef {\n    return binaryen._BinaryenRefNull(this.ref);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(\n      this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  /** Attempts to trivially flatten a series of expressions instead of emitting a block. */\n  flatten(\n    stmts: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var length = stmts.length;\n    if (length == 0) return this.nop(); // usually filtered out again\n    if (length == 1) {\n      let single = stmts[0];\n      switch (getExpressionId(single)) {\n        case ExpressionId.Return:\n        case ExpressionId.Throw:\n        case ExpressionId.Unreachable: {\n          // type does no matter, terminates anyway\n          return single;\n        }\n      }\n      let singleType = getExpressionType(single);\n      assert(singleType == NativeType.Unreachable || singleType == type);\n      return single;\n    }\n    return this.block(null, stmts, type);\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  maybeDropCondition(condition: ExpressionRef, result: ExpressionRef): ExpressionRef {\n    // FIXME: This is necessary because Binaryen's ExpressionRunner bails early\n    // when encountering a local with an unknown value. This helper only drops\n    // the pre-evaluated condition if it has relevant side effects.\n    // see WebAssembly/binaryen#1237\n    if ((getSideEffects(condition) & ~(SideEffects.ReadsLocal | SideEffects.ReadsGlobal)) != 0) {\n      return this.block(null, [\n        this.drop(condition),\n        result\n      ], getExpressionType(result));\n    }\n    return result;\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) {\n      type = binaryen._BinaryenExpressionGetType(ifTrue);\n      assert(type == binaryen._BinaryenExpressionGetType(ifFalse));\n    }\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse, type);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocPtrArray(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        )\n      : binaryen._BinaryenCall(\n          this.ref, cStr, cArr, operands ? operands.length : 0, returnType\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        )\n      : binaryen._BinaryenCallIndirect(\n          this.ref, index, cArr, operands ? operands.length : 0, params, results\n        );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // multi value (pseudo instructions)\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  tuple_make(operands: ExpressionRef[]): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenTupleMake(this.ref, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  tuple_extract(tuple: ExpressionRef, index: Index): ExpressionRef {\n    return binaryen._BinaryenTupleExtract(this.ref, tuple, index);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // reference types\n\n  ref_is_null(\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRefIsNull(this.ref, expr);\n  }\n\n  ref_func(\n    name: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenRefFunc(this.ref, cStr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(varTypes);\n    var ret = binaryen._BinaryenAddFunction(\n      this.ref,\n      cStr,\n      params,\n      results,\n      cArr,\n      varTypes ? varTypes.length : 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(\n    result: NativeType,\n    paramTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocPtrArray(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(\n      this.ref, cStr1, cStr2, cStr3, attribute, params, results\n    );\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let segment = segments[i];\n      let buffer = segment.buffer;\n      let offset = segment.offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocPtrArray(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocPtrArray(offs);\n    var cArr4 = allocU32Array(sizs);\n    binaryen._BinaryenSetMemory(\n      this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared\n    );\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) {\n      binaryen._free(segs[i]);\n    }\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocPtrArray(names);\n    binaryen._BinaryenSetFunctionTable(\n      this.ref, initial, maximum, cArr, numNames, offset\n    );\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta (global)\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  getDebugInfo(): boolean {\n    return binaryen._BinaryenGetDebugInfo();\n  }\n\n  setDebugInfo(on: bool): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getLowMemoryUnused(): bool {\n    return binaryen._BinaryenGetLowMemoryUnused();\n  }\n\n  setLowMemoryUnused(on: bool): void {\n    binaryen._BinaryenSetLowMemoryUnused(on);\n  }\n\n  getPassArgument(key: string): string | null {\n    var cStr = this.allocStringCached(key);\n    var ptr = binaryen._BinaryenGetPassArgument(cStr);\n    return ptr ? readString(ptr) : null;\n  }\n\n  setPassArgument(key: string, value: string | null): void {\n    var cStr1 = this.allocStringCached(key);\n    var cStr2 = this.allocStringCached(value);\n    binaryen._BinaryenSetPassArgument(cStr1, cStr2);\n  }\n\n  clearPassArguments(): void {\n    binaryen._BinaryenClearPassArguments();\n  }\n\n  getAlwaysInlineMaxSize(): Index {\n    return binaryen._BinaryenGetAlwaysInlineMaxSize();\n  }\n\n  setAlwaysInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetAlwaysInlineMaxSize(size);\n  }\n\n  getFlexibleInlineMaxSize(): Index {\n    return binaryen._BinaryenGetFlexibleInlineMaxSize();\n  }\n\n  setFlexibleInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetFlexibleInlineMaxSize(size);\n  }\n\n  getOneCallerInlineMaxSize(): Index {\n    return binaryen._BinaryenGetOneCallerInlineMaxSize();\n  }\n\n  setOneCallerInlineMaxSize(size: Index): void {\n    binaryen._BinaryenSetOneCallerInlineMaxSize(size);\n  }\n\n  // meta (module)\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  runPass(pass: string, func: FunctionRef = 0): void {\n    var cStr = allocString(pass);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cStr, 1);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cStr, 1);\n    }\n    binaryen._free(cStr);\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var cStrs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      cStrs[i] = allocString(passes[i]);\n    }\n    var cArr = allocPtrArray(cStrs);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(cStrs[i]);\n  }\n\n  optimize(optimizeLevel: i32, shrinkLevel: i32, debugInfo: bool = false, usesARC: bool = true): void {\n    // Implicitly run costly non-LLVM optimizations on -O3 or -Oz\n    if (optimizeLevel >= 3 || shrinkLevel >= 2) optimizeLevel = 4;\n\n    binaryen._BinaryenSetOptimizeLevel(optimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(shrinkLevel);\n    binaryen._BinaryenSetDebugInfo(debugInfo);\n\n    // Tweak inlining limits based on optimization levels\n    if (optimizeLevel >= 2 && shrinkLevel === 0) {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(12);\n      binaryen._BinaryenSetFlexibleInlineMaxSize(70);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(200);\n    } else {\n      binaryen._BinaryenSetAlwaysInlineMaxSize(\n        optimizeLevel == 0 && shrinkLevel >= 0\n          ? 2\n          : 4\n      );\n      binaryen._BinaryenSetFlexibleInlineMaxSize(65);\n      binaryen._BinaryenSetOneCallerInlineMaxSize(80);\n    }\n\n    // Pass order here differs substantially from Binaryen's defaults\n    // see: Binaryen/src/pass.cpp\n    if (optimizeLevel > 0 || shrinkLevel > 0) {\n      let passes = new Array<string>();\n\n      // --- PassRunner::addDefaultGlobalOptimizationPrePasses ---\n\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-module-elements\"); // +\n\n      // --- PassRunner::addDefaultFunctionOptimizationPasses ---\n\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n        passes.push(\"ssa-nomerge\");\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"merge-blocks\");\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 3) {\n        passes.push(\"flatten\");\n        passes.push(\"simplify-locals-notee-nostructure\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"code-folding\");\n        passes.push(\"flatten\");\n        passes.push(\"local-cse\");\n        passes.push(\"reorder-locals\");\n      }\n      // FIXME: see issue #1288\n      // if (usesARC) {\n      //   if (optimizeLevel < 3) {\n      //     passes.push(\"flatten\");\n      //   }\n      //   passes.push(\"post-assemblyscript\");\n      // }\n      passes.push(\"optimize-instructions\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"dce\");\n        passes.push(\"inlining\");\n      }\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"inlining-optimizing\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 2) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"pick-load-signs\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      if (optimizeLevel >= 3 && shrinkLevel <= 1) {\n        passes.push(\"licm\");\n      }\n      passes.push(\"simplify-locals-nostructure\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"simplify-locals\");\n      passes.push(\"vacuum\");\n\n      passes.push(\"reorder-locals\");\n      passes.push(\"coalesce-locals\");\n      passes.push(\"reorder-locals\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"merge-locals\");\n      }\n      passes.push(\"vacuum\");\n      if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n        passes.push(\"code-folding\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      passes.push(\"merge-blocks\");\n      passes.push(\"remove-unused-brs\");\n      passes.push(\"remove-unused-names\");\n      passes.push(\"merge-blocks\");\n      if (optimizeLevel >= 3) {\n        passes.push(\"optimize-instructions\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        passes.push(\"vacuum\");\n      }\n\n      // --- PassRunner::addDefaultGlobalOptimizationPostPasses ---\n\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"simplify-globals-optimizing\");\n        passes.push(\"dae-optimizing\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"inlining-optimizing\");\n      }\n      if (binaryen._BinaryenGetLowMemoryUnused()) {\n        if (optimizeLevel >= 3 || shrinkLevel >= 1) {\n          passes.push(\"optimize-added-constants-propagate\");\n        } else {\n          passes.push(\"optimize-added-constants\");\n        }\n      }\n      passes.push(\"duplicate-import-elimination\");\n      if (optimizeLevel >= 2 || shrinkLevel >= 2) {\n        passes.push(\"simplify-globals-optimizing\");\n      } else {\n        passes.push(\"simplify-globals\");\n        passes.push(\"vacuum\");\n      }\n      // precompute works best after global optimizations\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"precompute-propagate\");\n      } else {\n        passes.push(\"precompute\");\n      }\n      passes.push(\"directize\"); // replace indirect with direct calls\n      passes.push(\"dae-optimizing\"); // reduce arity\n      passes.push(\"inlining-optimizing\"); // and inline if possible\n      if (usesARC) {\n        // works best after inlining to cover most retains/releases\n        passes.push(\"post-assemblyscript-finalize\");\n      }\n      if (optimizeLevel >= 2 || shrinkLevel >= 1) {\n        passes.push(\"rse\");\n        // move code on early return (after CFG cleanup)\n        passes.push(\"code-pushing\");\n        if (optimizeLevel >= 3) {\n          // very expensive, so O3 only\n          passes.push(\"simplify-globals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"precompute-propagate\");\n\n          // replace indirect with direct calls again and inline\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"directize\");\n          passes.push(\"dae-optimizing\");\n\n          passes.push(\"merge-locals\");\n          passes.push(\"coalesce-locals\");\n          passes.push(\"simplify-locals\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"inlining-optimizing\");\n          passes.push(\"precompute-propagate\");\n          passes.push(\"vacuum\");\n\n          passes.push(\"coalesce-locals\");\n        }\n        passes.push(\"remove-unused-brs\");\n        passes.push(\"remove-unused-names\");\n        passes.push(\"vacuum\");\n\n        passes.push(\"optimize-instructions\");\n        passes.push(\"simplify-globals-optimizing\");\n      }\n      // clean up\n      passes.push(\"duplicate-function-elimination\");\n      passes.push(\"remove-unused-nonfunction-module-elements\");\n      passes.push(\"memory-packing\");\n      passes.push(\"remove-unused-module-elements\");\n\n      this.runPasses(passes);\n    }\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null = null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n    binaryPtr = assert(binaryen.__i32_load(out));\n    var binaryLen = binaryen.__i32_load(out + 4);\n    sourceMapPtr = binaryen.__i32_load(out + 8); // may be NULL\n    var binary = new BinaryModule(readBuffer(binaryPtr, binaryLen), readString(sourceMapPtr));\n    if (cStr) binaryen._free(cStr);\n    binaryen._free(binaryPtr);\n    if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    return binary;\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str === null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    // TODO: for (let ptr of this.cachedStrings.values()) {\n    for (let _values = Map_values(this.cachedStrings), i = 0, k = _values.length; i < k; ++i) {\n      let ptr = unchecked(_values[i]);\n      binaryen._free(ptr);\n    }\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (<u32>binaryen._BinaryenExpressionGetType(expr)) {\n          case <u32>NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case <u32>NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case <u32>NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case <u32>NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case <u32>NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an externref as it is opaque\n          case <u32>NativeType.Externref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(\n          this.ref, globalName, binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenUnary(\n          this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1\n        );\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(\n          binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth)\n        )) {\n          break;\n        }\n        return binaryen._BinaryenBinary(\n          this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2\n        );\n      }\n    }\n    return 0;\n  }\n\n  copyExpression(expr: ExpressionRef): ExpressionRef {\n    return binaryen._BinaryenExpressionCopy(expr, this.ref);\n  }\n\n  runExpression(\n    expr: ExpressionRef,\n    flags: ExpressionRunnerFlags,\n    maxDepth: i32 = 50,\n    maxLoopIterations: i32 = 1\n  ): ExpressionRef {\n    var runner = binaryen._ExpressionRunnerCreate(this.ref, flags, maxDepth, maxLoopIterations);\n    var precomp =  binaryen._ExpressionRunnerRunAndDispose(runner, expr);\n    if (precomp) {\n      assert(getExpressionId(precomp) == ExpressionId.Const);\n      assert(getExpressionType(precomp) == getExpressionType(expr));\n    }\n    return precomp;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocPtrArray(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array<NativeType>(arity);\n  for (let i: u32 = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f64 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChildAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChildAt(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperandAt(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperandAt(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperandAt(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType[] {\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i: Index = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return types;\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInitExpr(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventParams(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetParams(event);\n}\n\nexport function getEventResults(event: EventRef): NativeType {\n  return binaryen._BinaryenEventGetResults(event);\n}\n\nexport class Relooper {\n  constructor(\n    /** Module this relooper belongs to. */\n    public module: Module,\n    /** Binaryen relooper reference. */\n    public ref: RelooperRef\n  ) {}\n\n  static create(module: Module): Relooper {\n    return new Relooper(module, binaryen._RelooperCreate(module.ref));\n  }\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n/** Builds a switch using a sequence of `br_if`s. */\nexport class SwitchBuilder {\n  // This is useful because Binaryen understands sequences of `br_if`s and\n  // knows how to make a `br_table` from such a sequence if switched over\n  // values are considered dense enough, respectively a size-efficient sequence\n  // of `if`s if not, depending on optimization levels.\n\n  private module: Module;\n  private condition: ExpressionRef;\n  private values: i32[] = new Array();\n  private indexes: i32[] = new Array();\n  private cases: ExpressionRef[][] = new Array();\n  private defaultIndex: i32 = -1;\n\n  /** Creates a new builder using the specified i32 condition. */\n  constructor(module: Module, condition: ExpressionRef) {\n    this.module = module;\n    this.condition = condition;\n  }\n\n  /** Links a case to the specified branch. */\n  addCase(value: i32, code: ExpressionRef[]): void {\n    var cases = this.cases;\n    var index = cases.indexOf(code);\n    if (index < 0) {\n      index = cases.length;\n      cases.push(code);\n    }\n    this.values.push(value);\n    this.indexes.push(index);\n  }\n\n  /** Links the default branch. */\n  addDefault(code: ExpressionRef[]): void {\n    assert(this.defaultIndex == -1);\n    var cases = this.cases;\n    this.defaultIndex = cases.length;\n    cases.push(code);\n  }\n\n  /** Renders the switch to a block. */\n  render(localIndex: i32, labelPostfix: string = \"\"): ExpressionRef {\n    var module = this.module;\n    var cases = this.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return module.drop(this.condition);\n    }\n    var values = this.values;\n    var numValues = values.length;\n    var indexes = this.indexes;\n    var entry = new Array<ExpressionRef>(1 + numValues + 1);\n    var labels = new Array<string>(numCases);\n    for (let i = 0; i < numCases; ++i) {\n      labels[i] = \"case\" + i.toString() + labelPostfix;\n    }\n    entry[0] = module.local_set(localIndex, this.condition);\n    for (let i = 0; i < numValues; ++i) {\n      let index = indexes[i];\n      entry[1 + i] = module.br(labels[index],\n        module.binary(BinaryOp.EqI32,\n          module.local_get(localIndex, NativeType.I32),\n          module.i32(values[i])\n        )\n      );\n    }\n    var defaultIndex = this.defaultIndex;\n    var defaultLabel = \"default\" + labelPostfix;\n    entry[1 + numValues] = module.br(\n      ~defaultIndex\n        ? labels[defaultIndex]\n        : defaultLabel\n    );\n    var current = module.block(labels[0], entry);\n    for (let i = 1; i < numCases; ++i) {\n      let block = cases[i - 1];\n      block.unshift(current);\n      current = module.block(labels[i], block);\n    }\n    var lastCase = cases[numCases - 1];\n    lastCase.unshift(current);\n    return module.block(\n      ~defaultIndex\n        ? null\n        : defaultLabel,\n      lastCase\n    );\n  }\n}\n\nexport enum SideEffects {\n  None = 0 /* _BinaryenSideEffectNone */,\n  Branches = 1 /* _BinaryenSideEffectBranches */,\n  Calls = 2 /* _BinaryenSideEffectCalls */,\n  ReadsLocal = 4 /* _BinaryenSideEffectReadsLocal */,\n  WritesLocal = 8 /* _BinaryenSideEffectWritesLocal */,\n  ReadsGlobal = 16 /* _BinaryenSideEffectReadsGlobal */,\n  WritesGlobal = 32 /* _BinaryenSideEffectWritesGlobal */,\n  ReadsMemory = 64 /* _BinaryenSideEffectReadsMemory */,\n  WritesMemory = 128 /* _BinaryenSideEffectWritesMemory */,\n  ImplicitTrap = 256 /* _BinaryenSideEffectImplicitTrap */,\n  IsAtomic = 512 /* _BinaryenSideEffectIsAtomic */,\n  Throws = 1024 /* _BinaryenSideEffectThrows */,\n  DanglingPop = 2048 /* _BinaryenSideEffectDanglingPop */,\n  Any = 4095 /* _BinaryenSideEffectAny */\n}\n\nexport function getSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): SideEffects {\n  return binaryen._BinaryenExpressionGetSideEffects(expr, features);\n}\n\nexport function hasSideEffects(expr: ExpressionRef, features: FeatureFlags = FeatureFlags.All): bool {\n  return getSideEffects(expr, features) != SideEffects.None;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var len = u8s.length;\n  var ptr = binaryen._malloc(len);\n  for (let i = 0; i < len; ++i) {\n    binaryen.__i32_store8(ptr + i, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var len = i32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocU32Array(u32s: u32[] | null): usize {\n  if (!u32s) return 0;\n  var len = u32s.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0; i < len; ++i) {\n    let val = u32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  if (!ptrs) return 0;\n  // TODO: WASM64\n  assert(ASC_TARGET != Target.WASM64);\n  var len = ptrs.length;\n  var ptr = binaryen._malloc(len << 2);\n  var idx = ptr;\n  for (let i = 0, k = len; i < k; ++i) {\n    let val = ptrs[i];\n    binaryen.__i32_store(idx, <i32>val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      len += 1;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else {\n      len += 4;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str === null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1) >>> 0;\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      assert(u < 0x200000, \"Invalid Unicode code point during allocString\");\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, len: i32): Uint8Array {\n  var ret = new Uint8Array(len);\n  for (let i = 0; i < len; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + <usize>i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        assert(false, \"Invalid UTF8 sequence during readString\");\n      }\n    }\n    if (cp < 0x10000) {\n      arr.push(cp);\n    } else {\n      let ch = cp - 0x10000;\n      arr.push(0xD800 | (ch >>> 10));\n      arr.push(0xDC00 | (ch & 0x3FF));\n    }\n  }\n  return String.fromCharCodes(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  constructor(\n    /** WebAssembly binary. */\n    public output: Uint8Array,\n    /** Source map, if generated. */\n    public sourceMap: string | null\n  ) {}\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) {\n    return false;\n  }\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: {\n      return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    }\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return (\n          numChildren > 0 &&\n          needsExplicitUnreachable(binaryen._BinaryenBlockGetChildAt(expr, numChildren - 1))\n        );\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(\n  expr:  ExpressionRef,\n  data:  T,\n  visit: (expr: ExpressionRef, data: T) => void\n): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i: Index = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChildAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i: Index = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i: Index = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.RefNull: {\n      break;\n    }\n    case ExpressionId.RefIsNull: {\n      visit(binaryen._BinaryenRefIsNullGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.RefFunc: {\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i: Index = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.TupleMake: {\n      for (let i: Index = 0, n = binaryen._BinaryenTupleMakeGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenTupleMakeGetOperandAt(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.TupleExtract: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * @fileoverview Mappings from AssemblyScript types to WebAssembly types.\n * @license Apache-2.0\n */\n\nimport {\n  Class,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** Any host reference. */\n  EXTERNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a varying (in size) type. */\n  VARYING = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10,\n  /** Is an external type. */\n  EXTERNAL = 1 << 11,\n  /** Is a class. */\n  CLASS = 1 << 12,\n  /** Is a function. */\n  FUNCTION = 1 << 13\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: i32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  private _nonNullableType: Type | null = null;\n  /** Respective nullable type, if non-nullable. */\n  private _nullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    if (!(flags & TypeFlags.NULLABLE)) {\n      this._nonNullableType = this;\n    } else {\n      this._nullableType = this;\n    }\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    if (this == Type.auto) return this; // keep auto as a hint\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this type represents a basic value. */\n  get isValue(): bool {\n    return this.is(TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer value. */\n  get isIntegerValue(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a small (< 32 bits) integer value. */\n  get isShortIntegerValue(): bool {\n    return this.is(TypeFlags.SHORT | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a long (> 32 bits) integer value. */\n  get isLongIntegerValue(): bool {\n    return this.is(TypeFlags.LONG | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a signed integer value. */\n  get isSignedIntegerValue(): bool {\n    return this.is(TypeFlags.SIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an unsigned integer value. */\n  get isUnsignedIntegerValue(): bool {\n    return this.is(TypeFlags.UNSIGNED | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents a varying (in size) integer value. */\n  get isVaryingIntegerValue(): bool {\n    return this.is(TypeFlags.VARYING | TypeFlags.INTEGER | TypeFlags.VALUE);\n  }\n\n  /** Tests if this type represents an integer, including references.  */\n  get isIntegerInclReference(): bool {\n    return this.is(TypeFlags.INTEGER);\n  }\n\n  /** Tests if this type represents a floating point value. */\n  get isFloatValue(): bool {\n    return this.is(TypeFlags.FLOAT | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents a numeric (integer or floating point) value. */\n  get isNumericValue(): bool {\n    return this.isIntegerValue || this.isFloatValue;\n  }\n\n  /** Tests if this type represents a boolean value. */\n  get isBooleanValue(): bool {\n    return this == Type.bool;\n  }\n\n  /** Tests if this type represents a vector value. */\n  get isVectorValue(): bool {\n    return this.is(TypeFlags.VECTOR | TypeFlags.VALUE);\n  }\n  \n  /** Tests if this type represents an internal or external reference. */\n  get isReference(): bool {\n    return this.is(TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a nullable internal or external reference. */\n  get isNullableReference(): bool {\n    return this.is(TypeFlags.NULLABLE | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an internal object. */\n  get isInternalReference(): bool {\n    return this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents an external object. */\n  get isExternalReference(): bool {\n    return this.is(TypeFlags.EXTERNAL | TypeFlags.REFERENCE);\n  }\n\n  /** Tests if this type represents a class. */\n  get isClass(): bool {\n    return this.isInternalReference\n      ? this.classReference !== null\n      : false;\n  }\n\n  /** Gets the underlying class of this type, if any. */\n  getClass(): Class | null {\n    return this.isInternalReference\n      ? this.classReference\n      : null;\n  }\n\n  /** Gets the underlying class or wrapper class of this type, if any. */\n  getClassOrWrapper(program: Program): Class | null {\n    let classReference = this.getClass();\n    if (classReference) {\n      // typical class\n      return classReference;\n    } else {\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        // function wrapper\n        let type = signatureReference.type;\n        let wrapper = assert(program.resolver.resolveClass(program.functionPrototype, [ type ]));\n        wrapper.wrappedType = type;\n        return wrapper;\n      } else {\n        let wrapperClasses = program.wrapperClasses;\n        if (wrapperClasses.has(this)) {\n          // value wrapper\n          return assert(wrapperClasses.get(this));\n        }\n      }\n    }\n    return null;\n  }\n\n  /** Tests if this type represents a function. */\n  get isFunction(): bool {\n    return this.isInternalReference\n      ? this.signatureReference !== null\n      : false;\n  }\n\n  /** Gets the underlying function signature of this type, if any. */\n  getSignature(): Signature | null {\n    return this.isInternalReference\n      ? this.signatureReference\n      : null;\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.isInternalReference) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      return this.signatureReference !== null; // function references are managed\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Gets the corresponding non-nullable type. */\n  get nonNullableType(): Type {\n    return assert(this._nonNullableType); // set either in ctor or asNullable\n  }\n\n  /** Gets the corresponding nullable type, if applicable. */\n  get nullableType(): Type | null {\n    return this._nullableType; // set either in ctor or asNullable\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): i32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): i32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.isInternalReference);\n    var nullableType = this._nullableType;\n    if (!nullableType) {\n      assert(!this.isNullableReference);\n      this._nullableType = nullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      nullableType.classReference = this.classReference;         // either a class reference\n      nullableType.signatureReference = this.signatureReference; // or a function reference\n      nullableType._nonNullableType = this;\n    }\n    return nullableType;\n  }\n\n  /** Tests if this type equals the specified. */\n  equals(other: Type): bool {\n    if (this.kind != other.kind) return false;\n    if (this.isReference) {\n      return (\n        this.classReference == other.classReference &&\n        this.signatureReference == other.signatureReference &&\n        this.isNullableReference == other.isNullableReference\n      );\n    }\n    return true;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.isReference) {\n      if (target.isReference) {\n        if (!this.isNullableReference || target.isNullableReference) {\n          if (currentClass = this.getClass()) {\n            if (targetClass = target.getClass()) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.getSignature()) {\n            if (targetFunction = target.getSignature()) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.EXTERNREF && target.kind == TypeKind.EXTERNREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.isReference) {\n      if (this.isIntegerValue) {\n        if (target.isIntegerValue) {\n          if (\n            !signednessIsRelevant ||\n            this.isBooleanValue || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.isSignedIntegerValue == target.isSignedIntegerValue\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.isFloatValue) {\n        if (target.isFloatValue) {\n          return this.size <= target.size;\n        }\n      } else if (this.isVectorValue) {\n        if (target.isVectorValue) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.isReference) return this.isAssignableTo(target);\n    else if (target.isReference) return false;\n    // not dealing with references from here on\n    if (this.isIntegerValue) {\n      return target.isIntegerValue && target.size == this.size && (\n        !signednessIsRelevant ||\n        this.isSignedIntegerValue == target.isSignedIntegerValue\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    // special in that it allows integer references as well\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(validWat: bool = false): string {\n    const nullablePostfix = validWat\n      ? \"|null\"\n      : \" | null\";\n    if (this.isReference) {\n      let classReference = this.getClass();\n      if (classReference) {\n        return this.isNullableReference\n          ? classReference.internalName + nullablePostfix\n          : classReference.internalName;\n      }\n      let signatureReference = this.getSignature();\n      if (signatureReference) {\n        return this.isNullableReference\n          ? \"(\" + signatureReference.toString(validWat) + \")\" + nullablePostfix\n          : signatureReference.toString(validWat);\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.EXTERNREF);\n      return \"externref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.EXTERNREF: return \"externref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.EXTERNREF: return NativeType.Externref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VARYING  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** Any host reference. */\n  static readonly externref: Type = new Type(TypeKind.EXTERNREF,\n    TypeFlags.EXTERNAL   |\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString(true);\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** Unique id representing this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    var usizeType = program.options.usizeType;\n    var type = new Type(usizeType.kind, usizeType.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, usizeType.size);\n    this.type = type;\n    type.signatureReference = this;\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    this.id = program.nextSignatureId++;\n    program.uniqueSignatures.push(this);\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  /** Tests if this signature equals the specified. */\n  equals(other: Signature): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var otherThisType = other.thisType;\n    if (thisThisType !== null) {\n      if (otherThisType === null || !thisThisType.equals(otherThisType)) return false;\n    } else if (otherThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != other.hasRest) return false;\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var otherParameterTypes = other.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != otherParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      if (!thisParameterTypes[i].equals(otherParameterTypes[i])) return false;\n    }\n\n    // check return type\n    return this.returnType.equals(other.returnType);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature, requireSameSize: bool = false): bool {\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType !== null) {\n      if (targetThisType === null || !thisThisType.isAssignableTo(targetThisType)) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false; // TODO\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(validWat: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(validWat ? \"%28\" : \"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(validWat ? \"this:\" : \"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString(validWat));\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(validWat ? \"%2C\" : \", \");\n        if (i == restIndex) sb.push(\"...\");\n        sb.push(parameters[i].toString(validWat));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?\");\n      }\n    }\n    sb.push(validWat ? \"%29=>\" : \") => \");\n    sb.push(this.returnType.toString(validWat));\n    return sb.join(\"\");\n  }\n\n  /** Creates a clone of this signature that is safe to modify. */\n  clone(): Signature {\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    var cloneParameterTypes = new Array<Type>(numParameterTypes);\n    for (let i = 0; i < numParameterTypes; ++i) {\n      cloneParameterTypes[i] = parameterTypes[i];\n    }\n    return new Signature(this.program, cloneParameterTypes, this.returnType, this.thisType);\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @fileoverview Resolve infrastructure to obtain types and elements.\n *\n * Similar to the compiler making instructions of expressions, the resolver\n * obtains metadata of expressions. As such, for each `compileX` method in\n * the compiler there is one `lookupX` method in the resolver returning the\n * respective IR element, respectively one `resolveX` method returning the\n * respective type of an expression. It is also able to make new elements,\n * like instances of classes given its concrete type arguments.\n *\n * @license Apache-2.0\n */\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Interface,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  IndexSignature,\n  isTypedElement,\n  InterfacePrototype,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Range\n} from \"./tokenizer\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonNames\n} from \"./common\";\n\nimport {\n  uniqueMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinNames\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = assert(ctxTypes.get(simpleName));\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    var shadowType = element.shadowType;\n    if (shadowType) {\n      element = shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes and interfaces\n      if (\n        element.kind == ElementKind.CLASS_PROTOTYPE ||\n        element.kind == ElementKind.INTERFACE_PROTOTYPE\n      ) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          uniqueMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n      let typeDefinition = <TypeDefinition>element;\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = typeDefinition.type;\n        if (node.isNullable) {\n          if (type.isInternalReference) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        let text = nameNode.identifier.text;\n        if (text == CommonNames.native) return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.indexof) return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.valueof) return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n        if (text == CommonNames.returnof) return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n      }\n\n      // Resolve normally\n      let typeParameterNodes = typeDefinition.typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = uniqueMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        typeDefinition.typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (type.isInternalReference) return type.asNullable();\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_cannot_be_nullable,\n            nameNode.range, nameNode.identifier.text\n          );\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      let numTypeArguments = 0;\n      if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.getClassOrWrapper(this.program);\n    if (classReference) {\n      let overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n      if (overload) return overload.signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!typeArgumentNodes || typeArgumentNodes.length != 1) {\n      if (reportMode == ReportMode.REPORT) {\n        let numTypeArguments = 0;\n        if (typeArgumentNodes) numTypeArguments = typeArgumentNodes.length;\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", numTypeArguments.toString()\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.getSignature();\n    if (signatureReference) return signatureReference.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_has_no_call_signatures,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          argumentCount\n            ? Range.join(\n                typeArgumentNodes![0].range,\n                typeArgumentNodes![argumentCount - 1].range\n              )\n            : alternativeReportNode!.range,\n          (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(),\n          argumentCount.toString()\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            typeArgumentNodes![i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = uniqueMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.args;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(), numArguments.toString()\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = assert(contextualTypeArguments.get(name));\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, uniqueMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let namedTypeNode = <NamedTypeNode>node;\n      let typeArgumentNodes = namedTypeNode.typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName(namedTypeNode.name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = namedTypeNode.name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = assert(ctxTypes.get(name));\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let functionTypeNode = <FunctionTypeNode>node;\n      let parameterNodes = functionTypeNode.parameters;\n      if (parameterNodes !== null && parameterNodes.length > 0) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !functionTypeNode.explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes(functionTypeNode.returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes(functionTypeNode.explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.getClassOrWrapper(this.program);\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    let classReference = type.getClassOrWrapper(this.program);\n    if (classReference) return classReference;\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.getClass();\n        if (classReference) {\n          return classReference.type.asNullable();\n        } else {\n          let signatureReference = ctxType.getSignature();\n          if (signatureReference) {\n            return signatureReference.type.asNullable();\n          } else if (ctxType.isExternalReference) {\n            return Type.externref.asNullable();\n          }\n        }\n        return this.program.options.usizeType;\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, uniqueMap<string,Type>(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let variableLikeElement = <VariableLikeElement>target;\n        let type = variableLikeElement.type;\n        assert(type != Type.void);\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, variableLikeElement.type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let propertyInstance = this.resolveProperty(<PropertyPrototype>target, reportMode);\n        if (!propertyInstance) return null;\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, type.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let elementExpression = assert(this.currentElementExpression);\n        let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.getClassOrWrapper(this.program);\n        if (!classReference) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              node.property.range, propertyName, returnType.toString()\n            );\n          }\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // Function with shadow type, i.e. function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        } else if (!target.is(CommonFlags.GENERIC)) {\n          // Inherit from 'Function' if not overridden, i.e. fn.call\n          let members = target.members;\n          if (!members || !members.has(propertyName)) {\n            let functionInstance = this.resolveFunction(<FunctionPrototype>target, null, uniqueMap<string,Type>(), ReportMode.SWALLOW);\n            if (functionInstance) {\n              let wrapper = functionInstance.type.getClassOrWrapper(this.program);\n              if (wrapper) target = wrapper;\n            }\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.INTERFACE_PROTOTYPE:\n      case ElementKind.CLASS:\n      case ElementKind.INTERFACE: {\n        do {\n          let members = target.members;\n          if (members !== null && members.has(propertyName)) {\n            let member = assert(members.get(propertyName));\n            if (member.kind == ElementKind.PROPERTY_PROTOTYPE) {\n              let propertyInstance = this.resolveProperty(<PropertyPrototype>member, reportMode);\n              if (!propertyInstance) return null;\n              member = propertyInstance;\n              if (propertyInstance.is(CommonFlags.STATIC)) {\n                this.currentThisExpression = null;\n              } else {\n                this.currentThisExpression = targetNode;\n              }\n            } else {\n              this.currentThisExpression = targetNode;\n            }\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE, PROPERTY...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (\n            target.kind == ElementKind.CLASS_PROTOTYPE ||\n            target.kind == ElementKind.INTERFACE_PROTOTYPE\n          ) {\n            let classPrototype = <ClassPrototype>target;\n            let basePrototype = classPrototype.basePrototype;\n            if (basePrototype) {\n              target = basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (\n            target.kind == ElementKind.CLASS ||\n            target.kind == ElementKind.INTERFACE\n          ) {\n            let classInstance = <Class>target;\n            let baseInstance = classInstance.base;\n            if (baseInstance) {\n              target = baseInstance;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members !== null && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return assert(members.get(propertyName)); // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    let classReference = targetType.getClassOrWrapper(this.program);\n    if (classReference) {\n      do {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: i64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (ctxType.isValue) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        let type = this.resolveType(\n          assert(node.toType), // must be set if not NONNULL\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n        if (!type) return null;\n        let element = this.getElementOfType(type);\n        if (element) return element;\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_illegal_in_this_context,\n            node.range, type.toString()\n          );\n        }\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return null;\n      }\n      case AssertionKind.NONNULL: {\n        return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n        // if (!element) return null;\n        // if (element.kind == ElementKind.CLASS && (<Class>element).extends(this.program.arrayPrototype)) {\n        //   let elementType = assert((<Class>element).getTypeArgumentsTo(this.program.arrayPrototype))[0];\n        //   return this.resolveClass(this.program.readonlyArrayPrototype, [ elementType ]);\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          node.range,\n          \"Const assertion\"\n        );\n        return null;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.assertionKind) {\n      case AssertionKind.AS:\n      case AssertionKind.PREFIX: {\n        return this.resolveType(\n          assert(node.toType),\n          ctxFlow.actualFunction,\n          ctxFlow.contextualTypeArguments,\n          reportMode\n        );\n      }\n      case AssertionKind.NONNULL: {\n        let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n        return type ? type.nonNullableType : null;\n      }\n      case AssertionKind.CONST: {\n        let element = this.lookupExpression(node, ctxFlow, ctxType, reportMode);\n        if (!element) return null;\n        let type = this.getTypeOfElement(element);\n        if (!type) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n              node.range\n            );\n          }\n        }\n        return type;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.isLiteralKind(LiteralKind.INTEGER)) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        let classReference = type.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!type.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isNumericValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is common type of LHS and RHS, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        if (!leftType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n          if (overload) return overload.signature.returnType;\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.isIntegerValue) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let thisLocal = ctxFlow.lookupLocal(CommonNames.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.isInline) {\n      let superLocal = ctxFlow.lookupLocal(CommonNames.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent !== null && parent.kind == ElementKind.CLASS) {\n      let base = (<Class>parent).base;\n      if (base) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return base;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    this.currentThisExpression = node;\n    this.currentElementExpression = null;\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        return assert(intType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.FLOAT: {\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        return assert(fltType.getClassOrWrapper(this.program));\n      }\n      case LiteralKind.STRING: {\n        return this.program.stringInstance;\n      }\n      case LiteralKind.ARRAY: {\n        let classReference = ctxType.getClass();\n        if (classReference !== null && classReference.prototype == this.program.arrayPrototype) {\n          return this.getElementOfType(ctxType);\n        }\n        // otherwise infer, ignoring ctxType\n        let expressions = (<ArrayLiteralExpression>node).elementExpressions;\n        let length = expressions.length;\n        let elementType = Type.auto;\n        let numNullLiterals = 0;\n        for (let i = 0, k = length; i < k; ++i) {\n          let expression = expressions[i];\n          if (expression) {\n            if (expression.kind == NodeKind.NULL && length > 1) {\n              ++numNullLiterals;\n            } else {\n              let currentType = this.resolveExpression(expression, ctxFlow, elementType);\n              if (!currentType) return null;\n              if (elementType == Type.auto) elementType = currentType;\n              else if (currentType != elementType) {\n                let commonType = Type.commonDenominator(elementType, currentType, false);\n                if (commonType) elementType = commonType;\n                // otherwise triggers error on compilation\n              }\n            }\n          }\n        }\n        if (elementType /* still */ == Type.auto) {\n          if (numNullLiterals == length) { // all nulls infers as usize\n            elementType = this.program.options.usizeType;\n          } else {\n            this.error(\n              DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n              node.range, \"T\"\n            );\n            return null;\n          }\n        }\n        if (\n          numNullLiterals > 0 &&\n          elementType.isInternalReference\n        ) {\n          elementType = elementType.asNullable();\n        }\n        return assert(this.resolveClass(this.program.arrayPrototype, [ elementType ]));\n      }\n    }\n    assert(false);\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        // `unchecked` behaves like parenthesized\n        if (\n          functionPrototype.internalName == BuiltinNames.unchecked &&\n          node.args.length > 0\n        ) {\n          return this.resolveExpression(node.args[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, functionPrototype, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let varType = (<VariableLikeElement>target).type;\n        let varElement = this.getElementOfType(varType);\n        if (!varElement || varElement.kind != ElementKind.CLASS) {\n          break;\n        }\n        target = varElement;\n        // fall-through\n      }\n      case ElementKind.CLASS: {\n        let typeArguments = (<Class>target).getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          let signatureReference = assert(ftype.signatureReference);\n          return signatureReference.returnType;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    return assert(Type.bool.getClassOrWrapper(this.program));\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        uniqueMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS || actualParent.kind == ElementKind.INTERFACE);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments !== null && (numFunctionTypeArguments = typeArguments.length) > 0) {\n      assert(typeParameterNodes !== null && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonNames.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonNames.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      if (parameterType == Type.void) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      parameterTypes[i] = parameterType;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = classInstance!.type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classInstance = <Class>actualParent;\n        let classTypeArguments = classInstance.typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert(classInstance.prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Currently resolving classes. */\n  private resolveClassPending: Set<Class> = new Set();\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = uniqueMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Do not attempt to resolve the same class twice. This can return a class\n    // that isn't fully resolved yet, but only on deeper levels of recursion.\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Otherwise create\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    if (prototype.kind == ElementKind.INTERFACE_PROTOTYPE) {\n      instance = new Interface(nameInclTypeParamters, <InterfacePrototype>prototype, typeArguments);\n    } else {\n      instance = new Class(nameInclTypeParamters, prototype, typeArguments);\n    }\n    prototype.setResolvedInstance(instanceKey, instance);\n    var pendingClasses = this.resolveClassPending;\n    pendingClasses.add(instance);\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes !== null && typeParameterNodes.length > 0));\n    }\n    instance.contextualTypeArguments = ctxTypes;\n\n    var anyPending = false;\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    if (basePrototype) {\n      let current: ClassPrototype | null = basePrototype;\n      do {\n        if (current == prototype) {\n          this.error(\n            DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n            prototype.identifierNode.range,\n            prototype.internalName\n          );\n          return null;\n        }\n        current = current.basePrototype;\n      } while (current);\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      let base = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        uniqueMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!base) return null;\n      instance.setBase(base);\n\n      // If the base class is still pending, yield here and instead resolve any\n      // derived classes once the base class's `finishResolveClass` is done.\n      // This is guaranteed to never happen at the entry of the recursion, i.e.\n      // where `resolveClass` is called from other code.\n      if (pendingClasses.has(base)) anyPending = true;\n    }\n\n    // Resolve interfaces if applicable\n    var interfacePrototypes = prototype.interfacePrototypes;\n    if (interfacePrototypes) {\n      for (let i = 0, k = interfacePrototypes.length; i < k; ++i) {\n        let interfacePrototype = interfacePrototypes[i];\n        let current: ClassPrototype | null = interfacePrototype;\n        do {\n          if (current == prototype) {\n            this.error(\n              DiagnosticCode._0_is_referenced_directly_or_indirectly_in_its_own_base_expression,\n              prototype.identifierNode.range,\n              prototype.internalName\n            );\n            return null;\n          }\n          current = current.basePrototype;\n        } while (current);\n        let implementsNode = assert(prototype.implementsNodes![i]);\n        let iface = this.resolveClassInclTypeArguments(\n          interfacePrototype,\n          implementsNode.typeArguments,\n          prototype.parent,\n          uniqueMap(ctxTypes),\n          implementsNode,\n          reportMode\n        );\n        if (!iface) return null;\n        assert(iface.kind == ElementKind.INTERFACE);\n        instance.addInterface(<Interface>iface);\n\n        // Like above, if any implemented interface is still pending, yield\n        if (pendingClasses.has(iface)) anyPending = true;\n      }\n    }\n    if (anyPending) return instance;\n\n    // We only get here if the base class has been fully resolved already.\n    this.finishResolveClass(instance, reportMode);\n    return instance;\n  }\n\n  /** Finishes resolving the specified class. */\n  private finishResolveClass(\n    /** Class to finish resolving. */\n    instance: Class,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode\n  ): void {\n    var members = instance.members;\n    if (!members) instance.members = members = new Map();\n\n    var pendingClasses = this.resolveClassPending;\n    var unimplemented = new Map<string,DeclaredElement>();\n\n    // Alias interface members\n    var interfaces = instance.interfaces;\n    if (interfaces) {\n      for (let _values = Set_values(interfaces), i = 0, k = _values.length; i < k; ++i) {\n        let iface = _values[i];\n        assert(!pendingClasses.has(iface));\n        let ifaceMembers = iface.members;\n        if (ifaceMembers) {\n          for (let _keys = Map_keys(ifaceMembers), i = 0, k = _keys.length; i < k; ++i) {\n            let memberName = unchecked(_keys[i]);\n            let member = assert(ifaceMembers.get(memberName));\n            if (members.has(memberName)) {\n              let existing = assert(members.get(memberName));\n              if (!member.isCompatibleOverride(existing)) {\n                this.errorRelated(\n                  DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                  member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n                );\n                continue;\n              }\n            }\n            members.set(memberName, member);\n            unimplemented.set(memberName, member);\n          }\n        }\n      }\n    }\n\n    // Alias base members\n    var memoryOffset: u32 = 0;\n    var base = instance.base;\n    if (base) {\n      assert(!pendingClasses.has(base));\n      let baseMembers = base.members;\n      if (baseMembers) {\n        // TODO: for (let [baseMemberName, baseMember] of baseMembers) {\n        for (let _keys = Map_keys(baseMembers), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(baseMembers.get(memberName));\n          if (members.has(memberName)) {\n            let existing = assert(members.get(memberName));\n            if (!member.isCompatibleOverride(existing)) {\n              this.errorRelated(\n                DiagnosticCode.This_overload_signature_is_not_compatible_with_its_implementation_signature,\n                member.identifierAndSignatureRange, existing.identifierAndSignatureRange\n              );\n              continue;\n            }\n          }\n          members.set(memberName, member);\n          if (member.is(CommonFlags.ABSTRACT)) {\n            unimplemented.set(memberName, member);\n          } else {\n            unimplemented.delete(memberName);\n          }\n        }\n      }\n      memoryOffset = base.nextMemoryOffset;\n    }\n\n    // Resolve instance members\n    var prototype = instance.prototype;\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    var properties = new Array<Property>();\n    if (instanceMemberPrototypes) {\n      // TODO: for (let member of instanceMemberPrototypes.values()) {\n      for (let _values = Map_values(instanceMemberPrototypes), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        let memberName = member.name;\n        switch (member.kind) {\n\n          case ElementKind.FIELD_PROTOTYPE: {\n            let fieldPrototype = <FieldPrototype>member;\n            let fieldTypeNode = fieldPrototype.typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (base) {\n                let baseMembers = base.members;\n                if (baseMembers !== null && baseMembers.has(fieldPrototype.name)) {\n                  let baseField = assert(baseMembers.get(fieldPrototype.name));\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldPrototype.identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n              if (fieldType == Type.void) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldTypeNode.range\n                  );\n                }\n                break;\n              }\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(fieldPrototype, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(memberName, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let boundPrototype = (<PropertyPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          default: assert(false);\n        }\n        if (!member.is(CommonFlags.ABSTRACT)) {\n          unimplemented.delete(memberName);\n        }\n      }\n    }\n\n    // Check that property getters and setters match\n    for (let i = 0, k = properties.length; i < k; ++i) {\n      let property = properties[i];\n      let propertyGetter = property.getterInstance;\n      if (!propertyGetter) {\n        this.error(\n          DiagnosticCode.Property_0_only_has_a_setter_and_is_missing_a_getter,\n          property.identifierNode.range, property.name\n        );\n      } else {\n        let propertySetter = property.setterInstance;\n        if (propertySetter !== null && !propertyGetter.visibilityEquals(propertySetter)) {\n          this.errorRelated(\n            DiagnosticCode.Getter_and_setter_accessors_do_not_agree_in_visibility,\n            propertyGetter.identifierNode.range, propertySetter.identifierNode.range\n          );\n        }\n      }\n    }\n\n    if (instance.kind != ElementKind.INTERFACE) {\n\n      // Check that all required members are implemented\n      if (!instance.is(CommonFlags.ABSTRACT) && unimplemented.size > 0) {\n        for (let _keys = Map_keys(unimplemented), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = _keys[i];\n          let member = assert(unimplemented.get(memberName));\n          this.errorRelated(\n            DiagnosticCode.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2,\n            instance.identifierNode.range, member.identifierNode.range,\n            instance.internalName, memberName, member.parent.internalName\n          );\n        }\n      }\n\n      // Finalize memory offset\n      instance.nextMemoryOffset = memoryOffset;\n\n      // Link _own_ constructor if present\n      {\n        let ctorPrototype = instance.lookupInSelf(CommonNames.constructor);\n        if (ctorPrototype !== null && ctorPrototype.parent === instance) {\n          assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let ctorInstance = this.resolveFunction(\n            <FunctionPrototype>ctorPrototype,\n            null,\n            assert(instance.contextualTypeArguments),\n            reportMode\n          );\n          if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n        }\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    var overloadPrototypes = prototype.overloadPrototypes;\n    // TODO: for (let [overloadKind, overloadPrototype] of overloadPrototypes) {\n    for (let _keys = Map_keys(overloadPrototypes), i = 0, k = _keys.length; i < k; ++i) {\n      let overloadKind = unchecked(_keys[i]);\n      let overloadPrototype = assert(overloadPrototypes.get(overloadKind));\n      assert(overloadKind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          uniqueMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (overloadKind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(overloadKind)) {\n        overloads.set(overloadKind, operatorInstance);\n        if (overloadKind == OperatorKind.INDEXED_GET || overloadKind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (overloadKind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n\n    // Remove this class from pending\n    assert(pendingClasses.has(instance)); // must be pending\n    pendingClasses.delete(instance);\n\n    // Finish derived classes that we postponed in `resolveClass` due to the\n    // base class still being pending, again triggering `finishResolveClass`\n    // of any classes derived from those classes, ultimately leading to all\n    // pending classes being resolved.\n    for (let _values = Set_values(pendingClasses), i = 0, k = _values.length; i < k; ++i) {\n      let pending = _values[i];\n      let dependsOnInstance = pending.base === instance;\n      let interfaces = pending.interfaces;\n      if (interfaces) {\n        let anyPending = false;\n        for (let _values2 = Set_values(interfaces), j = 0, l = _values2.length; j < l; ++j) {\n          let iface = _values2[j];\n          if (iface === instance) dependsOnInstance = true;\n          else if (pendingClasses.has(iface)) anyPending = true;\n        }\n        if (anyPending) continue;\n      }\n      if (dependsOnInstance) this.finishResolveClass(pending, reportMode);\n    }\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length > 0) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a property prototype. */\n  resolveProperty(\n    /** The prototype of the property. */\n    prototype: PropertyPrototype,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Property | null {\n    var instance = prototype.instance;\n    if (instance) return instance;\n    prototype.instance = instance = new Property(prototype, prototype);\n    var getterPrototype = prototype.getterPrototype;\n    if (getterPrototype) {\n      let getterInstance = this.resolveFunction(\n        getterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (getterInstance) {\n        instance.getterInstance = getterInstance;\n        instance.setType(getterInstance.signature.returnType);\n      }\n    }\n    var setterPrototype = prototype.setterPrototype;\n    if (setterPrototype) {\n      let setterInstance = this.resolveFunction(\n        setterPrototype,\n        null,\n        uniqueMap<string,Type>(),\n        reportMode\n      );\n      if (setterInstance) {\n        instance.setterInstance = setterInstance;\n        if (!instance.is(CommonFlags.RESOLVED)) {\n          assert(setterInstance.signature.parameterTypes.length == 1);\n          instance.setType(setterInstance.signature.parameterTypes[0]);\n        }\n      }\n    }\n    return instance;\n  }\n}\n","/**\n * @fileoverview A concurrent code flow analyzer.\n *\n * Flows keep track of compilation state and can be queried for various\n * conditions, like whether the current branch always terminates, whether\n * a local is known to be non-null or whether an expression has possibly\n * overflown its value range.\n *\n * To accomplish this, compilation of each function begins with a clean\n * flow populated with initial local states etc. While compilation\n * progresses, statements and expressions update flow state while control\n * constructs fork, potentially add scoped locals and later merge these\n * forked branches as necessary.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global,\n  Field,\n  Class\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChildAt,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperandAt,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  uniqueMap\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow always returns. */\n  RETURNS = 1 << 0,\n  /** This flow always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow always returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow always throws. */\n  THROWS = 1 << 3,\n  /** This flow always breaks. */\n  BREAKS = 1 << 4,\n  /** This flow always continues. */\n  CONTINUES = 1 << 5,\n  /** This flow always accesses `this`. Constructors only. */\n  ACCESSES_THIS = 1 << 6,\n  /** This flow always calls `super`. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow always terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8, // Note that this doesn't cover BREAKS, which is separate\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 11,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 12,\n  /** This flow conditionally accesses `this` in a child flow. Constructors only. */\n  CONDITIONALLY_ACCESSES_THIS = 1 << 13,\n  /** This flow may return a non-this value. Constructors only. */\n  MAY_RETURN_NONTHIS = 1 << 14,\n\n  // other\n\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 15,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ACCESSES_THIS\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ACCESSES_THIS\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is initialized. */\n  INITIALIZED = 1 << 3,\n  /** Local is retained. */\n  RETAINED = 1 << 4,\n\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 5,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  NONE = 0,\n  INITIALIZED = 1 << 0\n}\n\n/** Condition kinds. */\nexport const enum ConditionKind {\n  /** Outcome of the condition is unknown */\n  UNKNOWN,\n  /** Condition is always true. */\n  TRUE,\n  /** Condition is always false. */\n  FALSE\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Creates the parent flow of the specified function. */\n  static createParent(parentFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    if (parentFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = new Flow(parentFunction);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString();\n    if (inlineFunction.is(CommonFlags.CONSTRUCTOR)) {\n      flow.initThisFieldFlags();\n    }\n    return flow;\n  }\n\n  private constructor(\n    /** Function this flow belongs to. */\n    public parentFunction: Function\n  ) {\n    /* nop */\n  }\n\n  /** Parent flow. */\n  parent: Flow | null = null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags = FlowFlags.NONE;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null = null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null = null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[] = [];\n  /** Field flags on `this`. Constructors only. */\n  thisFieldFlags: Map<Field,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null = null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null = null;\n\n  /** Tests if this is an inline flow. */\n  get isInline(): bool {\n    return this.inlineFunction !== null;\n  }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    var inlineFunction = this.inlineFunction;\n    if (inlineFunction) return inlineFunction;\n    return this.parentFunction;\n  }\n\n  /** Gets the current return type. */\n  get returnType(): Type {\n    return this.actualFunction.signature.returnType;\n  }\n\n  /** Gets the current contextual type arguments. */\n  get contextualTypeArguments(): Map<string,Type> | null {\n    return this.actualFunction.contextualTypeArguments;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(resetBreakContext: bool = false): Flow {\n    var branch = new Flow(this.parentFunction);\n    branch.parent = this;\n    if (resetBreakContext) {\n      branch.flags = this.flags & ~(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS |\n        FlowFlags.CONTINUES |\n        FlowFlags.CONDITIONALLY_CONTINUES\n      );\n    } else {\n      branch.flags = this.flags;\n      branch.continueLabel = this.continueLabel;\n      branch.breakLabel = this.breakLabel;\n    }\n    branch.localFlags = this.localFlags.slice();\n    if (this.actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n      let thisFieldFlags = assert(this.thisFieldFlags);\n      branch.thisFieldFlags = uniqueMap<Field,FieldFlags>(thisFieldFlags);\n    } else {\n      assert(!this.thisFieldFlags);\n    }\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (<u32>type.toNativeType()) {\n      case <u32>NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case <u32>NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case <u32>NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case <u32>NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case <u32>NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case <u32>NativeType.Externref: { temps = parentFunction.tempExternrefs; break; }\n      case <u32>NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps !== null && temps.length > 0) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps !== null && temps.length > 0) {\n        local = assert(temps.pop());\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++).toString(), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    local.resetTemporaryName();\n    switch (<u32>local.type.toNativeType()) {\n      case <u32>NativeType.I32: {\n        let tempI32s = parentFunction.tempI32s;\n        if (tempI32s) temps = tempI32s;\n        else parentFunction.tempI32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.I64: {\n        let tempI64s = parentFunction.tempI64s;\n        if (tempI64s) temps = tempI64s;\n        else parentFunction.tempI64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F32: {\n        let tempF32s = parentFunction.tempF32s;\n        if (tempF32s) temps = tempF32s;\n        else parentFunction.tempF32s = temps = [];\n        break;\n      }\n      case <u32>NativeType.F64: {\n        let tempF64s = parentFunction.tempF64s;\n        if (tempF64s) temps = tempF64s;\n        else parentFunction.tempF64s = temps = [];\n        break;\n      }\n      case <u32>NativeType.V128: {\n        let tempV128s = parentFunction.tempV128s;\n        if (tempV128s) temps = tempV128s;\n        else parentFunction.tempV128s = temps = [];\n        break;\n      }\n      case <u32>NativeType.Externref: {\n        let tempExternrefs = parentFunction.tempExternrefs;\n        if (tempExternrefs) temps = tempExternrefs;\n        else parentFunction.tempExternrefs = temps = [];\n        break;\n      }\n      case <u32>NativeType.Exnref: {\n        let tempExnrefs = parentFunction.tempExnrefs;\n        if (tempExnrefs) temps = tempExnrefs;\n        else parentFunction.tempExnrefs = temps = [];\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals !== null && scopedLocals.has(name)) return assert(scopedLocals.get(name));\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    scopedLocal.setTemporaryName(name);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped dummy local of the specified name. */\n  addScopedDummyLocal(name: string, type: Type): Local {\n    var scopedDummy = new Local(name, -1, type, this.parentFunction);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedDummy.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedDummy);\n    return scopedDummy;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else {\n      let existingLocal = scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees a single scoped local by its name. */\n  freeScopedDummyLocal(name: string): void {\n    var scopedLocals = assert(this.scopedLocals);\n    assert(scopedLocals.has(name));\n    let local = assert(scopedLocals.get(name));\n    assert(local.index == -1);\n    scopedLocals.delete(name);\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals) {\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(local);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    do {\n      let scope = current.scopedLocals;\n      if (scope !== null && scope.has(name)) return assert(scope.get(name));\n      current = current.parent;\n    } while (current);\n    var localsByName = this.parentFunction.localsByName;\n    if (localsByName.has(name)) return assert(localsByName.get(name));\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Initializes `this` field flags. */\n  initThisFieldFlags(): void {\n    var actualFunction = this.actualFunction;\n    assert(actualFunction.is(CommonFlags.CONSTRUCTOR));\n    var actualParent = actualFunction.parent;\n    assert(actualParent.kind == ElementKind.CLASS);\n    var actualClass = <Class>actualParent;\n    this.thisFieldFlags = new Map();\n    var members = actualClass.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = _values[i];\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          if (\n            // guaranteed by super\n            field.parent != actualClass ||\n            // has field initializer\n            field.initializerNode !== null ||\n            // is initialized as a ctor parameter\n            field.prototype.parameterIndex != -1 ||\n            // is safe to initialize with zero\n            field.type.isAny(TypeFlags.VALUE | TypeFlags.NULLABLE)\n          ) {\n            this.setThisFieldFlag(field, FieldFlags.INITIALIZED);\n          }\n        }\n      }\n    }\n  }\n\n  /** Tests if the specified `this` field has the specified flag or flags. */\n  isThisFieldFlag(field: Field, flag: FieldFlags): bool {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      return (changetype<FieldFlags>(fieldFlags.get(field)) & flag) == flag;\n    }\n    return false;\n  }\n\n  /** Sets the specified flag or flags on the given `this` field. */\n  setThisFieldFlag(field: Field, flag: FieldFlags): void {\n    var fieldFlags = this.thisFieldFlags;\n    if (fieldFlags) {\n      assert(this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n      if (fieldFlags.has(field)) {\n        let flags = changetype<FieldFlags>(fieldFlags.get(field));\n        fieldFlags.set(field, flags | flag);\n      } else {\n        fieldFlags.set(field, flag);\n      }\n    } else {\n      assert(!this.actualFunction.is(CommonFlags.CONSTRUCTOR));\n    }\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    var label = id.toString();\n    parentFunction.breakLabel = label;\n    return label;\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString();\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags of another flow into this one, i.e. a finished inner block. */\n  inherit(other: Flow): void {\n    assert(other.parentFunction == this.parentFunction);\n    assert(other.parent == this); // currently the case, but might change\n    var otherFlags = other.flags;\n\n    // respective inner flags are irrelevant if contexts differ\n    if (this.breakLabel != other.breakLabel) {\n      if (otherFlags & (FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        otherFlags &= ~FlowFlags.TERMINATES;\n      }\n      otherFlags &= ~(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (this.continueLabel != other.continueLabel) {\n      otherFlags &= ~(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n\n    this.flags = this.flags | otherFlags; // what happens before is still true\n    this.localFlags = other.localFlags;\n    this.thisFieldFlags = other.thisFieldFlags;\n  }\n\n  /** Inherits flags of a conditional branch joining again with this one, i.e. then without else. */\n  inheritBranch(other: Flow, conditionKind: ConditionKind = ConditionKind.UNKNOWN): void {\n    assert(other.parentFunction == this.parentFunction);\n    switch (conditionKind) {\n      case ConditionKind.TRUE: this.inherit(other); // always executes\n      case ConditionKind.FALSE: return;             // never executes\n    }\n\n    // Note that flags in `this` flow have already happened. For instance,\n    // a return cannot be undone no matter what'd happen in subsequent branches,\n    // but an allocation, which doesn't terminate, can become conditional. Not\n    // all flags have a corresponding conditional flag that's tracked.\n\n    var thisFlags = this.flags;\n    var otherFlags = other.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (thisFlags & FlowFlags.RETURNS) { // nothing can change that\n      newFlags |= FlowFlags.RETURNS;\n    } else if (otherFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_WRAPPED;\n    newFlags |= thisFlags & otherFlags & FlowFlags.RETURNS_NONNULL;\n\n    if (thisFlags & FlowFlags.THROWS) { // nothing can change that\n      newFlags |= FlowFlags.THROWS;\n    } else if (otherFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (thisFlags & FlowFlags.BREAKS) { // nothing can change that\n      newFlags |= FlowFlags.BREAKS;\n    } else if (other.breakLabel == this.breakLabel) {\n      if (otherFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (thisFlags & FlowFlags.CONTINUES) { // nothing can change that\n      newFlags |= FlowFlags.CONTINUES;\n    } else if (other.continueLabel === this.continueLabel) {\n      if (otherFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else {\n      newFlags |= thisFlags & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (thisFlags & FlowFlags.ACCESSES_THIS) { // can become conditional\n      if (otherFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (otherFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    // may be the case in any\n    newFlags |= (thisFlags | otherFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    // must be the case in both\n    newFlags |= thisFlags & otherFlags & FlowFlags.CALLS_SUPER;\n\n    if (thisFlags & FlowFlags.TERMINATES) { // nothing can change that\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (thisFlags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    var numThisLocalFlags = thisLocalFlags.length;\n    var otherLocalFlags = other.localFlags;\n    var numOtherLocalFlags = otherLocalFlags.length;\n    var maxLocalFlags = max(numThisLocalFlags, numOtherLocalFlags);\n    for (let i = 0; i < maxLocalFlags; ++i) {\n      let thisFlags = i < numThisLocalFlags ? thisLocalFlags[i] : 0;\n      let otherFlags = i < numOtherLocalFlags ? otherLocalFlags[i] : 0;\n      let newFlags = thisFlags & otherFlags & (\n        LocalFlags.CONSTANT  |\n        LocalFlags.WRAPPED   |\n        LocalFlags.NONNULL   |\n        LocalFlags.INITIALIZED\n      );\n      if (thisFlags & LocalFlags.RETAINED) {\n        if (otherFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.RETAINED;\n        } else {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        }\n      } else if (otherFlags & LocalFlags.RETAINED) {\n        newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n      } else {\n        newFlags |= (thisFlags | otherFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n      }\n      thisLocalFlags[i] = newFlags;\n    }\n\n    // field flags do not matter here since there's only INITIALIZED, which can\n    // only be set if it has been observed prior to entering the branch.\n  }\n\n  /** Inherits mutual flags of two alternate branches becoming this one, i.e. then with else. */\n  inheritMutual(left: Flow, right: Flow): void {\n    assert(left.parentFunction == right.parentFunction);\n    assert(left.parentFunction == this.parentFunction);\n    // This differs from the previous method in that no flags are guaranteed\n    // to happen unless it is the case in both flows.\n\n    var leftFlags = left.flags;\n    var rightFlags = right.flags;\n    var newFlags = FlowFlags.NONE;\n\n    if (leftFlags & FlowFlags.RETURNS) {\n      if (rightFlags & FlowFlags.RETURNS) {\n        newFlags |= FlowFlags.RETURNS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n      }\n    } else if (rightFlags & FlowFlags.RETURNS) {\n      newFlags |= FlowFlags.CONDITIONALLY_RETURNS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_RETURNS;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_WRAPPED) && (rightFlags & FlowFlags.RETURNS_WRAPPED)) {\n      newFlags |= FlowFlags.RETURNS_WRAPPED;\n    }\n\n    if ((leftFlags & FlowFlags.RETURNS_NONNULL) && (rightFlags & FlowFlags.RETURNS_NONNULL)) {\n      newFlags |= FlowFlags.RETURNS_NONNULL;\n    }\n\n    if (leftFlags & FlowFlags.THROWS) {\n      if (rightFlags & FlowFlags.THROWS) {\n        newFlags |= FlowFlags.THROWS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n      }\n    } else if (rightFlags & FlowFlags.THROWS) {\n      newFlags |= FlowFlags.CONDITIONALLY_THROWS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_THROWS;\n    }\n\n    if (leftFlags & FlowFlags.BREAKS) {\n      if (rightFlags & FlowFlags.BREAKS) {\n        newFlags |= FlowFlags.BREAKS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n      }\n    } else if (rightFlags & FlowFlags.BREAKS) {\n      newFlags |= FlowFlags.CONDITIONALLY_BREAKS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_BREAKS;\n    }\n\n    if (leftFlags & FlowFlags.CONTINUES) {\n      if (rightFlags & FlowFlags.CONTINUES) {\n        newFlags |= FlowFlags.CONTINUES;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n      }\n    } else if (rightFlags & FlowFlags.CONTINUES) {\n      newFlags |= FlowFlags.CONDITIONALLY_CONTINUES;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_CONTINUES;\n    }\n\n    if (leftFlags & FlowFlags.ACCESSES_THIS) {\n      if (rightFlags & FlowFlags.ACCESSES_THIS) {\n        newFlags |= FlowFlags.ACCESSES_THIS;\n      } else {\n        newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n      }\n    } else if (rightFlags & FlowFlags.ACCESSES_THIS) {\n      newFlags |= FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    } else {\n      newFlags |= (leftFlags | rightFlags) & FlowFlags.CONDITIONALLY_ACCESSES_THIS;\n    }\n\n    newFlags |= (leftFlags | rightFlags) & FlowFlags.MAY_RETURN_NONTHIS;\n\n    if ((leftFlags & FlowFlags.CALLS_SUPER) && (rightFlags & FlowFlags.CALLS_SUPER)) {\n      newFlags |= FlowFlags.CALLS_SUPER;\n    }\n\n    if ((leftFlags & FlowFlags.TERMINATES) && (rightFlags & FlowFlags.TERMINATES)) {\n      newFlags |= FlowFlags.TERMINATES;\n    }\n\n    this.flags = newFlags | (this.flags & FlowFlags.UNCHECKED_CONTEXT);\n\n    // local flags\n    var thisLocalFlags = this.localFlags;\n    if (leftFlags & FlowFlags.TERMINATES) {\n      if (!(rightFlags & FlowFlags.TERMINATES)) {\n        let rightLocalFlags = right.localFlags;\n        for (let i = 0, k = rightLocalFlags.length; i < k; ++i) {\n          thisLocalFlags[i] = rightLocalFlags[i];\n        }\n      }\n    } else if (rightFlags & FlowFlags.TERMINATES) {\n      let leftLocalFlags = left.localFlags;\n      for (let i = 0, k = leftLocalFlags.length; i < k; ++i) {\n        thisLocalFlags[i] = leftLocalFlags[i];\n      }\n    } else {\n      let leftLocalFlags = left.localFlags;\n      let numLeftLocalFlags = leftLocalFlags.length;\n      let rightLocalFlags = right.localFlags;\n      let numRightLocalFlags = rightLocalFlags.length;\n      let maxLocalFlags = max(numLeftLocalFlags, numRightLocalFlags);\n      for (let i = 0; i < maxLocalFlags; ++i) {\n        let leftFlags = i < numLeftLocalFlags ? leftLocalFlags[i] : 0;\n        let rightFlags = i < numRightLocalFlags ? rightLocalFlags[i] : 0;\n        let newFlags = leftFlags & rightFlags & (\n          LocalFlags.CONSTANT  |\n          LocalFlags.WRAPPED   |\n          LocalFlags.NONNULL   |\n          LocalFlags.INITIALIZED\n        );\n        if (leftFlags & LocalFlags.RETAINED) {\n          if (rightFlags & LocalFlags.RETAINED) {\n            newFlags |= LocalFlags.RETAINED;\n          } else {\n            newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n          }\n        } else if (rightFlags & LocalFlags.RETAINED) {\n          newFlags |= LocalFlags.CONDITIONALLY_RETAINED;\n        } else {\n          newFlags |= (leftFlags | rightFlags) & LocalFlags.CONDITIONALLY_RETAINED;\n        }\n        thisLocalFlags[i] = newFlags;\n      }\n    }\n\n    // field flags (currently only INITIALIZED, so can simplify)\n    var leftFieldFlags = left.thisFieldFlags;\n    if (leftFieldFlags) {\n      let newFieldFlags = new Map<Field,FieldFlags>();\n      let rightFieldFlags = assert(right.thisFieldFlags);\n      for (let _keys = Map_keys(leftFieldFlags), i = 0, k = _keys.length; i < k; ++i) {\n        let key = _keys[i];\n        let leftFlags = changetype<FieldFlags>(leftFieldFlags.get(key));\n        if (\n          (leftFlags & FieldFlags.INITIALIZED) != 0 && rightFieldFlags.has(key) && \n          (changetype<FieldFlags>(rightFieldFlags.get(key)) & FieldFlags.INITIALIZED)\n        ) {\n          newFieldFlags.set(key, FieldFlags.INITIALIZED);\n        }\n      }\n      this.thisFieldFlags = newFieldFlags;\n    } else {\n      assert(!right.thisFieldFlags);\n    }\n  }\n\n  /** Tests if the specified flows have differing local states. */\n  static hasIncompatibleLocalStates(before: Flow, after: Flow): bool {\n    var numThisLocalFlags = before.localFlags.length;\n    var numOtherLocalFlags = after.localFlags.length;\n    var parentFunction = before.parentFunction;\n    assert(parentFunction === after.parentFunction);\n    var localsByIndex = parentFunction.localsByIndex;\n    assert(localsByIndex === after.parentFunction.localsByIndex);\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      let local = localsByIndex[i];\n      let type = local.type;\n      if (type.isShortIntegerValue) {\n        if (before.isLocalFlag(i, LocalFlags.WRAPPED) && !after.isLocalFlag(i, LocalFlags.WRAPPED)) {\n          return true;\n        }\n      }\n      if (type.isNullableReference) {\n        if (before.isLocalFlag(i, LocalFlags.NONNULL) && !after.isLocalFlag(i, LocalFlags.NONNULL)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.isNullableReference) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.isNullableReference || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(\n    /** Expression being true. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n\n    // The iff argument is useful in situations like\n    //\n    //  if (!ref) {\n    //    ref = new Ref();\n    //  }\n    //  // inheritNonnullIfFalse(`!ref`, thenFlow) -> ref != null\n    //\n\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        this.inheritNonnullIfTrue(getLocalSetValue(expr), iff); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        if (!iff || iff.isLocalFlag(local.index, LocalFlags.NONNULL)) {\n          this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr), iff);\n            this.inheritNonnullIfTrue(getIfTrue(expr), iff);\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr), iff); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        if (name == program.retainInstance.internalName) {\n          // __retain just passes through the argument\n          this.inheritNonnullIfTrue(getCallOperandAt(expr, 0), iff);\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(\n    /** Expression being false. */\n    expr: ExpressionRef,\n    /** If specified, only set the flag if also nonnull in this flow. */\n    iff: Flow | null = null\n  ): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr), iff); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr), iff);\n            this.inheritNonnullIfFalse(getIfFalse(expr), iff);\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right, iff); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left, iff); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right, iff); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left, iff); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.isShortIntegerValue) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow((<Global>global).type, type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.isSignedIntegerValue\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) &&\n                !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (<u32>getExpressionType(expr)) {\n          case <u32>NativeType.I32: { value = getConstValueI32(expr); break; }\n          case <u32>NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case <u32>NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case <u32>NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < <i32>i8.MIN_VALUE || value > <i32>i8.MAX_VALUE;\n          case TypeKind.I16: return value < <i32>i16.MIN_VALUE || value > <i32>i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > <i32>u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > <i32>u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChildAt(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = assert(instancesByName.get(instanceName));\n          assert(instance.kind == ElementKind.FUNCTION);\n          let functionInstance = <Function>instance;\n          let returnType = functionInstance.signature.returnType;\n          return !functionInstance.flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    var sb = new Array<string>();\n    if (this.is(FlowFlags.RETURNS)) sb.push(\"RETURNS\");\n    if (this.is(FlowFlags.RETURNS_WRAPPED)) sb.push(\"RETURNS_WRAPPED\");\n    if (this.is(FlowFlags.RETURNS_NONNULL)) sb.push(\"RETURNS_NONNULL\");\n    if (this.is(FlowFlags.THROWS)) sb.push(\"THROWS\");\n    if (this.is(FlowFlags.BREAKS)) sb.push(\"BREAKS\");\n    if (this.is(FlowFlags.CONTINUES)) sb.push(\"CONTINUES\");\n    if (this.is(FlowFlags.ACCESSES_THIS)) sb.push(\"ACCESSES_THIS\");\n    if (this.is(FlowFlags.CALLS_SUPER)) sb.push(\"CALLS_SUPER\");\n    if (this.is(FlowFlags.TERMINATES)) sb.push(\"TERMINATES\");\n    if (this.is(FlowFlags.CONDITIONALLY_RETURNS)) sb.push(\"CONDITIONALLY_RETURNS\");\n    if (this.is(FlowFlags.CONDITIONALLY_THROWS)) sb.push(\"CONDITIONALLY_THROWS\");\n    if (this.is(FlowFlags.CONDITIONALLY_BREAKS)) sb.push(\"CONDITIONALLY_BREAKS\");\n    if (this.is(FlowFlags.CONDITIONALLY_CONTINUES)) sb.push(\"CONDITIONALLY_CONTINUES\");\n    if (this.is(FlowFlags.CONDITIONALLY_ACCESSES_THIS)) sb.push(\"CONDITIONALLY_ACCESSES_THIS\");\n    if (this.is(FlowFlags.MAY_RETURN_NONTHIS)) sb.push(\"MAY_RETURN_NONTHIS\");\n    return \"Flow(\" + this.actualFunction.toString() + \")[\" + levels.toString() + \"] \" + sb.join(\" \");\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return toType.isShortIntegerValue && (\n    !fromType.isIntegerValue ||                                    // i.e. float to small int\n    fromType.size > toType.size ||                                 // larger int to small int\n    fromType.isSignedIntegerValue != toType.isSignedIntegerValue   // signedness mismatch\n  );\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set<i32>()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * @fileoverview Built-in elements providing core WebAssembly functionality.\n *\n * Each builtin is linked to its definition in std/assembly/builtins.ts.\n * When its prototype is called, the compiler recognizes the `@builtin`\n * decorator, looks up the respective handler in the global builtins map\n * and executes it, with the handler directly emitting WebAssembly code\n * according to context.\n *\n * Builtins can be categorized into core builtins that typically are generic\n * and emit code directly and aliases calling core builtins with overridden\n * contexts. The latter is used by inline assembler aliases of WebAssembly\n * instructions, like `i64.load8_u` deferring to `<i64>load<u8>`.\n *\n * The `contextIsExact` modifier is used to force a specific instruction\n * family. A `i32.store8` deferring to `<i32>store<i8>` for example is\n * ambiguous in that the input can still be an i32 or an i64, leading to\n * either an `i32.store8` or an `i64.store8`, so `i32` is forced there.\n * This behavior is indicated by `from i32/i64` in the comments below.\n *\n * @license Apache-2.0\n */\n\n// TODO: Add builtins for `i32.add` etc. that do not have a core builtin.\n\nimport {\n  Compiler,\n  Constraints,\n  RuntimeFeatures\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticCategory\n} from \"./diagnostics\";\n\nimport {\n  Expression,\n  LiteralKind,\n  StringLiteralExpression,\n  CallExpression,\n  NodeKind,\n  LiteralExpression,\n  ArrayLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  createType,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element,\n  ClassPrototype,\n  Class\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Internal names of various compiler built-ins. */\nexport namespace BuiltinNames {\n\n  // compiler-generated\n  export const start = \"~start\";\n  export const started = \"~started\";\n  export const argumentsLength = \"~argumentsLength\";\n  export const setArgumentsLength = \"~setArgumentsLength\";\n\n  // std/builtins.ts\n  export const abort = \"~lib/builtins/abort\";\n  export const trace = \"~lib/builtins/trace\";\n  export const seed = \"~lib/builtins/seed\";\n\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_bitmask = \"~lib/builtins/v128.bitmask\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_pmin = \"~lib/builtins/v128.pmin\";\n  export const v128_pmax = \"~lib/builtins/v128.pmax\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_avgr = \"~lib/builtins/v128.avgr\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_ceil = \"~lib/builtins/v128.ceil\";\n  export const v128_floor = \"~lib/builtins/v128.floor\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n  export const v128_nearest = \"~lib/builtins/v128.nearest\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_avgr_u = \"~lib/builtins/i8x16.avgr_u\";\n  export const i8x16_abs = \"~lib/builtins/i8x16.abs\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_bitmask = \"~lib/builtins/i8x16.bitmask\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_avgr_u = \"~lib/builtins/i16x8.avgr_u\";\n  export const i16x8_abs = \"~lib/builtins/i16x8.abs\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_bitmask = \"~lib/builtins/i16x8.bitmask\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_abs = \"~lib/builtins/i32x4.abs\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_bitmask = \"~lib/builtins/i32x4.bitmask\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_pmin = \"~lib/builtins/f32x4.pmin\";\n  export const f32x4_pmax = \"~lib/builtins/f32x4.pmax\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_ceil = \"~lib/builtins/f32x4.ceil\";\n  export const f32x4_floor = \"~lib/builtins/f32x4.floor\";\n  export const f32x4_trunc = \"~lib/builtins/f32x4.trunc\";\n  export const f32x4_nearest = \"~lib/builtins/f32x4.nearest\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_pmin = \"~lib/builtins/f64x2.pmin\";\n  export const f64x2_pmax = \"~lib/builtins/f64x2.pmax\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_ceil = \"~lib/builtins/f64x2.ceil\";\n  export const f64x2_floor = \"~lib/builtins/f64x2.floor\";\n  export const f64x2_trunc = \"~lib/builtins/f64x2.trunc\";\n  export const f64x2_nearest = \"~lib/builtins/f64x2.nearest\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/function.ts\n  export const Function = \"~lib/function/Function\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_data = \"~lib/memory/memory.data\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // std/bindings/wasi.ts\n  export const wasiAbort = \"~lib/wasi/index/abort\";\n  export const wasiTrace = \"~lib/wasi/index/trace\";\n  export const wasiSeed = \"~lib/wasi/index/seed\";\n}\n\n/** Builtin compilation context. */\nexport class BuiltinContext {\n  constructor(\n    /** Compiler reference. */\n    public compiler: Compiler,\n    /** Prototype being called. */\n    public prototype: FunctionPrototype,\n    /** Provided type arguments. */\n    public typeArguments: Type[] | null,\n    /** Provided operands. */\n    public operands: Expression[],\n    /** Provided this operand, if any. */\n    public thisOperand: Expression | null,\n    /** Contextual type. */\n    public contextualType: Type,\n    /** Respective call expression. */\n    public reportNode: CallExpression,\n    /** Whether originating from inline assembly. */\n    public contextIsExact: bool\n  ) {}\n}\n\n/** Global builtins map. */\nexport const builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n/** Function builtins map. */\nexport const function_builtins = new Map<string,(ctx: BuiltinContext) => ExpressionRef>();\n\n// === Static type evaluation =================================================================\n\n// isInteger<T!>() / isInteger<T?>(value: T) -> bool\nfunction builtin_isInteger(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isInteger, builtin_isInteger);\n\n// isFloat<T!>() / isFloat<T?>(value: T) -> bool\nfunction builtin_isFloat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFloatValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFloat, builtin_isFloat);\n\n// isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\nfunction builtin_isBoolean(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isBooleanValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isBoolean, builtin_isBoolean);\n\n// isSigned<T!>() / isSigned<T?>(value: T) -> bool\nfunction builtin_isSigned(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isSignedIntegerValue ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isSigned, builtin_isSigned);\n\n// isReference<T!>() / isReference<T?>(value: T) -> bool\nfunction builtin_isReference(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isReference, builtin_isReference);\n\n// isString<T!>() / isString<T?>(value: T) -> bool\nfunction builtin_isString(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isAssignableTo(compiler.program.stringInstance)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isString, builtin_isString);\n\n// isArray<T!>() / isArray<T?>(value: T) -> bool\nfunction builtin_isArray(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.extends(compiler.program.arrayPrototype)\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArray, builtin_isArray);\n\n// isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\nfunction builtin_isArrayLike(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  var classReference = type.getClass();\n  return module.i32(\n    classReference !== null && classReference.isArrayLike\n      ? 1\n      : 0\n  );\n}\nbuiltins.set(BuiltinNames.isArrayLike, builtin_isArrayLike);\n\n// isFunction<T!> / isFunction<T?>(value: T) -> bool\nfunction builtin_isFunction(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isFunction ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isFunction, builtin_isFunction);\n\n// isNullable<T!> / isNullable<T?>(value: T) -> bool\nfunction builtin_isNullable(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isNullableReference ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isNullable, builtin_isNullable);\n\n// isDefined(expression) -> bool\nfunction builtin_isDefined(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var element = compiler.resolver.lookupExpression(\n    ctx.operands[0],\n    compiler.currentFlow,\n    Type.auto,\n    ReportMode.SWALLOW\n  );\n  return module.i32(element !== null ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isDefined, builtin_isDefined);\n\n// isConstant(expression) -> bool\nfunction builtin_isConstant(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.bool;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var expr = compiler.compileExpression(ctx.operands[0], Type.auto);\n  compiler.currentType = Type.bool;\n  return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isConstant, builtin_isConstant);\n\n// isManaged<T!>() -> bool\nfunction builtin_isManaged(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.isManaged ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isManaged, builtin_isManaged);\n\n// isVoid<T!>() -> bool\nfunction builtin_isVoid(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.bool;\n  if (!type) return module.unreachable();\n  return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n}\nbuiltins.set(BuiltinNames.isVoid, builtin_isVoid);\n\n// lengthof<T!>() -> i32\nfunction builtin_lengthof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.i32;\n  if (!type) return module.unreachable();\n  var signatureReference = type.signatureReference;\n  if (!signatureReference) {\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_call_signatures,\n      ctx.reportNode.range, type.toString()\n    );\n    return module.unreachable();\n  }\n  return module.i32(signatureReference.parameterTypes.length);\n}\nbuiltins.set(BuiltinNames.lengthof, builtin_lengthof);\n\n// sizeof<T!>() -> usize*\nfunction builtin_sizeof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!byteSize) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(byteSize), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.sizeof, builtin_sizeof);\n\n// alignof<T!>() -> usize*\nfunction builtin_alignof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  var type = ctx.typeArguments![0];\n  var byteSize = type.byteSize;\n  if (!isPowerOf2(byteSize)) { // implies == 0\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"alignof\", type.toString()\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(ctz<i32>(byteSize)), ctx.contextualType);\n}\nbuiltins.set(BuiltinNames.alignof, builtin_alignof);\n\n// offsetof<T!>(fieldName?: string) -> usize*\nfunction builtin_offsetof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = compiler.options.usizeType;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 0, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var type = ctx.typeArguments![0];\n  var classReference = type.getClassOrWrapper(compiler.program);\n  if (!classReference) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n    );\n    if (compiler.options.isWasm64) {\n      if (contextualType.isIntegerValue && contextualType.size <= 32) {\n        compiler.currentType = Type.u32;\n      }\n    } else {\n      if (contextualType.isIntegerValue && contextualType.size == 64) {\n        compiler.currentType = Type.u64;\n      }\n    }\n    return module.unreachable();\n  }\n  if (operands.length) {\n    let firstOperand = operands[0];\n    if (!firstOperand.isLiteralKind(LiteralKind.STRING)) {\n      compiler.error(\n        DiagnosticCode.String_literal_expected,\n        operands[0].range\n      );\n      return module.unreachable();\n    }\n    let fieldName = (<StringLiteralExpression>firstOperand).value;\n    let classMembers = classReference.members;\n    if (classMembers !== null && classMembers.has(fieldName)) {\n      let member = assert(classMembers.get(fieldName));\n      if (member.kind == ElementKind.FIELD) {\n        return contextualUsize(compiler, i64_new((<Field>member).memoryOffset), contextualType);\n      }\n    }\n    compiler.error(\n      DiagnosticCode.Type_0_has_no_property_1,\n      firstOperand.range, classReference.internalName, fieldName\n    );\n    return module.unreachable();\n  }\n  return contextualUsize(compiler, i64_new(classReference.nextMemoryOffset), contextualType);\n}\nbuiltins.set(BuiltinNames.offsetof, builtin_offsetof);\n\n// nameof<T> -> string\nfunction builtin_nameof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var resultType = evaluateConstantType(ctx);\n  if (!resultType) {\n    compiler.currentType = compiler.program.stringInstance.type;\n    return module.unreachable();\n  }\n  var value: string;\n  if (resultType.isReference) {\n    let classReference = resultType.getClass();\n    if (classReference) {\n      value = classReference.name;\n    } else {\n      let signatureReference = resultType.getSignature();\n      if (signatureReference) {\n        value = \"Function\";\n      } else {\n        assert(resultType.isExternalReference);\n        value = \"Externref\";\n      }\n    }\n  } else {\n    switch (resultType.kind) {\n      case TypeKind.BOOL: { value = \"bool\"; break; }\n      case TypeKind.I8: { value = \"i8\"; break; }\n      case TypeKind.U8: { value = \"u8\"; break; }\n      case TypeKind.I16: { value = \"i16\"; break; }\n      case TypeKind.U16: { value = \"u16\"; break; }\n      case TypeKind.I32: { value = \"i32\"; break; }\n      case TypeKind.U32: { value = \"u32\"; break; }\n      case TypeKind.F32: { value = \"f32\"; break; }\n      case TypeKind.I64: { value = \"i64\"; break; }\n      case TypeKind.U64: { value = \"u64\"; break; }\n      case TypeKind.F64: { value = \"f64\"; break; }\n      case TypeKind.ISIZE: { value = \"isize\"; break; }\n      case TypeKind.USIZE: { value = \"usize\"; break; }\n      case TypeKind.V128: { value = \"v128\"; break; }\n      case TypeKind.EXTERNREF: { value = \"externref\"; break; }\n      default: assert(false);\n      case TypeKind.VOID: { value = \"void\"; break; }\n    }\n  }\n  return compiler.ensureStaticString(value);\n}\nbuiltins.set(BuiltinNames.nameof, builtin_nameof);\n\n// idof<T> -> u32\nfunction builtin_idof(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var type = evaluateConstantType(ctx);\n  compiler.currentType = Type.u32;\n  if (!type) return module.unreachable();\n  let signatureReference = type.getSignature();\n  if (signatureReference) {\n    return module.i32(signatureReference.id);\n  }\n  let classReference = type.getClassOrWrapper(compiler.program);\n  if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n    return module.i32(classReference.id);\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"idof\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.idof, builtin_idof);\n\n// === Math ===================================================================================\n\n// clz<T?>(value: T) -> T\nfunction builtin_clz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(ctx.operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(ctx.operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ClzI64\n            : UnaryOp.ClzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"clz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.clz, builtin_clz);\n\n// ctz<T?>(value: T) -> T\nfunction builtin_ctz(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.CtzI64\n            : UnaryOp.CtzI32,\n          arg0\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ctz\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ctz, builtin_ctz);\n\n// popcnt<T?>(value: T) -> T\nfunction builtin_popcnt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (compiler.currentType.kind) {\n      case TypeKind.BOOL: // not wrapped\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.PopcntI64\n            : UnaryOp.PopcntI32,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.popcnt, builtin_popcnt);\n\n// rotl<T?>(value: T, shift: T) -> T\nfunction builtin_rotl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotlI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotlI64\n            : BinaryOp.RotlI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotl, builtin_rotl);\n\n// rotr<T?>(value: T, shift: T) -> T\nfunction builtin_rotr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        return compiler.ensureSmallIntegerWrap(\n          module.binary(BinaryOp.RotrI32, arg0, arg1),\n          type\n        );\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n      case TypeKind.USIZE:\n      case TypeKind.ISIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.RotrI64\n            : BinaryOp.RotrI32,\n          arg0, arg1\n        );\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"rotr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.rotr, builtin_rotr);\n\n// abs<T?>(value: T) -> T\nfunction builtin_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: {\n        let flow = compiler.currentFlow;\n\n        // possibly overflows, e.g. abs<i8>(-128) == 128\n        let temp1 = flow.getTempLocal(Type.i32);\n        let temp2 = flow.getTempLocal(Type.i32);\n        // (x + (x >> 31)) ^ (x >> 31)\n        let ret = module.binary(BinaryOp.XorI32,\n          module.binary(BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I32)\n          ),\n          module.local_get(temp2.index, NativeType.I32)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.ISIZE: {\n        let options = compiler.options;\n        let flow = compiler.currentFlow;\n        let isWasm64 = options.isWasm64;\n\n        let temp1 = flow.getTempLocal(options.usizeType);\n        let temp2 = flow.getTempLocal(options.usizeType);\n        let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n          module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n            module.local_tee(\n              temp2.index,\n              module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                module.local_tee(temp1.index, arg0),\n                isWasm64 ? module.i64(63) : module.i32(31)\n              )\n            ),\n            module.local_get(temp1.index, options.nativeSizeType)\n          ),\n          module.local_get(temp2.index, options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.I64: {\n        let flow = compiler.currentFlow;\n\n        let temp1 = flow.getTempLocal(Type.i64);\n        let temp2 = flow.getTempLocal(Type.i64);\n        // (x + (x >> 63)) ^ (x >> 63)\n        let ret = module.binary(BinaryOp.XorI64,\n          module.binary(BinaryOp.AddI64,\n            module.local_tee(\n              temp2.index,\n              module.binary(BinaryOp.ShrI64,\n                module.local_tee(temp1.index, arg0),\n                module.i64(63)\n              )\n            ),\n            module.local_get(temp1.index, NativeType.I64)\n          ),\n          module.local_get(temp2.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp2);\n        flow.freeTempLocal(temp1);\n        return ret;\n      }\n      case TypeKind.USIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.abs, builtin_abs);\n\n// max<T?>(left: T, right: T) -> T\nfunction builtin_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n      case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n      case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtI64\n          : BinaryOp.GtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.GtU64\n          : BinaryOp.GtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.max, builtin_max);\n\n// min<T?>(left: T, right: T) -> T\nfunction builtin_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var left = operands[0];\n  var arg0 = typeArguments\n    ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1: ExpressionRef;\n    if (!typeArguments && left.isNumericLiteral) { // prefer right type\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n      if (compiler.currentType != type) {\n        arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      }\n    } else {\n      arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n    }\n    let op: BinaryOp = -1;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n      case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n      case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n      case TypeKind.ISIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtI64\n          : BinaryOp.LtI32;\n        break;\n      }\n      case TypeKind.USIZE: {\n        op = compiler.options.isWasm64\n          ? BinaryOp.LtU64\n          : BinaryOp.LtU32;\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n    }\n    if (op != -1) {\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let temp1 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n      let temp2 = flow.getTempLocal(type);\n      flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n      let ret = module.select(\n        module.local_tee(temp1.index, arg0),\n        module.local_tee(temp2.index, arg1),\n        module.binary(op,\n          module.local_get(temp1.index, nativeType),\n          module.local_get(temp2.index, nativeType)\n        )\n      );\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.min, builtin_min);\n\n// ceil<T?>(value: T) -> T\nfunction builtin_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.ceil, builtin_ceil);\n\n// floor<T?>(value: T) -> T\nfunction builtin_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered rounded\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.floor, builtin_floor);\n\n// copysign<T?>(left: T, right: T) -> T\nfunction builtin_copysign(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      // TODO: does an integer version make sense?\n      case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"copysign\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.copysign, builtin_copysign);\n\n// nearest<T?>(value: T) -> T\nfunction builtin_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.nearest, builtin_nearest);\n\n// reinterpret<T!>(value: *) -> T\nfunction builtin_reinterpret(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF32, arg0);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = type;\n        return module.unary(UnaryOp.ReinterpretF64, arg0);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let arg0 = compiler.compileExpression(operands[0],\n          compiler.options.isWasm64\n            ? Type.f64\n            : Type.f32,\n          Constraints.CONV_IMPLICIT\n        );\n        compiler.currentType = type;\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.ReinterpretF64\n            : UnaryOp.ReinterpretF32,\n          arg0\n        );\n      }\n      case TypeKind.F32: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f32;\n        return module.unary(UnaryOp.ReinterpretI32, arg0);\n      }\n      case TypeKind.F64: {\n        let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n        compiler.currentType = Type.f64;\n        return module.unary(UnaryOp.ReinterpretI64, arg0);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.reinterpret, builtin_reinterpret);\n\n// sqrt<T?>(value: T) -> T\nfunction builtin_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      // TODO: integer versions (that return f64 or convert)?\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.sqrt, builtin_sqrt);\n\n// trunc<T?>(value: T) -> T\nfunction builtin_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n  var type = compiler.currentType;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.BOOL: return arg0; // considered truncated\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.trunc, builtin_trunc);\n\n// isNaN<T?>(value: T) -> bool\nfunction builtin_isNaN(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // never NaN\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(0));\n      }\n      // (t = arg0) != t\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF32,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.NeF32,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.NeF64,\n            arg0,\n            module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.NeF64,\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isNaN, builtin_isNaN);\n\n// isFinite<T?>(value: T) -> bool\nfunction builtin_isFinite(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      // always finite\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE: {\n        return module.maybeDropCondition(arg0, module.i32(1));\n      }\n      // (t = arg0) - t == 0\n      case TypeKind.F32: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF32,\n            module.binary(BinaryOp.SubF32,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n            ),\n            module.f32(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.EqF32,\n          module.binary(BinaryOp.SubF32,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F32)\n          ),\n          module.f32(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n          return module.binary(BinaryOp.EqF64,\n            module.binary(BinaryOp.SubF64,\n              arg0,\n              module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n            ),\n            module.f64(0)\n          );\n        }\n        let flow = compiler.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.EqF64,\n          module.binary(BinaryOp.SubF64,\n            module.local_tee(temp.index, arg0),\n            module.local_get(temp.index, NativeType.F64)\n          ),\n          module.f64(0)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.isFinite, builtin_isFinite);\n\n// === Memory access ==========================================================================\n\n// load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\nfunction builtin_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    contextualType != Type.auto &&\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = outType;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = outType;\n  return module.load(\n    type.byteSize,\n    type.isSignedIntegerValue,\n    arg0,\n    outType.toNativeType(),\n    immOffset,\n    immAlign\n  );\n}\nbuiltins.set(BuiltinNames.load, builtin_load);\n\n// store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\nfunction builtin_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 3) {\n    immOffset = evaluateImmediateOffset(operands[2], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.void;\n      return module.unreachable();\n    }\n    if (numOperands == 4) {\n      immAlign = evaluateImmediateAlign(operands[3], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.void;\n  return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n}\nbuiltins.set(BuiltinNames.store, builtin_store);\n\n// === Atomics ================================================================================\n\n// atomic.load<T!>(offset: usize, immOffset?: usize) -> T*\nfunction builtin_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  var outType = (\n    type.isIntegerValue &&\n    contextualType.isIntegerValue &&\n    contextualType.size > type.size\n  ) ? contextualType : type;\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n    );\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = outType;\n    return module.unreachable();\n  }\n  compiler.currentType = outType;\n  return module.atomic_load(\n    type.byteSize,\n    arg0,\n    outType.toNativeType(),\n    immOffset\n  );\n}\nbuiltins.set(BuiltinNames.atomic_load, builtin_atomic_load);\n\n// atomic.store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\nfunction builtin_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n    );\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(\n        operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue|| // float to int\n      inType.size < type.size  // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  compiler.currentType = Type.void;\n  return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n}\nbuiltins.set(BuiltinNames.atomic_store, builtin_atomic_store);\n\n// any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_binary(ctx: BuiltinContext, op: AtomicRMWOp, opName: string): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 2, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, opName, type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n}\n\n// atomic.add<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_add(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Add, \"atomic.add\");\n}\nbuiltins.set(BuiltinNames.atomic_add, builtin_atomic_add);\n\n// atomic.sub<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_sub(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Sub, \"atomic.sub\");\n}\nbuiltins.set(BuiltinNames.atomic_sub, builtin_atomic_sub);\n\n// atomic.and<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.And, \"atomic.and\");\n}\nbuiltins.set(BuiltinNames.atomic_and, builtin_atomic_and);\n\n// atomic.or<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Or, \"atomic.or\");\n}\nbuiltins.set(BuiltinNames.atomic_or, builtin_atomic_or);\n\n// atomic.xor<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xor, \"atomic.xor\");\n}\nbuiltins.set(BuiltinNames.atomic_xor, builtin_atomic_xor);\n\n// atomic.xchg<T!>(ptr, value: T, immOffset?: usize) -> T\nfunction builtin_atomic_xchg(ctx: BuiltinContext): ExpressionRef {\n  return builtin_atomic_binary(ctx, AtomicRMWOp.Xchg, \"atomic.xchg\");\n}\nbuiltins.set(BuiltinNames.atomic_xchg, builtin_atomic_xchg);\n\n// atomic.cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\nfunction builtin_atomic_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 3, 4)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var contextualType = ctx.contextualType;\n  var type = typeArguments![0];\n  if (!type.isIntegerValue || type.size < 8) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg0 = compiler.compileExpression(operands[0],\n    compiler.options.usizeType,\n    Constraints.CONV_IMPLICIT\n  );\n  var arg1 = ctx.contextIsExact\n    ? compiler.compileExpression(operands[1],\n        contextualType,\n        Constraints.CONV_IMPLICIT\n      )\n    : compiler.compileExpression(\n        operands[1],\n        type,\n        type.isIntegerValue\n          ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n          : Constraints.CONV_IMPLICIT\n      );\n  var inType = compiler.currentType;\n  var arg2 = compiler.compileExpression(operands[2],\n    inType,\n    Constraints.CONV_IMPLICIT\n  );\n  if (\n    type.isIntegerValue &&\n    (\n      !inType.isIntegerValue || // float to int\n      inType.size < type.size   // int to larger int (clear garbage bits)\n    )\n  ) {\n    arg1 = compiler.convertExpression(arg1,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[1]\n    );\n    arg2 = compiler.convertExpression(arg2,\n      inType, type,\n      false, false, // still clears garbage bits when not wrapping\n      operands[2]\n    );\n    inType = type;\n  }\n  var immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n  if (immOffset < 0) {\n    compiler.currentType = inType;\n    return module.unreachable();\n  }\n  compiler.currentType = inType;\n  return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n}\nbuiltins.set(BuiltinNames.atomic_cmpxchg, builtin_atomic_cmpxchg);\n\n// atomic.wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\nfunction builtin_atomic_wait(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var type = typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  switch (type.kind) {\n    case TypeKind.I32:\n    case TypeKind.I64:\n    case TypeKind.ISIZE:\n    case TypeKind.U32:\n    case TypeKind.U64:\n    case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.atomic_wait, builtin_atomic_wait);\n\n// atomic.notify(ptr: usize, count: i32) -> i32\nfunction builtin_atomic_notify(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  return module.atomic_notify(arg0, arg1);\n}\nbuiltins.set(BuiltinNames.atomic_notify, builtin_atomic_notify);\n\n// atomic.fence() -> void\nfunction builtin_atomic_fence(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkFeatureEnabled(ctx, Feature.THREADS) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.atomic_fence();\n}\nbuiltins.set(BuiltinNames.atomic_fence, builtin_atomic_fence);\n\n// === Control flow ===========================================================================\n\n// select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\nfunction builtin_select(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n    : compiler.compileExpression(operands[0], Type.auto);\n  var type = compiler.currentType;\n  if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n    compiler.error(\n      DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n      ctx.reportNode.typeArgumentsRange, \"select\", type.toString()\n    );\n    return module.unreachable();\n  }\n  var arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.makeIsTrueish(\n    compiler.compileExpression(operands[2], Type.bool),\n    compiler.currentType, // ^\n    operands[2]\n  );\n  compiler.currentType = type;\n  return module.select(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.select, builtin_select);\n\n// unreachable() -> *\nfunction builtin_unreachable(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  checkArgsRequired(ctx, 0);\n  return ctx.compiler.module.unreachable();\n}\nbuiltins.set(BuiltinNames.unreachable, builtin_unreachable);\n\n// === Memory =================================================================================\n\n// memory.size() -> i32\nfunction builtin_memory_size(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 0)\n  ) return module.unreachable();\n  return module.host(HostOp.MemorySize);\n}\nbuiltins.set(BuiltinNames.memory_size, builtin_memory_size);\n\n// memory.grow(pages: i32) -> i32\nfunction builtin_memory_grow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  return module.host(HostOp.MemoryGrow, null, [\n    compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n  ]);\n}\nbuiltins.set(BuiltinNames.memory_grow, builtin_memory_grow);\n\n// memory.copy(dest: usize, src: usize: n: usize) -> void\nfunction builtin_memory_copy(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_copy(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_copy, builtin_memory_copy);\n\n// memory.fill(dest: usize, value: u8, n: usize) -> void\nfunction builtin_memory_fill(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.void;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n    // use stdlib alternative if not supported\n    let instance = compiler.resolver.resolveFunction(ctx.prototype, null); // reports\n    compiler.currentType = Type.void;\n    if (!instance || !compiler.compileFunction(instance, true)) return module.unreachable();\n    return compiler.compileCallDirect(instance, operands, ctx.reportNode);\n  }\n  var usizeType = compiler.options.usizeType;\n  var arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.void;\n  return module.memory_fill(arg0, arg1, arg2);\n}\nbuiltins.set(BuiltinNames.memory_fill, builtin_memory_fill);\n\n// memory.data(size[, align]) -> usize\n// memory.data<T>(values[, align]) -> usize\nfunction builtin_memory_data(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  compiler.currentType = Type.i32;\n  if (\n    checkTypeOptional(ctx) |\n    checkArgsOptional(ctx, 1, 2)\n  ) return module.unreachable();\n  var typeArguments = ctx.typeArguments;\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  var usizeType = compiler.options.usizeType;\n  var offset: i64;\n  if (typeArguments !== null && typeArguments.length > 0) { // data<T>(values[, align])\n    let elementType = typeArguments[0];\n    if (!elementType.isValue) {\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        ctx.reportNode.typeArgumentsRange, \"memory.data\", elementType.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let valuesOperand = operands[0];\n    if (valuesOperand.kind != NodeKind.LITERAL || (<LiteralExpression>valuesOperand).literalKind != LiteralKind.ARRAY) {\n      compiler.error(\n        DiagnosticCode.Array_literal_expected,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let expressions = (<ArrayLiteralExpression>valuesOperand).elementExpressions;\n    let numElements = expressions.length;\n    let exprs = new Array<ExpressionRef>(numElements);\n    let isStatic = true;\n    for (let i = 0; i < numElements; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = compiler.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        exprs[i] = expr;\n      } else {\n        exprs[i] = compiler.makeZero(elementType, elementExpression);\n      }\n    }\n    if (!isStatic) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        valuesOperand.range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = elementType.byteSize;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    let buf = new Uint8Array(numElements * elementType.byteSize);\n    assert(compiler.writeStaticBuffer(buf, 0, elementType, exprs) == buf.byteLength);\n    offset = compiler.addMemorySegment(buf, align).offset;\n  } else { // data(size[, align])\n    let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(arg0, ExpressionRunnerFlags.PreserveSideeffects);\n    if (!precomp) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[0].range\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let size = getConstValueI32(precomp);\n    if (size < 1) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[0].range, \"1\", i32.MAX_VALUE.toString()\n      );\n      compiler.currentType = usizeType;\n      return module.unreachable();\n    }\n    let align = 16;\n    if (numOperands == 2) {\n      align = evaluateImmediateAlign(operands[1], align, compiler); // reports\n      if (align < 0) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n    }\n    offset = compiler.addMemorySegment(new Uint8Array(size), align).offset;\n  }\n  // FIXME: what if recompiles happen? recompiles are bad.\n  compiler.currentType = usizeType;\n  if (usizeType == Type.usize32) {\n    assert(!i64_high(offset));\n    return module.i32(i64_low(offset));\n  } else {\n    return module.i64(i64_low(offset), i64_high(offset));\n  }\n}\nbuiltins.set(BuiltinNames.memory_data, builtin_memory_data);\n\n// === Helpers ================================================================================\n\n// changetype<T!>(value: *) -> T\nfunction builtin_changetype(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var toType = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.auto);\n  var fromType = compiler.currentType;\n  compiler.currentType = toType;\n  if (!fromType.isChangeableTo(toType)) {\n    compiler.error(\n      DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n      ctx.reportNode.range, fromType.toString(), toType.toString()\n    );\n    return module.unreachable();\n  }\n  return arg0;\n}\nbuiltins.set(BuiltinNames.changetype, builtin_changetype);\n\n// assert<T?>(isTrueish: T, message?: string) -> T{!= null}\nfunction builtin_assert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  var typeArguments = ctx.typeArguments;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, 2)\n  ) {\n    if (typeArguments) {\n      assert(typeArguments.length); // otherwise invalid, should not been set at all\n      compiler.currentType = typeArguments[0].nonNullableType;\n    }\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var contextualType = ctx.contextualType;\n  var arg0 = typeArguments\n    ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n    : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n  var type = compiler.currentType;\n  compiler.currentType = type.nonNullableType;\n\n  // omit if assertions are disabled\n  if (compiler.options.noAssert) {\n    return arg0;\n  }\n\n  // omit if the assertion can be proven statically\n  var evaled = module.runExpression(arg0, ExpressionRunnerFlags.Default);\n  if (evaled) {\n    switch (<u32>getExpressionType(evaled)) {\n      case <u32>NativeType.I32: {\n        if (getConstValueI32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        if (getConstValueI64Low(evaled) | getConstValueI64High(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        if (getConstValueF32(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        if (getConstValueF64(evaled)) {\n          return arg0;\n        }\n        break;\n      }\n    }\n  }\n\n  // otherwise call abort if the assertion is false-ish\n  var abort = compiler.makeAbort(operands.length == 2 ? operands[1] : null, ctx.reportNode);\n  compiler.currentType = type.nonNullableType;\n  if (contextualType == Type.void) { // simplify if dropped anyway\n    compiler.currentType = Type.void;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            arg0\n          ),\n          abort\n        );\n      }\n      // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n      case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n      case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n    }\n  } else {\n    compiler.currentType = type.nonNullableType;\n    let flow = compiler.currentFlow;\n    switch (compiler.currentType.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: {\n        let temp = flow.getTempLocal(type);\n        flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n        let ret = module.if(\n          module.local_tee(temp.index, arg0),\n          module.local_get(temp.index, NativeType.I32),\n          abort\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        let temp = flow.getTempLocal(Type.i64);\n        let ret = module.if(\n          module.unary(UnaryOp.EqzI64,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.I64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        let temp = flow.getTempLocal(compiler.options.usizeType);\n        let ret = module.if(\n          module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.EqzI64\n              : UnaryOp.EqzI32,\n            module.local_tee(temp.index, arg0)\n          ),\n          abort,\n          module.local_get(temp.index, compiler.options.nativeSizeType)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F32: {\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF32,\n            module.local_tee(temp.index, arg0),\n            module.f32(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F32)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.if(\n          module.binary(BinaryOp.EqF64,\n            module.local_tee(temp.index, arg0),\n            module.f64(0)\n          ),\n          abort,\n          module.local_get(temp.index, NativeType.F64)\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange,\n    \"assert\", compiler.currentType.toString()\n  );\n  return abort;\n}\nbuiltins.set(BuiltinNames.assert, builtin_assert);\n\n// unchecked(expr: *) -> *\nfunction builtin_unchecked(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) return module.unreachable();\n  var flow = compiler.currentFlow;\n  var alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n  flow.set(FlowFlags.UNCHECKED_CONTEXT);\n  // eliminate unnecessary tees by preferring contextualType(=void)\n  var expr = compiler.compileExpression(ctx.operands[0], ctx.contextualType);\n  if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n  return expr;\n}\nbuiltins.set(BuiltinNames.unchecked, builtin_unchecked);\n\n// call_indirect<T?>(index: u32, ...args: *[]) -> T\nfunction builtin_call_indirect(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeOptional(ctx, true) |\n    checkArgsOptional(ctx, 1, i32.MAX_VALUE)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  var returnType: Type;\n  if (typeArguments) {\n    assert(typeArguments.length);\n    returnType = typeArguments[0];\n  } else {\n    returnType = ctx.contextualType;\n  }\n  var indexArg = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length - 1;\n  var operandExprs = new Array<ExpressionRef>(numOperands);\n  var nativeParamTypes = new Array<NativeType>(numOperands);\n  for (let i = 0; i < numOperands; ++i) {\n    operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.auto);\n    nativeParamTypes[i] = compiler.currentType.toNativeType();\n  }\n  compiler.currentType = returnType;\n  return module.call_indirect(indexArg, operandExprs, createType(nativeParamTypes), returnType.toNativeType());\n}\nbuiltins.set(BuiltinNames.call_indirect, builtin_call_indirect);\n\n// instantiate<T!>(...args: *[]) -> T\nfunction builtin_instantiate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeRequired(ctx, true)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var typeArgument = typeArguments[0];\n  var classInstance = typeArgument.getClass();\n  if (!classInstance) {\n    compiler.error(\n      DiagnosticCode.This_expression_is_not_constructable,\n      ctx.reportNode.expression.range\n    );\n    return module.unreachable();\n  }\n  compiler.currentType = classInstance.type;\n  var ctor = compiler.ensureConstructor(classInstance, ctx.reportNode);\n  compiler.checkFieldInitialization(classInstance, ctx.reportNode);\n  return compiler.compileInstantiate(ctor, operands, Constraints.NONE, ctx.reportNode);\n}\nbuiltins.set(BuiltinNames.instantiate, builtin_instantiate);\n\n// === User-defined diagnostics ===============================================================\n\nfunction builtin_diagnostic(ctx: BuiltinContext, category: DiagnosticCategory): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  checkTypeAbsent(ctx);\n  var operands = ctx.operands;\n  var reportNode = ctx.reportNode;\n  compiler.emitDiagnostic(\n    DiagnosticCode.User_defined_0,\n    category,\n    reportNode.range,\n    null,\n    operands.length\n      ? operands[0].range.toString()\n      : reportNode.range.toString()\n  );\n  return category == DiagnosticCategory.ERROR\n    ? module.unreachable()\n    : module.nop();\n}\n\n// ERROR(message?)\nfunction builtin_error(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.ERROR);\n}\nbuiltins.set(BuiltinNames.ERROR, builtin_error);\n\n// WARNING(message?)\nfunction builtin_warning(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.WARNING);\n}\nbuiltins.set(BuiltinNames.WARNING, builtin_warning);\n\n// INFO(message?)\nfunction builtin_info(ctx: BuiltinContext): ExpressionRef {\n  return builtin_diagnostic(ctx, DiagnosticCategory.INFO);\n}\nbuiltins.set(BuiltinNames.INFO, builtin_info);\n\n// === Function builtins ======================================================================\n\n// Function<T>#call(thisArg: thisof<T> | null, ...args: *[]) -> returnof<T>\nfunction builtin_function_call(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var parent = ctx.prototype.parent;\n  assert(parent.kind == ElementKind.CLASS);\n  var classInstance = <Class>parent;\n  assert(classInstance.prototype == compiler.program.functionPrototype);\n  var typeArguments = assert(classInstance.typeArguments);\n  assert(typeArguments.length == 1);\n  var ftype = typeArguments[0];\n  var signature = assert(ftype.getSignature());\n  var returnType = signature.returnType;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsOptional(ctx, 1 + signature.requiredParameters, 1 + signature.parameterTypes.length)\n  ) {\n    compiler.currentType = returnType;\n    return compiler.module.unreachable();\n  }\n  var indexArg = compiler.compileExpression(assert(ctx.thisOperand), ftype, Constraints.CONV_IMPLICIT);\n  var thisOperand = assert(ctx.operands.shift());\n  var thisType = signature.thisType;\n  var thisArg: usize = 0;\n  if (thisType) {\n    thisArg = compiler.compileExpression(thisOperand, thisType, Constraints.CONV_IMPLICIT);\n  } else if (thisOperand.kind != NodeKind.NULL) {\n    compiler.error(\n      DiagnosticCode._this_cannot_be_referenced_in_current_location,\n      thisOperand.range\n    );\n    return compiler.module.unreachable();\n  }\n  return compiler.compileCallIndirect(signature, indexArg, ctx.operands, ctx.reportNode, thisArg, ctx.contextualType == Type.void);\n}\nfunction_builtins.set(\"call\", builtin_function_call);\n\n// === Portable type conversions ==============================================================\n\nfunction builtin_conversion(ctx: BuiltinContext, toType: Type): ExpressionRef {\n  var compiler = ctx.compiler;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = toType;\n    return compiler.module.unreachable();\n  }\n  return compiler.compileExpression(ctx.operands[0], toType, Constraints.CONV_EXPLICIT);\n}\n\n// i8(*) -> i8\nfunction builtin_i8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i8);\n}\nbuiltins.set(BuiltinNames.i8, builtin_i8);\n\n// i16(*) -> i16\nfunction builtin_i16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i16);\n}\nbuiltins.set(BuiltinNames.i16, builtin_i16);\n\n// i32(*) -> i32\nfunction builtin_i32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i32);\n}\nbuiltins.set(BuiltinNames.i32, builtin_i32);\n\n// i64(*) -> i64\nfunction builtin_i64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.i64);\n}\nbuiltins.set(BuiltinNames.i64, builtin_i64);\n\n// isize(*) -> isize\nfunction builtin_isize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.isizeType);\n}\nbuiltins.set(BuiltinNames.isize, builtin_isize);\n\n// u8(*) -> u8\nfunction builtin_u8(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u8);\n}\nbuiltins.set(BuiltinNames.u8, builtin_u8);\n\n// u16(*) -> u16\nfunction builtin_u16(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u16);\n}\nbuiltins.set(BuiltinNames.u16, builtin_u16);\n\n// u32(*) -> u32\nfunction builtin_u32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u32);\n}\nbuiltins.set(BuiltinNames.u32, builtin_u32);\n\n// u64(*) -> u64\nfunction builtin_u64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.u64);\n}\nbuiltins.set(BuiltinNames.u64, builtin_u64);\n\n// usize(*) -> usize\nfunction builtin_usize(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, ctx.compiler.options.usizeType);\n}\nbuiltins.set(BuiltinNames.usize, builtin_usize);\n\n// bool(*) -> bool\nfunction builtin_bool(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.bool);\n}\nbuiltins.set(BuiltinNames.bool, builtin_bool);\n\n// f32(*) -> f32\nfunction builtin_f32(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f32);\n}\nbuiltins.set(BuiltinNames.f32, builtin_f32);\n\n// f64(*) -> f64\nfunction builtin_f64(ctx: BuiltinContext): ExpressionRef {\n  return builtin_conversion(ctx, Type.f64);\n}\nbuiltins.set(BuiltinNames.f64, builtin_f64);\n\n// TODO: alias for now, splat input integer perhaps?\nfunction builtin_v128(ctx: BuiltinContext): ExpressionRef {\n  return builtin_i8x16(ctx);\n}\nbuiltins.set(BuiltinNames.v128, builtin_v128);\n\n// === SIMD ===================================================================================\n\n// i8x16(...values: i8[16]) -> v128\nfunction builtin_i8x16(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 16)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 16; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i8, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI8(getConstValueI32(precomp), bytes, i);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i8x16, builtin_i8x16);\n\n// i16x8(...values: i16[8]) -> v128\nfunction builtin_i16x8(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 8)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 8; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i16, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI16(getConstValueI32(precomp), bytes, i << 1);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i16x8, builtin_i16x8);\n\n// i32x4(...values: i32[4]) -> v128\nfunction builtin_i32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeI32(getConstValueI32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i32x4, builtin_i32x4);\n\n// i64x2(...values: i64[2]) -> v128\nfunction builtin_i64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.i64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      let off = i << 3;\n      writeI32(getConstValueI64Low(precomp), bytes, off);\n      writeI32(getConstValueI64High(precomp), bytes, off + 4);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.i64x2, builtin_i64x2);\n\n// f32x4(...values: f32[4]) -> v128\nfunction builtin_f32x4(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 4)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 4; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF32(getConstValueF32(precomp), bytes, i << 2);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f32x4, builtin_f32x4);\n\n// f64x2(...values: f64[2]) -> v128\nfunction builtin_f64x2(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var bytes = new Uint8Array(16);\n  for (let i = 0; i < 2; ++i) {\n    let expr = compiler.compileExpression(operands[i], Type.f64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      writeF64(getConstValueF64(precomp), bytes, i << 3);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        operands[i].range\n      );\n    }\n  }\n  compiler.currentType = Type.v128;\n  return module.v128(bytes);\n}\nbuiltins.set(BuiltinNames.f64x2, builtin_f64x2);\n\n// v128.splat<T!>(x: T) -> v128\nfunction builtin_v128_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.SplatI64x2\n            : UnaryOp.SplatI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_splat, builtin_v128_splat);\n\n// v128.extract_lane<T!>(x: v128, idx: u8) -> T\nfunction builtin_v128_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsRequired(ctx, 2)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  compiler.currentType = type;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, <u8>idx);\n      case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, <u8>idx);\n      case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, <u8>idx);\n      case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, <u8>idx);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, <u8>idx);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, <u8>idx);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_extract(\n          compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneI64x2\n            : SIMDExtractOp.ExtractLaneI32x4,\n          arg0, <u8>idx\n        );\n      }\n      case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, <u8>idx);\n      case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, <u8>idx);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_extract_lane, builtin_v128_extract_lane);\n\n// v128.replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\nfunction builtin_v128_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  var idx = 0;\n  var precomp = module.runExpression(arg1, ExpressionRunnerFlags.PreserveSideeffects);\n  if (precomp) {\n    idx = getConstValueI32(precomp);\n  } else {\n    compiler.error(\n      DiagnosticCode.Expression_must_be_a_compile_time_constant,\n      operands[1].range\n    );\n  }\n  if (type.isValue) {\n    let maxIdx = (16 / assert(type.byteSize)) - 1;\n    if (idx < 0 || idx > maxIdx) {\n      compiler.error(\n        DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n        operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n      );\n      idx = 0;\n    }\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, <u8>idx, arg2);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, <u8>idx, arg2);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, <u8>idx, arg2);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, <u8>idx, arg2);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_replace(\n          compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneI64x2\n            : SIMDReplaceOp.ReplaceLaneI32x4,\n          arg0, <u8>idx, arg2\n        );\n      }\n      case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, <u8>idx, arg2);\n      case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, <u8>idx, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_replace_lane, builtin_v128_replace_lane);\n\n// v128.shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\nfunction builtin_v128_shuffle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  if (type.isValue) {\n    let laneWidth = type.byteSize;\n    let laneCount = 16 / laneWidth;\n    assert(isInteger(laneCount) && isPowerOf2(laneCount));\n    if (\n      checkArgsRequired(ctx, 2 + laneCount)\n    ) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.I64:\n      case TypeKind.ISIZE:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.U64:\n      case TypeKind.USIZE:\n      case TypeKind.F32:\n      case TypeKind.F64: {\n        let mask = new Uint8Array(16);\n        let maxIdx = (laneCount << 1) - 1;\n        for (let i = 0; i < laneCount; ++i) {\n          let operand = operands[2 + i];\n          let argN = compiler.compileExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n          let precomp = module.runExpression(argN, ExpressionRunnerFlags.PreserveSideeffects);\n          let idx = 0;\n          if (precomp) {\n            idx = getConstValueI32(precomp);\n            if (idx < 0 || idx > maxIdx) {\n              compiler.error(\n                DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                operand.range, \"Lane index\", \"0\", maxIdx.toString()\n              );\n              idx = 0;\n            }\n          } else {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              operand.range\n            );\n          }\n          switch (laneWidth) {\n            case 1: {\n              writeI8(idx, mask, i);\n              break;\n            }\n            case 2: {\n              let off8 = i << 1;\n              let idx8 = idx << 1;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              break;\n            }\n            case 4: {\n              let off8 = i << 2;\n              let idx8 = idx << 2;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              break;\n            }\n            case 8: {\n              let off8 = i << 3;\n              let idx8 = idx << 3;\n              writeI8(idx8    , mask, off8);\n              writeI8(idx8 + 1, mask, off8 + 1);\n              writeI8(idx8 + 2, mask, off8 + 2);\n              writeI8(idx8 + 3, mask, off8 + 3);\n              writeI8(idx8 + 4, mask, off8 + 4);\n              writeI8(idx8 + 5, mask, off8 + 5);\n              writeI8(idx8 + 6, mask, off8 + 6);\n              writeI8(idx8 + 7, mask, off8 + 7);\n              break;\n            }\n            default: assert(false);\n          }\n        }\n        compiler.currentType = Type.v128;\n        return module.simd_shuffle(arg0, arg1, mask);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n  );\n  compiler.currentType = Type.v128;\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shuffle, builtin_v128_shuffle);\n\n// v128.swizzle(a: v128, b: v128) -> v128\nfunction builtin_v128_swizzle(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n}\nbuiltins.set(BuiltinNames.v128_swizzle, builtin_v128_swizzle);\n\n// v128.load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_splat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I16:\n      case TypeKind.U16: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n      }\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.F32: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64:\n      case TypeKind.F64: {\n        return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_splat, builtin_v128_load_splat);\n\n// v128.load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\nfunction builtin_v128_load_ext(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx, true) |\n    checkArgsOptional(ctx, 1, 3)\n  ) return module.unreachable();\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var numOperands = operands.length;\n  var immOffset = 0;\n  var immAlign = type.byteSize;\n  if (numOperands >= 2) {\n    immOffset = evaluateImmediateOffset(operands[1], compiler); // reports\n    if (immOffset < 0) {\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    if (numOperands == 3) {\n      immAlign = evaluateImmediateAlign(operands[2], immAlign, compiler); // reports\n      if (immAlign < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n    }\n  }\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n      case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n      case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n      case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_load_ext, builtin_v128_load_ext);\n\n// v128.add<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.AddI64x2\n            : BinaryOp.AddI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add, builtin_v128_add);\n\n// v128.sub<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.binary(\n          compiler.options.isWasm64\n            ? BinaryOp.SubI64x2\n            : BinaryOp.SubI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub, builtin_v128_sub);\n\n// v128.mul<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_mul(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_mul, builtin_v128_mul);\n\n// v128.div<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_div(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_div, builtin_v128_div);\n\n// v128.add_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_add_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_add_saturate, builtin_v128_add_saturate);\n\n// v128.sub_saturate<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_sub_saturate(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sub_saturate, builtin_v128_sub_saturate);\n\n// v128.min<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_min(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_min, builtin_v128_min);\n\n// v128.max<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_max(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n      case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_max, builtin_v128_max);\n\n// v128.pmin<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmin(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PminF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PminF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmin\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmin, builtin_v128_pmin);\n\n// v128.pmax<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_pmax(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.binary(BinaryOp.PmaxF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.PmaxF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.pmax\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_pmax, builtin_v128_pmax);\n\n// v128.dot<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_dot(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_dot, builtin_v128_dot);\n\n// v128.avgr<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_avgr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.U8:  return module.binary(BinaryOp.AvgrU8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.AvgrU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.avgr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_avgr, builtin_v128_avgr);\n\n// v128.eq<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_eq(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_eq, builtin_v128_eq);\n\n// v128.ne<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ne(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ne, builtin_v128_ne);\n\n// v128.lt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_lt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_lt, builtin_v128_lt);\n\n// v128.le<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_le(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_le, builtin_v128_le);\n\n// v128.gt<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_gt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_gt, builtin_v128_gt);\n\n// v128.ge<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_ge(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n      case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n      case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n      case TypeKind.ISIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.USIZE: {\n        if (!compiler.options.isWasm64) {\n          return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n        }\n        break;\n      }\n      case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n      case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ge, builtin_v128_ge);\n\n// v128.narrow<T!>(a: v128, b: v128) -> v128\nfunction builtin_v128_narrow(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n      case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n      case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n      case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_narrow, builtin_v128_narrow);\n\n// v128.neg<T!>(a: v128) -> v128\nfunction builtin_v128_neg(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.NegI64x2\n            : UnaryOp.NegI32x4,\n          arg0\n        );\n      }\n      case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_neg, builtin_v128_neg);\n\n// v128.abs<T!>(a: v128) -> v128\nfunction builtin_v128_abs(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.AbsI8x16, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.AbsI16x8, arg0);\n      case TypeKind.ISIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32: return module.unary(UnaryOp.AbsI32x4, arg0);\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return arg0;\n      case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_abs, builtin_v128_abs);\n\n// v128.sqrt<T!>(a: v128) -> v128\nfunction builtin_v128_sqrt(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_sqrt, builtin_v128_sqrt);\n\n// v128.ceil<T!>(a: v128) -> v128\nfunction builtin_v128_ceil(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.CeilF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.CeilF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.ceil\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_ceil, builtin_v128_ceil);\n\n// v128.floor<T!>(a: v128) -> v128\nfunction builtin_v128_floor(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.FloorF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.FloorF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.floor\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_floor, builtin_v128_floor);\n\n// v128.trunc<T!>(a: v128) -> v128\nfunction builtin_v128_trunc(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.TruncF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.TruncF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc, builtin_v128_trunc);\n\n// v128.nearest<T!>(a: v128) -> v128\nfunction builtin_v128_nearest(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.unary(UnaryOp.NearestF32x4, arg0);\n      case TypeKind.F64: return module.unary(UnaryOp.NearestF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.nearest\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_nearest, builtin_v128_nearest);\n\n// v128.convert<T!>(a: v128) -> v128\nfunction builtin_v128_convert(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_convert, builtin_v128_convert);\n\n// v128.trunc_sat<T!>(a: v128) -> v128\nfunction builtin_v128_trunc_sat(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n      case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n      case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n      case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_trunc_sat, builtin_v128_trunc_sat);\n\n// v128.widen_low<T!>(a: v128) -> v128\nfunction builtin_v128_widen_low(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_low, builtin_v128_widen_low);\n\n// v128.widen_high<T!>(a: v128) -> v128\nfunction builtin_v128_widen_high(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments!;\n  var type = typeArguments[0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n      case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n      case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n      case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_widen_high, builtin_v128_widen_high);\n\n// v128.shl<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shl(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShlI64x2\n            : SIMDShiftOp.ShlI32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shl, builtin_v128_shl);\n\n// v128.shr<T!>(a: v128, b: i32) -> v128\nfunction builtin_v128_shr(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.v128;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n      case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n      case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n      case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n      case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n      case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n      case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n      case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n      case TypeKind.ISIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrI64x2\n            : SIMDShiftOp.ShrI32x4,\n          arg0, arg1\n        );\n      }\n      case TypeKind.USIZE: {\n        return module.simd_shift(\n          compiler.options.isWasm64\n            ? SIMDShiftOp.ShrU64x2\n            : SIMDShiftOp.ShrU32x4,\n          arg0, arg1\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_shr, builtin_v128_shr);\n\nfunction builtin_v128_bitwise_binary(ctx: BuiltinContext, op: BinaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.binary(op, arg0, arg1);\n}\n\n// v128.and(a: v128, b: v128) -> v128\nfunction builtin_v128_and(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndV128);\n}\nbuiltins.set(BuiltinNames.v128_and, builtin_v128_and);\n\n// v128.or(a: v128, b: v128) -> v128\nfunction builtin_v128_or(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.OrV128);\n}\nbuiltins.set(BuiltinNames.v128_or, builtin_v128_or);\n\n// v128.xor(a: v128, b: v128) -> v128\nfunction builtin_v128_xor(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.XorV128);\n}\nbuiltins.set(BuiltinNames.v128_xor, builtin_v128_xor);\n\n// v128.andnot(a: v128, b: v128) -> v128\nfunction builtin_v128_andnot(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_binary(ctx, BinaryOp.AndNotV128);\n}\nbuiltins.set(BuiltinNames.v128_andnot, builtin_v128_andnot);\n\nfunction builtin_v128_bitwise_unary(ctx: BuiltinContext, op: UnaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.unary(op, arg0);\n}\n\n// v128.not(a: v128) -> v128\nfunction builtin_v128_not(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_unary(ctx, UnaryOp.NotV128);\n}\nbuiltins.set(BuiltinNames.v128_not, builtin_v128_not);\n\nfunction builtin_v128_bitwise_ternary(ctx: BuiltinContext, op: SIMDTernaryOp): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  return module.simd_ternary(op, arg0, arg1, arg2);\n}\n\n// v128.bitselect(v1: v128, v2: v128, c: v128) -> v128\nfunction builtin_v128_bitselect(ctx: BuiltinContext): ExpressionRef {\n  return builtin_v128_bitwise_ternary(ctx, SIMDTernaryOp.Bitselect);\n}\nbuiltins.set(BuiltinNames.v128_bitselect, builtin_v128_bitselect);\n\n// v128.any_true<T!>(a: v128) -> bool\nfunction builtin_v128_any_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AnyTrueI64x2\n            : UnaryOp.AnyTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_any_true, builtin_v128_any_true);\n\n// v128.all_true<T!>(a: v128) -> bool\nfunction builtin_v128_all_true(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.bool;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.bool;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        return module.unary(\n          compiler.options.isWasm64\n            ? UnaryOp.AllTrueI64x2\n            : UnaryOp.AllTrueI32x4,\n          arg0\n        );\n      }\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_all_true, builtin_v128_all_true);\n\n// v128.bitmask<T!>(a: v128) -> i32\nfunction builtin_v128_bitmask(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 1)\n  ) {\n    compiler.currentType = Type.i32;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  compiler.currentType = Type.i32;\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.U8: return module.unary(UnaryOp.BitmaskI8x16, arg0);\n      case TypeKind.I16:\n      case TypeKind.U16: return module.unary(UnaryOp.BitmaskI16x8, arg0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (compiler.options.isWasm64) break;\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: return module.unary(UnaryOp.BitmaskI32x4, arg0);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.bitmask\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_bitmask, builtin_v128_bitmask);\n\n// v128.qfma<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfma(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfma, builtin_v128_qfma);\n\n// v128.qfms<T!>(a: v128, b: v128, c: v128) -> v128\nfunction builtin_v128_qfms(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkFeatureEnabled(ctx, Feature.SIMD) |\n    checkTypeRequired(ctx) |\n    checkArgsRequired(ctx, 3)\n  ) {\n    compiler.currentType = Type.v128;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var type = ctx.typeArguments![0];\n  var arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n  var arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n  if (type.isValue) {\n    switch (type.kind) {\n      case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n      case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n    ctx.reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n  );\n  return module.unreachable();\n}\nbuiltins.set(BuiltinNames.v128_qfms, builtin_v128_qfms);\n\n// === Internal runtime =======================================================================\n\n// __visit_globals(cookie: u32) -> void\nfunction builtin_visit_globals(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 1) // cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_globals, [ arg0 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_globals, builtin_visit_globals);\n\n// __visit_members(ref: usize, cookie: u32) -> void\nfunction builtin_visit_members(ctx: BuiltinContext): ExpressionRef {\n  var compiler = ctx.compiler;\n  var module = compiler.module;\n  if (\n    checkTypeAbsent(ctx) |\n    checkArgsRequired(ctx, 2) // ref, cookie\n  ) {\n    compiler.currentType = Type.void;\n    return module.unreachable();\n  }\n  var operands = ctx.operands;\n  var arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n  var arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n  compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n  compiler.currentType = Type.void;\n  return module.call(BuiltinNames.visit_members, [ arg0, arg1 ], NativeType.None);\n}\nbuiltins.set(BuiltinNames.visit_members, builtin_visit_members);\n\n// === Inline assembler =======================================================================\n\n// TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n//   add, sub, mul, div_s, div_u, rem_s, rem_u\n//   and, or, xor, shl, shr_u, shr_s\n//   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n// i32.clz -> clz<i32>\nfunction builtin_i32_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_clz, builtin_i32_clz);\n\n// i64.clz -> clz<i64>\nfunction builtin_i64_clz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_clz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_clz, builtin_i64_clz);\n\n// i32.ctz -> ctz<i32>\nfunction builtin_i32_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i32_ctz, builtin_i32_ctz);\n\n// i64.ctz -> ctz<i64>\nfunction builtin_i64_ctz(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_ctz(ctx);\n}\nbuiltins.set(BuiltinNames.i64_ctz, builtin_i64_ctz);\n\n// i32.popcnt -> popcnt<i32>\nfunction builtin_i32_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i32_popcnt, builtin_i32_popcnt);\n\n// i64.popcnt -> popcnt<i64>\nfunction builtin_i64_popcnt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_popcnt(ctx);\n}\nbuiltins.set(BuiltinNames.i64_popcnt, builtin_i64_popcnt);\n\n// i32.rotl -> rotl<i32>\nfunction builtin_i32_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotl, builtin_i32_rotl);\n\n// i64.rotl -> rotl<i64>\nfunction builtin_i64_rotl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotl(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotl, builtin_i64_rotl);\n\n// i32.rotr -> rotr<i32>\nfunction builtin_i32_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i32_rotr, builtin_i32_rotr);\n\n// i64.rotr -> rotr<i64>\nfunction builtin_i64_rotr(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_rotr(ctx);\n}\nbuiltins.set(BuiltinNames.i64_rotr, builtin_i64_rotr);\n\n// f32.abs -> abs<f32>\nfunction builtin_f32_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32_abs, builtin_f32_abs);\n\n// f64.abs -> abs<f64>\nfunction builtin_f64_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64_abs, builtin_f64_abs);\n\n// f32.max -> max<f32>\nfunction builtin_f32_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32_max, builtin_f32_max);\n\n// f64.max -> max<f64>\nfunction builtin_f64_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64_max, builtin_f64_max);\n\n// f32.min -> min<f32>\nfunction builtin_f32_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32_min, builtin_f32_min);\n\n// f64.min -> min<f64>\nfunction builtin_f64_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64_min, builtin_f64_min);\n\n// f32.ceil -> ceil<f32>\nfunction builtin_f32_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32_ceil, builtin_f32_ceil);\n\n// f64.ceil -> ceil<f64>\nfunction builtin_f64_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64_ceil, builtin_f64_ceil);\n\n// f32.floor -> floor<f32>\nfunction builtin_f32_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32_floor, builtin_f32_floor);\n\n// f64.floor -> floor<f64>\nfunction builtin_f64_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64_floor, builtin_f64_floor);\n\n// f32.copysign -> copysign<f32>\nfunction builtin_f32_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f32_copysign, builtin_f32_copysign);\n\n// f64.copysign -> copysign<f64>\nfunction builtin_f64_copysign(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_copysign(ctx);\n}\nbuiltins.set(BuiltinNames.f64_copysign, builtin_f64_copysign);\n\n// f32.nearest -> nearest<f32>\nfunction builtin_f32_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32_nearest, builtin_f32_nearest);\n\n// f64.nearest -> nearest<f64>\nfunction builtin_f64_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64_nearest, builtin_f64_nearest);\n\n// i32.reinterpret_f32 -> reinterpret<i32>\nfunction builtin_i32_reinterpret_f32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i32_reinterpret_f32, builtin_i32_reinterpret_f32);\n\n// i64.reinterpret_f64 -> reinterpret<i64>\nfunction builtin_i64_reinterpret_f64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.i64_reinterpret_f64, builtin_i64_reinterpret_f64);\n\n// f32.reinterpret_i32 -> reinterpret<f32>\nfunction builtin_f32_reinterpret_i32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f32_reinterpret_i32, builtin_f32_reinterpret_i32);\n\n// f64.reinterpret_i64 -> reinterpret<f64>\nfunction builtin_f64_reinterpret_i64(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_reinterpret(ctx);\n}\nbuiltins.set(BuiltinNames.f64_reinterpret_i64, builtin_f64_reinterpret_i64);\n\n// f32.sqrt -> sqrt<f32>\nfunction builtin_f32_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32_sqrt, builtin_f32_sqrt);\n\n// f64.sqrt -> sqrt<f64>\nfunction builtin_f64_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64_sqrt, builtin_f64_sqrt);\n\n// f32.trunc -> trunc<f32>\nfunction builtin_f32_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32_trunc, builtin_f32_trunc);\n\n// f64.trunc -> trunc<f64>\nfunction builtin_f64_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64_trunc, builtin_f64_trunc);\n\n// i32.load8_s -> <i32>load<i8>\nfunction builtin_i32_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_s, builtin_i32_load8_s);\n\n// i32.load8_u -> <i32>load<u8>\nfunction builtin_i32_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load8_u, builtin_i32_load8_u);\n\n// i32.load16_s -> <i32>load<i16>\nfunction builtin_i32_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_s, builtin_i32_load16_s);\n\n// i32.load16_u -> <i32>load<u16>\nfunction builtin_i32_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load16_u, builtin_i32_load16_u);\n\n// i32.load -> <i32>load<i32>\nfunction builtin_i32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_load, builtin_i32_load);\n\n// i64.load8_s -> <i64>load<i8>\nfunction builtin_i64_load8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_s, builtin_i64_load8_s);\n\n// i64.load8_u -> <i64>load<u8>\nfunction builtin_i64_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load8_u, builtin_i64_load8_u);\n\n// i64.load16_s -> <i64>load<i16>\nfunction builtin_i64_load16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_s, builtin_i64_load16_s);\n\n// i64.load16_u -> <i64>load<u16>\nfunction builtin_i64_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load16_u, builtin_i64_load16_u);\n\n// i64.load32_s -> <i64>load<i32>\nfunction builtin_i64_load32_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_s, builtin_i64_load32_s);\n\n// i64.load32_u -> <i64>load<u32>\nfunction builtin_i64_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load32_u, builtin_i64_load32_u);\n\n// i64.load -> <i64>load<i64>\nfunction builtin_i64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_load, builtin_i64_load);\n\n// f32.load -> <f32>load<f32>\nfunction builtin_f32_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f32_load, builtin_f32_load);\n\n// f64.load -> <f64>load<f64>\nfunction builtin_f64_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.f64_load, builtin_f64_load);\n\n// i32.store8 -> store<i8 from i32>\nfunction builtin_i32_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store8, builtin_i32_store8);\n\n// i32.store16 -> store<i16 from i32>\nfunction builtin_i32_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store16, builtin_i32_store16);\n\n// i32.store -> store<i32 from i32>\nfunction builtin_i32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_store, builtin_i32_store);\n\n// i64.store8 -> store<i8 from i64>\nfunction builtin_i64_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store8, builtin_i64_store8);\n\n// i64.store16 -> store<i16 from i64>\nfunction builtin_i64_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store16, builtin_i64_store16);\n\n// i64.store32 -> store<i32 from i64>\nfunction builtin_i64_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store32, builtin_i64_store32);\n\n// i64.store -> store<i64 from i64>\nfunction builtin_i64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_store, builtin_i64_store);\n\n// f32.store -> store<f32 from f64>\nfunction builtin_f32_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f32_store, builtin_f32_store);\n\n// f64.store -> store<f64 from f64>\nfunction builtin_f64_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.f64_store, builtin_f64_store);\n\n// i32.atomic.load8_u -> <i32>atomic.load<u8>\nfunction builtin_i32_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load8_u, builtin_i32_atomic_load8_u);\n\n// i32.atomic.load16_u -> <i32>atomic.load<u16>\nfunction builtin_i32_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load16_u, builtin_i32_atomic_load16_u);\n\n// i32.atomic.load -> <i32>atomic.load<i32>\nfunction builtin_i32_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_load, builtin_i32_atomic_load);\n\n// i64.atomic.load8_u -> <i64>atomic.load<u8>\nfunction builtin_i64_atomic_load8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load8_u, builtin_i64_atomic_load8_u);\n\n// i64.atomic.load16_u -> <i64>atomic.load<u16>\nfunction builtin_i64_atomic_load16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load16_u, builtin_i64_atomic_load16_u);\n\n// i64.atomic.load32_u -> <i64>atomic.load<u32>\nfunction builtin_i64_atomic_load32_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load32_u, builtin_i64_atomic_load32_u);\n\n// i64.atomic.load -> <i64>atomic.load<i64>\nfunction builtin_i64_atomic_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_atomic_load(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_load, builtin_i64_atomic_load);\n\n// i32.atomic.store8 -> atomic.store<i8 from i32>\nfunction builtin_i32_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store8, builtin_i32_atomic_store8);\n\n// i32.atomic.store16 -> atomic.store<i16 from i32>\nfunction builtin_i32_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store16, builtin_i32_atomic_store16);\n\n// i32.atomic.store -> atomic.store<i32 from i32>\nfunction builtin_i32_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_store, builtin_i32_atomic_store);\n\n// i64.atomic.store8 -> atomic.store<i8 from i64>\nfunction builtin_i64_atomic_store8(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store8, builtin_i64_atomic_store8);\n\n// i64.atomic.store16 -> atomic.store<i16 from i64>\nfunction builtin_i64_atomic_store16(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store16, builtin_i64_atomic_store16);\n\n// i64.atomic.store32 -> atomic.store<i32 from i64>\nfunction builtin_i64_atomic_store32(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store32, builtin_i64_atomic_store32);\n\n// i64.atomic.store -> atomic.store<i64 from i64>\nfunction builtin_i64_atomic_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_store(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_store, builtin_i64_atomic_store);\n\n// i32.atomic.rmw8.add_u -> <i32>atomic.add<u8 from i32>\nfunction builtin_i32_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_add_u, builtin_i32_atomic_rmw8_add_u);\n\n// i32.atomic.rmw16.add_u -> <i32>atomic.add<u16 from i32>\nfunction builtin_i32_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_add_u, builtin_i32_atomic_rmw16_add_u);\n\n// i32.atomic.rmw.add -> <i32>atomic.add<i32 from i32>\nfunction builtin_i32_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_add, builtin_i32_atomic_rmw_add);\n\n// i64.atomic.rmw8.add_u -> <i64>atomic.add<u8 from i64>\nfunction builtin_i64_atomic_rmw8_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_add_u, builtin_i64_atomic_rmw8_add_u);\n\n// i64.atomic.rmw16.add_u -> <i64>atomic.add<u16 from i64>\nfunction builtin_i64_atomic_rmw16_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_add_u, builtin_i64_atomic_rmw16_add_u);\n\n// i64.atomic.rmw32.add_u -> <i64>atomic.add<u32 from i64>\nfunction builtin_i64_atomic_rmw32_add_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_add_u, builtin_i64_atomic_rmw32_add_u);\n\n// i64.atomic.rmw.add -> <i64>atomic.add<i64 from i64>\nfunction builtin_i64_atomic_rmw_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_add, builtin_i64_atomic_rmw_add);\n\n// i32.atomic.rmw8.sub_u -> <i32>atomic.sub<u8 from i32>\nfunction builtin_i32_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_sub_u, builtin_i32_atomic_rmw8_sub_u);\n\n// i32.atomic.rmw16.sub_u -> <i32>atomic.sub<u16 from i32>\nfunction builtin_i32_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_sub_u, builtin_i32_atomic_rmw16_sub_u);\n\n// i32.atomic.rmw.sub -> <i32>atomic.sub<i32 from i32>\nfunction builtin_i32_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_sub, builtin_i32_atomic_rmw_sub);\n\n// i64.atomic.rmw8.sub_u -> <i64>atomic.sub<u8 from i64>\nfunction builtin_i64_atomic_rmw8_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_sub_u, builtin_i64_atomic_rmw8_sub_u);\n\n// i64.atomic.rmw16.sub_u -> <i64>atomic.sub<u16 from i64>\nfunction builtin_i64_atomic_rmw16_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_sub_u, builtin_i64_atomic_rmw16_sub_u);\n\n// i64.atomic.rmw32.sub_u -> <i64>atomic.sub<u32 from i64>\nfunction builtin_i64_atomic_rmw32_sub_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_sub_u, builtin_i64_atomic_rmw32_sub_u);\n\n// i64.atomic.rmw.sub -> <i64>atomic.sub<i64 from i64>\nfunction builtin_i64_atomic_rmw_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_sub, builtin_i64_atomic_rmw_sub);\n\n// i32.atomic.rmw8.and_u -> <i32>atomic.and<u8 from i32>\nfunction builtin_i32_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_and_u, builtin_i32_atomic_rmw8_and_u);\n\n// i32.atomic.rmw16.and_u -> <i32>atomic.and<u16 from i32>\nfunction builtin_i32_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_and_u, builtin_i32_atomic_rmw16_and_u);\n\n// i32.atomic.rmw.and -> <i32>atomic.and<i32 from i32>\nfunction builtin_i32_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_and, builtin_i32_atomic_rmw_and);\n\n// i64.atomic.rmw8.and_u -> <i64>atomic.and<u8 from i64>\nfunction builtin_i64_atomic_rmw8_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_and_u, builtin_i64_atomic_rmw8_and_u);\n\n// i64.atomic.rmw16.and_u -> <i64>atomic.and<u16 from i64>\nfunction builtin_i64_atomic_rmw16_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_and_u, builtin_i64_atomic_rmw16_and_u);\n\n// i64.atomic.rmw32.and_u -> <i64>atomic.and<u32 from i64>\nfunction builtin_i64_atomic_rmw32_and_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_and_u, builtin_i64_atomic_rmw32_and_u);\n\n// i64.atomic.rmw.and -> <i64>atomic.and<i64 from i64>\nfunction builtin_i64_atomic_rmw_and(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_and(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_and, builtin_i64_atomic_rmw_and);\n\n// i32.atomic.rmw8.or_u -> <i32>atomic.or<u8 from i32>\nfunction builtin_i32_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_or_u, builtin_i32_atomic_rmw8_or_u);\n\n// i32.atomic.rmw16.or_u -> <i32atomic.or<u16 from i32>\nfunction builtin_i32_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_or_u, builtin_i32_atomic_rmw16_or_u);\n\n// i32.atomic.rmw.or -> <i32>atomic.or<i32 from i32>\nfunction builtin_i32_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_or, builtin_i32_atomic_rmw_or);\n\n// i64.atomic.rmw8.or_u -> <i64>atomic.or<u8 from i64>\nfunction builtin_i64_atomic_rmw8_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_or_u, builtin_i64_atomic_rmw8_or_u);\n\n// i64.atomic.rmw16.or_u -> <i64>atomic.or<u16 from i64>\nfunction builtin_i64_atomic_rmw16_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_or_u, builtin_i64_atomic_rmw16_or_u);\n\n// i64.atomic.rmw32.or_u -> <i64>atomic.or<u32 from i64>\nfunction builtin_i64_atomic_rmw32_or_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_or_u, builtin_i64_atomic_rmw32_or_u);\n\n// i64.atomic.rmw.or -> <i64>atomic.or<i64 from i64>\nfunction builtin_i64_atomic_rmw_or(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_or(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_or, builtin_i64_atomic_rmw_or);\n\n// i32.atomic.rmw8.xor_u -> <i32>atomic.xor<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xor_u, builtin_i32_atomic_rmw8_xor_u);\n\n// i32.atomic.rmw16.xor_u -> <i32>atomic.xor<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xor_u, builtin_i32_atomic_rmw16_xor_u);\n\n// i32.atomic.rmw.xor -> <i32>atomic.xor<i32 from i32>\nfunction builtin_i32_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xor, builtin_i32_atomic_rmw_xor);\n\n// i64.atomic.rmw8.xor_u -> <i64>atomic.xor<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xor_u, builtin_i64_atomic_rmw8_xor_u);\n\n// i64.atomic.rmw16.xor_u -> <i64>atomic.xor<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xor_u, builtin_i64_atomic_rmw16_xor_u);\n\n// i64.atomic.rmw32.xor_u -> <i64>atomic.xor<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xor_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xor_u, builtin_i64_atomic_rmw32_xor_u);\n\n// i64.atomic.rmw.xor -> <i64>atomic.xor<i64 from i64>\nfunction builtin_i64_atomic_rmw_xor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xor(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xor, builtin_i64_atomic_rmw_xor);\n\n// i32.atomic.rmw8.xchg_u -> <i32>atomic.xchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_xchg_u, builtin_i32_atomic_rmw8_xchg_u);\n\n// i32.atomic.rmw16.xchg_u -> <i32>atomic.xchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_xchg_u, builtin_i32_atomic_rmw16_xchg_u);\n\n// i32.atomic.rmw.xchg -> <i32>atomic.xchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_xchg, builtin_i32_atomic_rmw_xchg);\n\n// i64.atomic.rmw8.xchg_u -> <i64>atomic.xchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_xchg_u, builtin_i64_atomic_rmw8_xchg_u);\n\n// i64.atomic.rmw16.xchg_u -> <i64>atomic.xchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_xchg_u, builtin_i64_atomic_rmw16_xchg_u);\n\n// i64.atomic.rmw32.xchg_u -> <i64>atomic.xchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_xchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_xchg_u, builtin_i64_atomic_rmw32_xchg_u);\n\n// i64.atomic.rmw.xchg -> <i64>atomic.xchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_xchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_xchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_xchg, builtin_i64_atomic_rmw_xchg);\n\n// i32.atomic.rmw8.cmpxchg_u -> <i32>atomic.cmpxchg<u8 from i32>\nfunction builtin_i32_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw8_cmpxchg_u, builtin_i32_atomic_rmw8_cmpxchg_u);\n\n// i32.atomic.rmw16.cmpxchg_u -> <i32>atomic.cmpxchg<u16 from i32>\nfunction builtin_i32_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw16_cmpxchg_u, builtin_i32_atomic_rmw16_cmpxchg_u);\n\n// i32.atomic.rmw.cmpxchg -> <i32>atomic.cmpxchg<i32 from i32>\nfunction builtin_i32_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i32_atomic_rmw_cmpxchg, builtin_i32_atomic_rmw_cmpxchg);\n\n// i64.atomic.rmw8.cmpxchg_u -> <i64>atomic.cmpxchg<u8 from i64>\nfunction builtin_i64_atomic_rmw8_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw8_cmpxchg_u, builtin_i64_atomic_rmw8_cmpxchg_u);\n\n// i64.atomic.rmw16.cmpxchg_u -> <i64>atomic.cmpxchg<u16 from i64>\nfunction builtin_i64_atomic_rmw16_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw16_cmpxchg_u, builtin_i64_atomic_rmw16_cmpxchg_u);\n\n// i64.atomic.rmw32.cmpxchg_u -> <i64>atomic.cmpxchg<u32 from i64>\nfunction builtin_i64_atomic_rmw32_cmpxchg_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw32_cmpxchg_u, builtin_i64_atomic_rmw32_cmpxchg_u);\n\n// i64.atomic.rmw.cmpxchg -> <i64>atomic.cmpxchg<i64 from i64>\nfunction builtin_i64_atomic_rmw_cmpxchg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  ctx.contextIsExact = true;\n  return builtin_atomic_cmpxchg(ctx);\n}\nbuiltins.set(BuiltinNames.i64_atomic_rmw_cmpxchg, builtin_i64_atomic_rmw_cmpxchg);\n\n// i32.wait -> atomic.wait<i32>\nfunction builtin_i32_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i32_wait, builtin_i32_wait);\n\n// i64.wait -> atomic.wait<i64>\nfunction builtin_i64_wait(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_atomic_wait(ctx);\n}\nbuiltins.set(BuiltinNames.i64_wait, builtin_i64_wait);\n\n// v128.load -> load<v128>\nfunction builtin_v128_load(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  return builtin_load(ctx);\n}\nbuiltins.set(BuiltinNames.v128_load, builtin_v128_load);\n\n// v128.store -> store<v128 from v128>\nfunction builtin_v128_store(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.v128 ];\n  ctx.contextualType = Type.v128;\n  ctx.contextIsExact = true;\n  return builtin_store(ctx);\n}\nbuiltins.set(BuiltinNames.v128_store, builtin_v128_store);\n\n// i8x16_splat -> v128.splat<i8>\nfunction builtin_i8x16_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_splat, builtin_i8x16_splat);\n\n// i8x16.extract_lane_s -> <i32>v128.extract_lane<i8>\nfunction builtin_i8x16_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_s, builtin_i8x16_extract_lane_s);\n\n// i8x16.extract_lane_u -> <i32>v128.extract_lane<u8>\nfunction builtin_i8x16_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_extract_lane_u, builtin_i8x16_extract_lane_u);\n\n// i8x16.replace_lane -> v128.replace_lane<i8>\nfunction builtin_i8x16_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_replace_lane, builtin_i8x16_replace_lane);\n\n// i8x16.add -> v128.add<i8>\nfunction builtin_i8x16_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add, builtin_i8x16_add);\n\n// i8x16.sub -> v128.sub<i8>\nfunction builtin_i8x16_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub, builtin_i8x16_sub);\n\n// i8x16.mul -> v128.mul<i8>\nfunction builtin_i8x16_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_mul, builtin_i8x16_mul);\n\n// i8x16.min_s -> v128.min<i8>\nfunction builtin_i8x16_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_s, builtin_i8x16_min_s);\n\n// i8x16.min_u -> v128.min<u8>\nfunction builtin_i8x16_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_min_u, builtin_i8x16_min_u);\n\n// i8x16.max_s -> v128.max<i8>\nfunction builtin_i8x16_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_s, builtin_i8x16_max_s);\n\n// i8x16.max_u -> v128.max<u8>\nfunction builtin_i8x16_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_max_u, builtin_i8x16_max_u);\n\n// i8x16.avgr_u -> v128.avgr<u8>\nfunction builtin_i8x16_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_avgr_u, builtin_i8x16_avgr_u);\n\n// i8x16.abs -> v128.abs<i8>\nfunction builtin_i8x16_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_abs, builtin_i8x16_abs);\n\n// i8x16.neg -> v128.neg<i8>\nfunction builtin_i8x16_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_neg, builtin_i8x16_neg);\n\n// i8x16.add_saturate_s -> v128.add_saturate<i8>\nfunction builtin_i8x16_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_s, builtin_i8x16_add_saturate_s);\n\n// i8x16.add_saturate_u -> v128.add_saturate<u8>\nfunction builtin_i8x16_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_add_saturate_u, builtin_i8x16_add_saturate_u);\n\n// i8x16.sub_saturate_s -> v128.sub_saturate<i8>\nfunction builtin_i8x16_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_s, builtin_i8x16_sub_saturate_s);\n\n// i8x16.sub_saturate_u -> v128.sub_saturate<u8>\nfunction builtin_i8x16_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_sub_saturate_u, builtin_i8x16_sub_saturate_u);\n\n// i8x16.shl -> v128.shl<i8>\nfunction builtin_i8x16_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shl, builtin_i8x16_shl);\n\n// i8x16.shr_s -> v128.shr<i8>\nfunction builtin_i8x16_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_s, builtin_i8x16_shr_s);\n\n// i8x16.shr_u -> v128.shr<u8>\nfunction builtin_i8x16_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_shr_u, builtin_i8x16_shr_u);\n\n// i8x16.any_true -> v128.any_true<i8>\nfunction builtin_i8x16_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_any_true, builtin_i8x16_any_true);\n\n// i8x16.all_true -> v128.all_true<i8>\nfunction builtin_i8x16_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_all_true, builtin_i8x16_all_true);\n\n// i8x16.bitmask -> v128.bitmask<i8>\nfunction builtin_i8x16_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_bitmask, builtin_i8x16_bitmask);\n\n// i8x16.eq -> v128.eq<i8>\nfunction builtin_i8x16_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_eq, builtin_i8x16_eq);\n\n// i8x16.ne -> v128.ne<i8>\nfunction builtin_i8x16_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ne, builtin_i8x16_ne);\n\n// i8x16.lt_s -> v128.lt<i8>\nfunction builtin_i8x16_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_s, builtin_i8x16_lt_s);\n\n// i8x16.lt_u -> v128.lt<u8>\nfunction builtin_i8x16_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_lt_u, builtin_i8x16_lt_u);\n\n// i8x16.le_s -> v128.le<i8>\nfunction builtin_i8x16_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_s, builtin_i8x16_le_s);\n\n// i8x16.le_u -> v128.le<u8>\nfunction builtin_i8x16_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_le_u, builtin_i8x16_le_u);\n\n// i8x16.gt_s -> v128.gt<i8>\nfunction builtin_i8x16_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_s, builtin_i8x16_gt_s);\n\n// i8x16.gt_u -> v128.gt<u8>\nfunction builtin_i8x16_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_gt_u, builtin_i8x16_gt_u);\n\n// i8x16.ge_s -> v128.ge<i8>\nfunction builtin_i8x16_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_s, builtin_i8x16_ge_s);\n\n// i8x16.ge_u -> v128.ge<u8>\nfunction builtin_i8x16_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_ge_u, builtin_i8x16_ge_u);\n\n// i8x16.narrow_i16x8_s -> v128.narrow<i16>\nfunction builtin_i8x16_narrow_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_s, builtin_i8x16_narrow_i16x8_s);\n\n// i8x16.narrow_i16x8_u -> v128.narrow<u16>\nfunction builtin_i8x16_narrow_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i8x16_narrow_i16x8_u, builtin_i8x16_narrow_i16x8_u);\n\n// i16x8.splat -> v128.splat<i16>\nfunction builtin_i16x8_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_splat, builtin_i16x8_splat);\n\n// i16x8.extract_lane_s -> v128.extract_lane<i16>\nfunction builtin_i16x8_extract_lane_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_s, builtin_i16x8_extract_lane_s);\n\n// i16x8..extract_lane_u -> v128.extract_lane<u16>\nfunction builtin_i16x8_extract_lane_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_extract_lane_u, builtin_i16x8_extract_lane_u);\n\n// i16x8.replace_lane -> v128.replace_lane<i16>\nfunction builtin_i16x8_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_replace_lane, builtin_i16x8_replace_lane);\n\n// i16x8.add -> v128.add<i16>\nfunction builtin_i16x8_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add, builtin_i16x8_add);\n\n// i16x8.sub -> v128.sub<i16>\nfunction builtin_i16x8_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub, builtin_i16x8_sub);\n\n// i16x8.mul -> v128.mul<i16>\nfunction builtin_i16x8_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_mul, builtin_i16x8_mul);\n\n// i16x8.min_s -> v128.min<i16>\nfunction builtin_i16x8_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_s, builtin_i16x8_min_s);\n\n// i16x8.min_u -> v128.min<u16>\nfunction builtin_i16x8_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_min_u, builtin_i16x8_min_u);\n\n// i16x8.max_s -> v128.max<i16>\nfunction builtin_i16x8_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_s, builtin_i16x8_max_s);\n\n// i16x8.max_u -> v128.max<u16>\nfunction builtin_i16x8_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_max_u, builtin_i16x8_max_u);\n\n// i16x8.avgr_u -> v128.avgr<u16>\nfunction builtin_i16x8_avgr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_avgr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_avgr_u, builtin_i16x8_avgr_u);\n\n// i16x8.abs -> v128.abs<i16>\nfunction builtin_i16x8_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_abs, builtin_i16x8_abs);\n\n// i16x8.neg -> v128.neg<i16>\nfunction builtin_i16x8_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_neg, builtin_i16x8_neg);\n\n// i16x8.add_saturate_s -> v128.add_saturate<i16>\nfunction builtin_i16x8_add_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_s, builtin_i16x8_add_saturate_s);\n\n// i16x8.add_saturate_u -> v128.add_saturate<u16>\nfunction builtin_i16x8_add_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_add_saturate_u, builtin_i16x8_add_saturate_u);\n\n// i16x8.sub_saturate_s -> v128.sub_saturate<i16>\nfunction builtin_i16x8_sub_saturate_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_s, builtin_i16x8_sub_saturate_s);\n\n// i16x8.sub_saturate_u -> v128.sub_saturate<u16>\nfunction builtin_i16x8_sub_saturate_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub_saturate(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_sub_saturate_u, builtin_i16x8_sub_saturate_u);\n\n// i16x8.shl -> v128.shl<i16>\nfunction builtin_i16x8_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shl, builtin_i16x8_shl);\n\n// i16x8.shr_s -> v128.shr<i16>\nfunction builtin_i16x8_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_s, builtin_i16x8_shr_s);\n\n// i16x8.shr_u -> v128.shr<u16>\nfunction builtin_i16x8_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_shr_u, builtin_i16x8_shr_u);\n\n// i16x8.any_true -> v128.any_true<i16>\nfunction builtin_i16x8_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_any_true, builtin_i16x8_any_true);\n\n// i16x8.all_true -> v128.all_true<i16>\nfunction builtin_i16x8_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_all_true, builtin_i16x8_all_true);\n\n// i16x8.bitmask -> v128.bitmask<i16>\nfunction builtin_i16x8_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_bitmask, builtin_i16x8_bitmask);\n\n// i16x8.eq -> v128.eq<i16>\nfunction builtin_i16x8_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_eq, builtin_i16x8_eq);\n\n// i16x8.ne -> v128.ne<i16>\nfunction builtin_i16x8_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ne, builtin_i16x8_ne);\n\n// i16x8.lt_s -> v128.lt<i16>\nfunction builtin_i16x8_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_s, builtin_i16x8_lt_s);\n\n// i16x8.lt_u -> v128.lt<u16>\nfunction builtin_i16x8_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_lt_u, builtin_i16x8_lt_u);\n\n// i16x8.le_s -> v128.le<i16>\nfunction builtin_i16x8_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_s, builtin_i16x8_le_s);\n\n// i16x8.le_u -> v128.le<u16>\nfunction builtin_i16x8_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_le_u, builtin_i16x8_le_u);\n\n// i16x8.gt_s -> v128.gt<i16>\nfunction builtin_i16x8_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_s, builtin_i16x8_gt_s);\n\n// i16x8.gt_u -> v128.gt<u16>\nfunction builtin_i16x8_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_gt_u, builtin_i16x8_gt_u);\n\n// i16x8.ge_s -> v128.ge<i16>\nfunction builtin_i16x8_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_s, builtin_i16x8_ge_s);\n\n// i16x8.ge_u -> v128.ge<u16>\nfunction builtin_i16x8_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_ge_u, builtin_i16x8_ge_u);\n\n// i16x8.narrow_i32x4_s -> v128.narrow<i32>\nfunction builtin_i16x8_narrow_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_s, builtin_i16x8_narrow_i32x4_s);\n\n// i16x8.narrow_i32x4_u -> v128.narrow<u32>\nfunction builtin_i16x8_narrow_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_narrow(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_narrow_i32x4_u, builtin_i16x8_narrow_i32x4_u);\n\n// i16x8.widen_low_i8x16_s -> v128.widen_low<i8>\nfunction builtin_i16x8_widen_low_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_s, builtin_i16x8_widen_low_i8x16_s);\n\n// i16x8.widen_low_i8x16_u -> v128.widen_low<u8>\nfunction builtin_i16x8_widen_low_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_low_i8x16_u, builtin_i16x8_widen_low_i8x16_u);\n\n// i16x8.widen_high_i8x16_s -> v128.widen_high<i8>\nfunction builtin_i16x8_widen_high_i8x16_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_s, builtin_i16x8_widen_high_i8x16_s);\n\n// i16x8.widen_high_i8x16_u -> v128.widen_high<u8>\nfunction builtin_i16x8_widen_high_i8x16_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_widen_high_i8x16_u, builtin_i16x8_widen_high_i8x16_u);\n\n// i16x8.load8x8_s -> v128.load_ext<i8>\nfunction builtin_i16x8_load8x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_s, builtin_i16x8_load8x8_s);\n\n// i16x8.load8x8_u -> v128.load_ext<u8>\nfunction builtin_i16x8_load8x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i16x8_load8x8_u, builtin_i16x8_load8x8_u);\n\n// i32x4.splat -> v128.splat<i32>\nfunction builtin_i32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_splat, builtin_i32x4_splat);\n\n// i32x4.extract_lane -> <i32>v128.extract_lane<i32>\nfunction builtin_i32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_extract_lane, builtin_i32x4_extract_lane);\n\n// i32x4.replace_lane -> v128.replace_lane<i32>\nfunction builtin_i32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_replace_lane, builtin_i32x4_replace_lane);\n\n// i32x4.add -> v128.add<i32>\nfunction builtin_i32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_add, builtin_i32x4_add);\n\n// i32x4.sub -> v128.sub<i32>\nfunction builtin_i32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_sub, builtin_i32x4_sub);\n\n// i32x4.mul -> v128.mul<i32>\nfunction builtin_i32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_mul, builtin_i32x4_mul);\n\n// i32x4.min_s -> v128.min<i32>\nfunction builtin_i32x4_min_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_s, builtin_i32x4_min_s);\n\n// i32x4.min_u -> v128.min<u32>\nfunction builtin_i32x4_min_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_min_u, builtin_i32x4_min_u);\n\n// i32x4.max_s -> v128.max<i32>\nfunction builtin_i32x4_max_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_s, builtin_i32x4_max_s);\n\n// i32x4.max_u -> v128.max<u32>\nfunction builtin_i32x4_max_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_max_u, builtin_i32x4_max_u);\n\n// i32x4.dot_i16x8_s -> v128.dot<i16>\nfunction builtin_i32x4_dot_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_dot(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_dot_i16x8_s, builtin_i32x4_dot_i16x8_s);\n\n// i32x4.abs -> v128.abs<i32>\nfunction builtin_i32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_abs, builtin_i32x4_abs);\n\n// i32x4.neg -> v128.neg<i32>\nfunction builtin_i32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_neg, builtin_i32x4_neg);\n\n// i32x4.shl -> v128.shl<i32>\nfunction builtin_i32x4_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shl, builtin_i32x4_shl);\n\n// i32x4.shr_s -> v128.shr<i32>\nfunction builtin_i32x4_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_s, builtin_i32x4_shr_s);\n\n// i32x4.shr_u -> v128.shr<u32>\nfunction builtin_i32x4_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_shr_u, builtin_i32x4_shr_u);\n\n// i32x4.any_true -> v128.any_true<i32>\nfunction builtin_i32x4_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_any_true, builtin_i32x4_any_true);\n\n// i32x4.all_true -> v128.all_true<i32>\nfunction builtin_i32x4_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_all_true, builtin_i32x4_all_true);\n\n// i32x4.bitmask -> v128.bitmask<i32>\nfunction builtin_i32x4_bitmask(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_bitmask(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_bitmask, builtin_i32x4_bitmask);\n\n// i32x4.eq -> v128.eq<i32>\nfunction builtin_i32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_eq, builtin_i32x4_eq);\n\n// i32x4.ne -> v128.ne<i32>\nfunction builtin_i32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ne, builtin_i32x4_ne);\n\n// i32x4.lt_s -> v128.lt<i32>\nfunction builtin_i32x4_lt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_s, builtin_i32x4_lt_s);\n\n// i32x4.lt_u -> v128.lt<u32>\nfunction builtin_i32x4_lt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_lt_u, builtin_i32x4_lt_u);\n\n// i32x4.le_s -> v128.le<i32>\nfunction builtin_i32x4_le_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_s, builtin_i32x4_le_s);\n\n// i32x4.le_u -> v128.le<u32>\nfunction builtin_i32x4_le_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_le_u, builtin_i32x4_le_u);\n\n// i32x4.gt_s -> v128.gt<i32>\nfunction builtin_i32x4_gt_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_s, builtin_i32x4_gt_s);\n\n// i32x4.gt_u -> v128.gt<u32>\nfunction builtin_i32x4_gt_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_gt_u, builtin_i32x4_gt_u);\n\n// i32x4.ge_s -> v128.ge<i32>\nfunction builtin_i32x4_ge_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_s, builtin_i32x4_ge_s);\n\n// i32x4.ge_u -> v128.ge<u32>\nfunction builtin_i32x4_ge_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_ge_u, builtin_i32x4_ge_u);\n\n// i32x4.trunc_sat_f32x4_s -> v128.trunc_sat<i32>\nfunction builtin_i32x4_trunc_sat_f32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_s, builtin_i32x4_trunc_sat_f32x4_s);\n\n// i32x4.trunc_sat_f32x4_u -> v128.trunc_sat<u32>\nfunction builtin_i32x4_trunc_sat_f32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_trunc_sat_f32x4_u, builtin_i32x4_trunc_sat_f32x4_u);\n\n// i32x4.widen_low_i16x8_s -> // v128.widen_low<i16>\nfunction builtin_i32x4_widen_low_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_s, builtin_i32x4_widen_low_i16x8_s);\n\n// i32x4.widen_low_i16x8_u -> v128.widen_low<u16>\nfunction builtin_i32x4_widen_low_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_low(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_low_i16x8_u, builtin_i32x4_widen_low_i16x8_u);\n\n// i32x4.widen_high_i16x8_s -> v128.widen_high<i16>\nfunction builtin_i32x4_widen_high_i16x8_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_s, builtin_i32x4_widen_high_i16x8_s);\n\n// i32x4.widen_high_i16x8_u -> v128.widen_high<u16>\nfunction builtin_i32x4_widen_high_i16x8_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_widen_high(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_widen_high_i16x8_u, builtin_i32x4_widen_high_i16x8_u);\n\n// i32x4.load16x4_s -> v128.load_ext<i16>\nfunction builtin_i32x4_load16x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_s, builtin_i32x4_load16x4_s);\n\n// i32x4.load16x4_u -> v128.load_ext<u16>\nfunction builtin_i32x4_load16x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i32x4_load16x4_u, builtin_i32x4_load16x4_u);\n\n// i64x2.splat -> v128.splat<i64>\nfunction builtin_i64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_splat, builtin_i64x2_splat);\n\n// i64x2.extract_lane -> <i64>v128.extract_lane<i64>\nfunction builtin_i64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_extract_lane, builtin_i64x2_extract_lane);\n\n// i64x2.replace_lane -> v128.replace_lane<i64>\nfunction builtin_i64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_replace_lane, builtin_i64x2_replace_lane);\n\n// i64x2.add -> v128.add<i64>\nfunction builtin_i64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_add, builtin_i64x2_add);\n\n// i64x2.sub -> v128.sub<i64>\nfunction builtin_i64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_sub, builtin_i64x2_sub);\n\n// i64x2.neg -> v128.neg<i64>\nfunction builtin_i64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_neg, builtin_i64x2_neg);\n\n// i64x2.shl -> v128.shl<i64>\nfunction builtin_i64x2_shl(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shl(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shl, builtin_i64x2_shl);\n\n// i64x2.shr_s -> v128.shr<i64>\nfunction builtin_i64x2_shr_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_s, builtin_i64x2_shr_s);\n\n// i64x2.shr_u -> v128.shr<u64>\nfunction builtin_i64x2_shr_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shr(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_shr_u, builtin_i64x2_shr_u);\n\n// i64x2.any_true -> v128.any_true<i64>\nfunction builtin_i64x2_any_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_any_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_any_true, builtin_i64x2_any_true);\n\n// i64x2.all_true -> v128.all_true<i64>\nfunction builtin_i64x2_all_true(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.i32;\n  return builtin_v128_all_true(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_all_true, builtin_i64x2_all_true);\n\n// i64x2.trunc_sat_f64x2_s -> v128.trunc_sat<i64>\nfunction builtin_i64x2_trunc_sat_f64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_s, builtin_i64x2_trunc_sat_f64x2_s);\n\n// i64x2.trunc_sat_f64x2_u -> v128.trunc_sat<u64>\nfunction builtin_i64x2_trunc_sat_f64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc_sat(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_trunc_sat_f64x2_u, builtin_i64x2_trunc_sat_f64x2_u);\n\n// i64x2.load32x2_s -> v128.load_ext<i32>\nfunction builtin_i64x2_load32x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_s, builtin_i64x2_load32x2_s);\n\n// i64x2.load32x2_u -> v128.load_ext<u32>\nfunction builtin_i64x2_load32x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_ext(ctx);\n}\nbuiltins.set(BuiltinNames.i64x2_load32x2_u, builtin_i64x2_load32x2_u);\n\n// f32x4.splat -> v128.splat<f32>\nfunction builtin_f32x4_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_splat, builtin_f32x4_splat);\n\n// f32x4.extract_lane -> <f32>v128.extract_lane<f32>\nfunction builtin_f32x4_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.f32;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_extract_lane, builtin_f32x4_extract_lane);\n\n// f32x4.replace_lane -> v128.replace_lane<f32>\nfunction builtin_f32x4_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_replace_lane, builtin_f32x4_replace_lane);\n\n// f32x4.add -> v128.add<f32>\nfunction builtin_f32x4_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_add, builtin_f32x4_add);\n\n// f32x4.sub -> v128.sub<f32>\nfunction builtin_f32x4_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sub, builtin_f32x4_sub);\n\n// f32x4.mul -> v128.mul<f32>\nfunction builtin_f32x4_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_mul, builtin_f32x4_mul);\n\n// f32x4.div -> v128.div<f32>\nfunction builtin_f32x4_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_div, builtin_f32x4_div);\n\n// f32x4.neg -> v128.neg<f32>\nfunction builtin_f32x4_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_neg, builtin_f32x4_neg);\n\n// f32x4.min -> v128.min<f32>\nfunction builtin_f32x4_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_min, builtin_f32x4_min);\n\n// f32x4.max -> v128.max<f32>\nfunction builtin_f32x4_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_max, builtin_f32x4_max);\n\n// f32x4.pmin -> v128.pmin<f32>\nfunction builtin_f32x4_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmin, builtin_f32x4_pmin);\n\n// f32x4.pmax -> v128.pmax<f32>\nfunction builtin_f32x4_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_pmax, builtin_f32x4_pmax);\n\n// f32x4.abs -> v128.abs<f32>\nfunction builtin_f32x4_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_abs, builtin_f32x4_abs);\n\n// f32x4.sqrt -> v128.sqrt<f32>\nfunction builtin_f32x4_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_sqrt, builtin_f32x4_sqrt);\n\n// f32x4.ceil -> v128.ceil<f32>\nfunction builtin_f32x4_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ceil, builtin_f32x4_ceil);\n\n// f32x4.floor -> v128.floor<f32>\nfunction builtin_f32x4_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_floor, builtin_f32x4_floor);\n\n// f32x4.trunc -> v128.trunc<f32>\nfunction builtin_f32x4_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_trunc, builtin_f32x4_trunc);\n\n// f32x4.nearest -> v128.nearest<f32>\nfunction builtin_f32x4_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_nearest, builtin_f32x4_nearest);\n\n// f32x4.eq -> v128.eq<f32>\nfunction builtin_f32x4_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_eq, builtin_f32x4_eq);\n\n// f32x4.ne -> v128.ne<f32>\nfunction builtin_f32x4_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ne, builtin_f32x4_ne);\n\n// f32x4.lt -> v128.lt<f32>\nfunction builtin_f32x4_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_lt, builtin_f32x4_lt);\n\n// f32x4.le -> v128.le<f32>\nfunction builtin_f32x4_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_le, builtin_f32x4_le);\n\n// f32x4.gt -> v128.gt<f32>\nfunction builtin_f32x4_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_gt, builtin_f32x4_gt);\n\n// f32x4.ge -> v128.ge<f32>\nfunction builtin_f32x4_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_ge, builtin_f32x4_ge);\n\n// f32x4.convert_i32x4_s -> v128.convert<i32>\nfunction builtin_f32x4_convert_i32x4_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_s, builtin_f32x4_convert_i32x4_s);\n\n// f32x4.convert_i32x4_u -> v128.convert<u32>\nfunction builtin_f32x4_convert_i32x4_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_convert_i32x4_u, builtin_f32x4_convert_i32x4_u);\n\n// f32x4.qfma -> v128.qfma<f32>\nfunction builtin_f32x4_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfma, builtin_f32x4_qfma);\n\n// f32x4.qfms -> v128.qfms<f32>\nfunction builtin_f32x4_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f32x4_qfms, builtin_f32x4_qfms);\n\n// f64x2.splat -> v128.splat<f64>\nfunction builtin_f64x2_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_splat(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_splat, builtin_f64x2_splat);\n\n// f64x2.extract_lane -> <f64>v128.extract_lane<f64>\nfunction builtin_f64x2_extract_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.f64;\n  return builtin_v128_extract_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_extract_lane, builtin_f64x2_extract_lane);\n\n// f64x2.replace_lane -> v128.replace_lane\nfunction builtin_f64x2_replace_lane(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_replace_lane(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_replace_lane, builtin_f64x2_replace_lane);\n\n// f64x2.add -> v128.add<f64>\nfunction builtin_f64x2_add(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_add(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_add, builtin_f64x2_add);\n\n// f64x2.sub -> v128.sub<f64>\nfunction builtin_f64x2_sub(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sub(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sub, builtin_f64x2_sub);\n\n// f64x2.mul -> v128.mul<f64>\nfunction builtin_f64x2_mul(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_mul(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_mul, builtin_f64x2_mul);\n\n// f64x2.div -> v128.div<f64>\nfunction builtin_f64x2_div(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_div(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_div, builtin_f64x2_div);\n\n// f64x2.neg -> v128.neg<f64>\nfunction builtin_f64x2_neg(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_neg(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_neg, builtin_f64x2_neg);\n\n// f64x2.min -> v128.min<f64>\nfunction builtin_f64x2_min(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_min(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_min, builtin_f64x2_min);\n\n// f64x2.max -> v128.max<f64>\nfunction builtin_f64x2_max(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_max(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_max, builtin_f64x2_max);\n\n// f64x2.pmin -> v128.pmin<f64>\nfunction builtin_f64x2_pmin(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmin(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmin, builtin_f64x2_pmin);\n\n// f64x2.pmax -> v128.pmax<f64>\nfunction builtin_f64x2_pmax(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_pmax(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_pmax, builtin_f64x2_pmax);\n\n// f64x2.abs -> v128.abs<f64>\nfunction builtin_f64x2_abs(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_abs(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_abs, builtin_f64x2_abs);\n\n// f64x2.sqrt -> v128.sqrt<f64>\nfunction builtin_f64x2_sqrt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_sqrt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_sqrt, builtin_f64x2_sqrt);\n\n// f64x2.ceil -> v128.ceil<f64>\nfunction builtin_f64x2_ceil(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ceil(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ceil, builtin_f64x2_ceil);\n\n// f64x2.floor -> v128.floor<f64>\nfunction builtin_f64x2_floor(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_floor(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_floor, builtin_f64x2_floor);\n\n// f64x2.trunc -> v128.trunc<f64>\nfunction builtin_f64x2_trunc(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_trunc(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_trunc, builtin_f64x2_trunc);\n\n// f64x2.nearest -> v128.nearest<f64>\nfunction builtin_f64x2_nearest(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_nearest(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_nearest, builtin_f64x2_nearest);\n\n// f64x2.eq -> v128.eq<f64>\nfunction builtin_f64x2_eq(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_eq(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_eq, builtin_f64x2_eq);\n\n// f64x2.ne -> v128.ne<f64>\nfunction builtin_f64x2_ne(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ne(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ne, builtin_f64x2_ne);\n\n// f64x2.lt -> v128.lt<f64>\nfunction builtin_f64x2_lt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_lt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_lt, builtin_f64x2_lt);\n\n// f64x2.le -> v128.le<f64>\nfunction builtin_f64x2_le(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_le(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_le, builtin_f64x2_le);\n\n// f64x2.gt -> v128.gt<f64>\nfunction builtin_f64x2_gt(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_gt(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_gt, builtin_f64x2_gt);\n\n// f64x2.ge -> v128.ge<f64>\nfunction builtin_f64x2_ge(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_ge(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_ge, builtin_f64x2_ge);\n\n// f64x2.convert_i64x2_s -> v128.convert<i64>\nfunction builtin_f64x2_convert_i64x2_s(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_s, builtin_f64x2_convert_i64x2_s);\n\n// f64x2.convert_i64x2_u -> v128.convert<u64>\nfunction builtin_f64x2_convert_i64x2_u(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_convert(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_convert_i64x2_u, builtin_f64x2_convert_i64x2_u);\n\n// f64x2.qfma -> v128.qfma<f64>\nfunction builtin_f64x2_qfma(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfma(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfma, builtin_f64x2_qfma);\n\n// f64x2.qfms -> v128.qfms<f64>\nfunction builtin_f64x2_qfms(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.f64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_qfms(ctx);\n}\nbuiltins.set(BuiltinNames.f64x2_qfms, builtin_f64x2_qfms);\n\n// v8x16.shuffle -> v128.shuffle<i8>\nfunction builtin_v8x16_shuffle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.i8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_shuffle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_shuffle, builtin_v8x16_shuffle);\n\n// v8x16.swizzle -> v128.swizzle\nfunction builtin_v8x16_swizzle(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = null;\n  ctx.contextualType = Type.v128;\n  return builtin_v128_swizzle(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_swizzle, builtin_v8x16_swizzle);\n\n// v8x16.load_splat -> v128.load_splat<u8>\nfunction builtin_v8x16_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u8 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v8x16_load_splat, builtin_v8x16_load_splat);\n\n// v16x8.load_splat -> v128.load_splat<u16>\nfunction builtin_v16x8_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u16 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v16x8_load_splat, builtin_v16x8_load_splat);\n\n// v32x4.load_splat -> v128.load_splat<u32>\nfunction builtin_v32x4_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u32 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v32x4_load_splat, builtin_v32x4_load_splat);\n\n// v64x2.load_splat -> v128.load_splat<u64>\nfunction builtin_v64x2_load_splat(ctx: BuiltinContext): ExpressionRef {\n  checkTypeAbsent(ctx);\n  ctx.typeArguments = [ Type.u64 ];\n  ctx.contextualType = Type.v128;\n  return builtin_v128_load_splat(ctx);\n}\nbuiltins.set(BuiltinNames.v64x2_load_splat, builtin_v64x2_load_splat);\n\n// === Internal helpers =======================================================================\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  // TODO: for (let element of compiler.program.elementsByName.values()) {\n  for (let _values = Map_values(compiler.program.elementsByName), i = 0, k = _values.length; i < k; ++i) {\n    let element = unchecked(_values[i]);\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classReference = globalType.getClass();\n    if (\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinNames.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  // this function is @lazy: make sure it exists\n  compiler.compileFunction(visitInstance, true);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = _keys[i];\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instance.type.isManaged);\n    assert(instanceId == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\")) !== null) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        let visitThisType = assert(visitSig.thisType);\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          instance.type.isStrictlyAssignableTo(visitThisType) // incl. implemented on super\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        // TODO: for (let member of members.values()) {\n        for (let _values = Map_values(members), j = 0, l = _values.length; j < l; ++j) {\n          let member = unchecked(_values[j]);\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      module.flatten(code)\n    );\n    relooper.addBranchForSwitch(outer, block, [ instanceId ]);\n    blocks.push(block);\n  }\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    let base = instance.base;\n    if (base) relooper.addBranch(blocks[instanceId], blocks[base.id]);\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinNames.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var staticArrayPrototype = program.staticArrayPrototype;\n  var lastId = 0;\n  // TODO: for (let [instanceId, instance] of managedClasses) {\n  for (let _keys = Map_keys(managedClasses), i = 0, k = _keys.length; i < k; ++i) {\n    let instanceId = unchecked(_keys[i]);\n    let instance = assert(managedClasses.get(instanceId));\n    assert(instanceId == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(arrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    } else if (instance.extends(staticArrayPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.STATICARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n/** Compiles a class-specific instanceof helper, checking a ref against all concrete instances. */\nexport function compileClassInstanceOf(compiler: Compiler, prototype: ClassPrototype): void {\n  var module = compiler.module;\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var instanceofInstance = assert(prototype.program.instanceofInstance);\n  compiler.compileFunction(instanceofInstance);\n\n  var stmts = new Array<ExpressionRef>();\n\n  // if (!ref) return false\n  stmts.push(\n    module.if(\n      module.unary(\n        nativeSizeType == NativeType.I64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.local_get(0, nativeSizeType)\n      ),\n      module.return(\n        module.i32(0)\n      )\n    )\n  );\n\n  // if (__instanceof(ref, ID[i])) return true\n  var instances = prototype.instances;\n  if (instances !== null && instances.size > 0) {\n    // TODO: for (let instance of instances.values()) {\n    for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      stmts.push(\n        module.if(\n          module.call(instanceofInstance.internalName, [\n            module.local_get(0, nativeSizeType),\n            module.i32(instance.id)\n          ], NativeType.I32),\n          module.return(\n            module.i32(1)\n          )\n        )\n      );\n    }\n  }\n\n  // return false\n  stmts.push(\n    module.return(\n      module.i32(0)\n    )\n  );\n\n  module.addFunction(prototype.internalName + \"~instanceof\", nativeSizeType, NativeType.I32, null, module.flatten(stmts));\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(ctx: BuiltinContext): Type | null {\n  var compiler = ctx.compiler;\n  var operands = ctx.operands;\n  var typeArguments = ctx.typeArguments;\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        ctx.reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length > 0) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments !== null && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString()\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    ctx.reportNode.argumentsRange, \"1\", operands.length.toString()\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var module = compiler.module;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    let expr = compiler.compileExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      assert(getConstValueI64High(precomp) == 0); // TODO\n      value = getConstValueI64Low(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    let expr = compiler.compileExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n    if (precomp) {\n      value = getConstValueI32(precomp);\n    } else {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Evaluates a compile-time constant immediate align argument. */\nfunction evaluateImmediateAlign(expression: Expression, naturalAlign: i32, compiler: Compiler): i32 {\n  var align = evaluateImmediateOffset(expression, compiler);\n  if (align < 0) return align;\n  if (align < 1 || naturalAlign > 16) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n      expression.range, \"Alignment\", \"1\", naturalAlign.toString()\n    );\n    return -1;\n  }\n  if (!isPowerOf2(align)) {\n    compiler.error(\n      DiagnosticCode._0_must_be_a_power_of_two,\n      expression.range, \"Alignment\"\n    );\n    return -1;\n  }\n  return align;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(ctx: BuiltinContext, feature: Feature): i32 {\n  var compiler = ctx.compiler;\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      ctx.reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var compiler = ctx.compiler;\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(ctx: BuiltinContext, setCurrentTypeOnError: bool = false): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let compiler = ctx.compiler;\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      ctx.reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(ctx: BuiltinContext): i32 {\n  var typeArguments = ctx.typeArguments;\n  if (typeArguments) {\n    let prototype = ctx.prototype;\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      ctx.reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(ctx: BuiltinContext, expected: i32): i32 {\n  var operands = ctx.operands;\n  if (operands.length != expected) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(ctx: BuiltinContext, expectedMinimum: i32, expectedMaximum: i32): i32 {\n  var operands = ctx.operands;\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    ctx.compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      ctx.reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Makes an usize constant matching contextual type if reasonable. */\nfunction contextualUsize(compiler: Compiler, value: i64, contextualType: Type): ExpressionRef {\n  var module = compiler.module;\n  // Check if contextual type fits\n  if (contextualType != Type.auto && contextualType.isIntegerValue) {\n    switch (contextualType.kind) {\n      case TypeKind.I32: {\n        if (i64_is_i32(value)) {\n          compiler.currentType = Type.i32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.U32: {\n        if (i64_is_u32(value)) {\n          compiler.currentType = Type.u32;\n          return module.i32(i64_low(value));\n        }\n        break;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        compiler.currentType = contextualType;\n        return module.i64(i64_low(value), i64_high(value));\n      }\n      // isize/usize falls through\n      // small int is probably not intended\n    }\n  }\n  // Default to usize\n  if (compiler.options.isWasm64) {\n    compiler.currentType = Type.usize64;\n    return module.i64(i64_low(value), i64_high(value));\n  } else {\n    compiler.currentType = Type.usize32;\n    assert(!i64_high(value));\n    return module.i32(i64_low(value));\n  }\n}\n","/**\n * @fileoverview Binaryen glue code for JavaScript.\n * @license Apache-2.0\n */\n\nconst binaryen = global.binaryen || (global.binaryen = require(\"binaryen\"));\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function toText() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function toAsmjs() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * @fileoverview The AssemblyScript compiler.\n * @license Apache-2.0\n */\n\nimport {\n  BuiltinNames,\n  BuiltinContext,\n  builtins,\n  function_builtins,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n  compileClassInstanceOf\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  FeatureFlags,\n  Index,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChildAt,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType,\n  getSideEffects,\n  SideEffects,\n  SwitchBuilder,\n  ExpressionRunnerFlags\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INDEX_SUFFIX,\n  CommonNames,\n  Feature,\n  Target,\n  featureToString\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName,\n  DeclaredElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  FieldFlags,\n  ConditionKind,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  Range,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  DecoratorKind,\n  AssertionKind,\n  SourceKind,\n  FunctionTypeNode,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportDefaultStatement,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  NamedTypeNode,\n\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  uniqueMap,\n  isPowerOf2,\n  v128_zero\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** It true, exports the memory to the embedder. */\n  exportMemory: bool = true;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** Initial memory size, in pages. */\n  initialMemory: u32 = 0;\n  /** Maximum memory size, in pages. */\n  maximumMemory: u32 = 0;\n  /** If true, memory is declared as shared. */\n  sharedMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: u32 = 0;\n  /** Static table start offset. */\n  tableBase: u32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n  /** If true, enables pedantic diagnostics. */\n  pedantic: bool = false;\n  /** Indicates a very low (<64k) memory limit. */\n  lowMemoryLimit: u32 = 0;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Gets if any optimizations will be performed. */\n  get willOptimize(): bool {\n    return this.optimizeLevelHint > 0 || this.shrinkLevelHint > 0;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5,\n  /** Indicates that the value will become `this` of a property access or instance call. */\n  IS_THIS = 1 << 6\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3,\n  /** Requires the setArgumentsLength export. */\n  setArgumentsLength = 1 << 4\n}\n\n/** Exported names of compiler-generated elements. */\nexport namespace ExportNames {\n  /** Name of the explicit start function, if applicable. */\n  export const start = \"_start\"; // match WASI\n  /** Name of the argumentsLength varargs helper global. */\n  export const argumentsLength = \"__argumentsLength\";\n  /** Name of the alternative argumentsLength setter function. */\n  export const setArgumentsLength = \"__setArgumentsLength\";\n  /** Name of the memory instance, if exported. */\n  export const memory = \"memory\";\n  /** Name of the table instance, if exported. */\n  export const table = \"table\";\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: i64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: Function[] = [];\n  /** Arguments length helper global. */\n  builtinArgumentsLength: GlobalRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Current inline functions stack. */\n  inlineStack: Function[] = [];\n  /** Lazily compiled functions. */\n  lazyFunctions: Set<Function> = new Set();\n  /** Pending class-specific instanceof helpers. */\n  pendingClassInstanceOf: Set<ClassPrototype> = new Set();\n  /** Functions potentially involving a virtual call. */\n  virtualCalls: Set<Function> = new Set();\n  /** Elements currently undergoing compilation. */\n  pendingElements: Set<Element> = new Set();\n  /** Elements, that are module exports, already processed */\n  doneModuleExports: Set<Element> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    var module = Module.create();\n    this.module = module;\n    if (options.memoryBase) {\n      this.memoryOffset = i64_new(options.memoryBase);\n      module.setLowMemoryUnused(false);\n    } else {\n      if (!options.lowMemoryLimit && options.optimizeLevelHint >= 2) {\n        this.memoryOffset = i64_new(1024);\n        module.setLowMemoryUnused(true);\n      } else {\n        this.memoryOffset = i64_new(8);\n        module.setLowMemoryUnused(false);\n      }\n    }\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    if (options.hasFeature(Feature.MULTI_VALUE)) featureFlags |= FeatureFlags.MultiValue;\n    module.setFeatures(featureFlags);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(BuiltinNames.start, new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = BuiltinNames.start;\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = new Array<ExpressionRef>();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    this.program.initialize();\n\n    // obtain the main start function\n    var startFunctionInstance = this.currentFlow.actualFunction;\n    assert(startFunctionInstance.internalName == BuiltinNames.start);\n    var startFunctionBody = this.currentBody;\n    assert(startFunctionBody.length == 0);\n\n    // add mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinNames.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinNames.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    // TODO: for (let file of files.values()) {\n    for (let _values = Map_values(files), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or if explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = program.isWasi || options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinNames.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinNames.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinNames.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.flatten(startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, ExportNames.start);\n    }\n\n    // check if the entire program is acyclic\n    var cyclicClasses = program.findCyclicClasses();\n    if (cyclicClasses.size) {\n      if (options.pedantic) {\n        // TODO: for (let classInstance of cyclicClasses) {\n        for (let _values = Set_values(cyclicClasses), i = 0, k = _values.length; i < k; ++i) {\n          let classInstance = unchecked(_values[i]);\n          this.pedantic(\n            DiagnosticCode.Type_0_is_cyclic_Module_will_include_deferred_garbage_collection,\n            classInstance.identifierNode.range, classInstance.internalName\n          );\n        }\n      }\n    } else {\n      program.registerConstantInteger(\"__GC_ALL_ACYCLIC\", Type.bool, i64_new(1, 0));\n    }\n\n    // compile lazy functions\n    var lazyFunctions = this.lazyFunctions;\n    do {\n      let functionsToCompile = new Array<Function>();\n      // TODO: for (let instance of lazyLibraryFunctions) {\n      for (let _values = Set_values(lazyFunctions), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        functionsToCompile.push(instance);\n      }\n      lazyFunctions.clear();\n      for (let i = 0, k = functionsToCompile.length; i < k; ++i) {\n        this.compileFunction(unchecked(functionsToCompile[i]), true);\n      }\n    } while (lazyFunctions.size);\n\n    // compile pending class-specific instanceof helpers\n    // TODO: for (let prototype of this.pendingClassInstanceOf.values()) {\n    for (let _values = Set_values(this.pendingClassInstanceOf), i = 0, k = _values.length; i < k; ++i) {\n      let prototype = unchecked(_values[i]);\n      compileClassInstanceOf(this, prototype);\n    }\n\n    // set up virtual lookup tables\n    var functionTable = this.functionTable;\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      let instance = functionTable[i];\n      if (instance.is(CommonFlags.VIRTUAL)) {\n        assert(instance.is(CommonFlags.INSTANCE));\n        functionTable[i] = this.ensureVirtualStub(instance); // incl. varargs\n        this.finalizeVirtualStub(instance);\n      } else if (instance.signature.requiredParameters < instance.signature.parameterTypes.length) {\n        functionTable[i] = this.ensureVarargsStub(instance);\n      }\n    }\n    var virtualCalls = this.virtualCalls;\n    for (let _values = Set_values(virtualCalls), i = 0, k = _values.length; i < k; ++i) {\n      let instance = unchecked(_values[i]);\n      this.finalizeVirtualStub(instance);\n    }\n\n    // finalize runtime features\n    module.removeGlobal(BuiltinNames.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    var lowMemoryLimit32 = this.options.lowMemoryLimit;\n    if (lowMemoryLimit32) {\n      let lowMemoryLimit = i64_new(lowMemoryLimit32 & ~15);\n      if (i64_gt(memoryOffset, lowMemoryLimit)) {\n        this.error(\n          DiagnosticCode.Low_memory_limit_exceeded_by_static_data_0_1,\n          null, i64_to_string(memoryOffset), i64_to_string(lowMemoryLimit)\n        );\n      }\n    }\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinNames.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinNames.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var initialPages: u32 = 0;\n    if (this.options.memoryBase /* is specified */ || this.memorySegments.length) {\n      initialPages = u32(i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16))));\n    }\n    if (options.initialMemory) {\n      if (options.initialMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_initial_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        initialPages = options.initialMemory;\n      }\n    }\n    var maximumPages = Module.UNLIMITED_MEMORY;\n    if (options.maximumMemory) {\n      if (options.maximumMemory < initialPages) {\n        this.error(\n          DiagnosticCode.Module_requires_at_least_0_pages_of_maximum_memory,\n          null,\n          initialPages.toString()\n        );\n      } else {\n        maximumPages = options.maximumMemory;\n      }\n    }\n    var isSharedMemory = false;\n    if (options.sharedMemory) {\n      isSharedMemory = true;\n      if (!options.maximumMemory) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_maximum_memory_to_be_defined,\n          null\n        );\n        isSharedMemory = false;\n      }\n      if (!options.hasFeature(Feature.THREADS)) {\n        this.error(\n          DiagnosticCode.Shared_memory_requires_feature_threads_to_be_enabled,\n          null\n        );\n        isSharedMemory = false;\n      }\n    }\n    module.setMemory(\n      initialPages,\n      maximumPages,\n      this.memorySegments,\n      options.target,\n      options.exportMemory ? ExportNames.memory : null,\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var tableBase = this.options.tableBase;\n    if (!tableBase) tableBase = 1; // leave first elem blank\n    var functionTableNames = new Array<string>(functionTable.length);\n    for (let i = 0, k = functionTable.length; i < k; ++i) {\n      functionTableNames[i] = functionTable[i].internalName;\n    }\n    module.setFunctionTable(tableBase + functionTable.length, Module.UNLIMITED_TABLE, functionTableNames, module.i32(tableBase));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Importing_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n    if (options.exportTable) {\n      module.addTableExport(\"0\", ExportNames.table);\n      if (options.pedantic && options.willOptimize) {\n        this.pedantic(\n          DiagnosticCode.Exporting_the_table_disables_some_indirect_call_optimizations,\n          null\n        );\n      }\n    }\n\n    // set up module exports\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n\n    // expose the arguments length helper if there are varargs exports\n    if (this.runtimeFeatures & RuntimeFeatures.setArgumentsLength) {\n      module.addFunction(BuiltinNames.setArgumentsLength, NativeType.I32, NativeType.None, null,\n        module.global_set(BuiltinNames.argumentsLength, module.local_get(0, NativeType.I32))\n      );\n      module.addFunctionExport(BuiltinNames.setArgumentsLength, ExportNames.setArgumentsLength);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [elementName, element] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let elementName = unchecked(_keys[i]);\n        let element = assert(exports.get(elementName));\n        this.ensureModuleExport(elementName, element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        this.ensureModuleExports(exportsStar[i]);\n      }\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>element;\n        let functionInstances = functionPrototype.instances;\n        if (functionInstances !== null && functionInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(functionInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (functionPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            functionPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let classPrototype = <ClassPrototype>element;\n        let classInstances = classPrototype.instances;\n        if (classInstances !== null && classInstances.size > 0) {\n          // TODO: for (let instance of instances.values()) {\n          for (let _values = Map_values(classInstances), i = 0, k = _values.length; i < k; ++i) {\n            let instance = unchecked(_values[i]);\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        } else if (classPrototype.is(CommonFlags.GENERIC)) {\n          this.warning(\n            DiagnosticCode.Exported_generic_function_or_class_has_no_concrete_instances,\n            classPrototype.identifierNode.range\n          );\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (propertyInstance) this.ensureModuleExport(name, propertyInstance, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let global = <Global>element;\n        let isConst = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            global.identifierNode.range\n          );\n        } else {\n          if (element.is(CommonFlags.COMPILED)) this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        let enumValue = <EnumValue>element;\n        if (!enumValue.isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            enumValue.identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>element;\n        if (!functionInstance.hasDecorator(DecoratorFlags.BUILTIN)) {\n          let signature = functionInstance.signature;\n          if (signature.requiredParameters < signature.parameterTypes.length) {\n            // utilize varargs stub to fill in omitted arguments\n            functionInstance = this.ensureVarargsStub(functionInstance);\n            this.ensureArgumentsLength();\n            this.runtimeFeatures |= RuntimeFeatures.setArgumentsLength;\n          }\n          if (functionInstance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(functionInstance.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.ensureModuleExport(GETTER_PREFIX + name, getterInstance, prefix);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.ensureModuleExport(SETTER_PREFIX + name, setterInstance, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (element.is(CommonFlags.COMPILED)) {\n          let module = this.module;\n          module.addFunctionExport(fieldInstance.internalGetterName, prefix + GETTER_PREFIX + name);\n          if (!element.is(CommonFlags.READONLY)) {\n            module.addFunctionExport(fieldInstance.internalSetterName, prefix + SETTER_PREFIX + name);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>element;\n        // make the class name itself represent its runtime id\n        if (!classInstance.type.isUnmanaged) {\n          let module = this.module;\n          let internalName = classInstance.internalName;\n\n          if (!this.doneModuleExports.has(element)) {\n            module.addGlobal(internalName, NativeType.I32, false, module.i32(classInstance.id));\n            this.doneModuleExports.add(element);\n          }\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        let implicitExport = element.is(CommonFlags.SCOPED);\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (implicitExport || member.is(CommonFlags.EXPORT)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      } else {\n        // TODO: for (let [memberName, member] of members) {\n        for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n          let memberName = unchecked(_keys[i]);\n          let member = assert(members.get(memberName));\n          if (!member.is(CommonFlags.PRIVATE)) {\n            this.ensureModuleExport(memberName, member, subPrefix);\n          }\n        }\n      }\n    }\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (functionInstance) this.compileFunction(functionInstance);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          let classInstance = this.resolver.resolveClass(<ClassPrototype>element, null);\n          if (classInstance) this.compileClass(classInstance);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n        if (propertyInstance) this.compileProperty(propertyInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false);\n    }\n    if (compileMembers) {\n      let members = element.members;\n      if (members) {\n        // TODO: for (let element of members.values()) {\n        for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n          let element = unchecked(_values[i]);\n          this.compileElement(element);\n        }\n      }\n    }\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let element of exports.values()) {\n      for (let _values = Map_values(exports), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileElement(element);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = assert(filesByName.get(normalizedPathWithoutExtension));\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = assert(filesByName.get(pathWithIndex));\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    // no need to insert unreachable since last statement should have done that\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        module.flatten(startFunctionBody)\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  /** Compiles a global variable. */\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return !global.is(CommonFlags.ERRORED);\n    global.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(global);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) {\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(resolvedType);\n        this.checkTypeSupported(global.type, typeNode);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          global.set(CommonFlags.ERRORED);\n          pendingElements.delete(global);\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        global.set(CommonFlags.ERRORED);\n        pendingElements.delete(global);\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinNames.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinNames.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      pendingElements.delete(global);\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        pendingElements.delete(global);\n        return true;\n      }\n\n      // Importing mutable globals is not supported in the MVP\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        global.declaration.range, \"mutable-globals\"\n      );\n      global.set(CommonFlags.ERRORED);\n      pendingElements.delete(global);\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              initializeInStart = true;\n            }\n          }\n          if (this.skippedAutoreleases.has(initExpr)) this.skippedAutoreleases.add(initExpr);\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = assert(elementsByName.get(fromName));\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (<u32>exprType) {\n            case <u32>NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case <u32>NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case <u32>NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case <u32>NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              global.set(CommonFlags.ERRORED);\n              pendingElements.delete(global);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      if (global.is(CommonFlags.INLINED)) {\n        initExpr = this.compileInlineConstant(global, global.type, Constraints.PREFER_STATIC | Constraints.WILL_RETAIN);\n      } else {\n        initExpr = this.makeZero(type, global.declaration);\n      }\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          findDecorator(DecoratorKind.INLINE, global.decoratorNodes)!.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type, global.declaration));\n      if (type.isManaged && !this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, type);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    pendingElements.delete(global);\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  /** Compiles an enum. */\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return !element.is(CommonFlags.ERRORED);\n    element.set(CommonFlags.COMPILED);\n\n    var pendingElements = this.pendingElements;\n    pendingElements.add(element);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of element.members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let enumValue = <EnumValue>member;\n        let valueNode = enumValue.valueNode;\n        enumValue.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              enumValue.identifierNode.range.atEnd\n            );\n          }\n          if (isInline) {\n            let value = i64_add(previousValue.constantIntegerValue, i64_new(1));\n            assert(!i64_high(value));\n            initExpr = module.i32(i64_low(value));\n          } else {\n            initExpr = module.binary(BinaryOp.AddI32,\n              module.global_get(previousValue.internalName, NativeType.I32),\n              module.i32(1)\n            );\n            let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n            if (precomp) {\n              initExpr = precomp;\n            } else {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  member.declaration.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(enumValue.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(enumValue, initExpr, Type.i32, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            enumValue.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (enumValue.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(enumValue.internalName, NativeType.I32, false, initExpr);\n          }\n          enumValue.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = enumValue;\n      }\n    }\n    this.currentParent = previousParent;\n    pendingElements.delete(element);\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Compiles a priorly resolved function. */\n  compileFunction(\n    /** Function to compile. */\n    instance: Function,\n    /** Force compilation of stdlib alternative if a builtin. */\n    forceStdAlternative: bool = false\n  ): bool {\n    if (instance.is(CommonFlags.COMPILED)) return !instance.is(CommonFlags.ERRORED);\n\n    if (!forceStdAlternative) {\n      if (instance.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n      if (instance.hasDecorator(DecoratorFlags.LAZY)) {\n        this.lazyFunctions.add(instance);\n        return true;\n      }\n    }\n\n    instance.set(CommonFlags.COMPILED);\n    var pendingElements = this.pendingElements;\n    pendingElements.add(instance);\n\n    var previousType = this.currentType;\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n    var declarationNode = instance.declaration;\n    assert(declarationNode.kind == NodeKind.FUNCTIONDECLARATION || declarationNode.kind == NodeKind.METHODDECLARATION);\n    this.checkSignatureSupported(instance.signature, (<FunctionDeclaration>declarationNode).signature);\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // In normal instance functions, `this` is effectively a constant\n        // retained elsewhere so does not need to be retained.\n        if (instance.is(CommonFlags.CONSTRUCTOR)) {\n          // Constructors, however, can allocate their own memory, and as such\n          // must refcount the allocation in case something else is `return`ed.\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType()),\n                type\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      let body: ExpressionRef;\n      if (this.compileFunctionBody(instance, stmts)) {\n        if (!flow.is(FlowFlags.TERMINATES)) {\n          this.performAutoreleases(flow, stmts);\n          this.finishAutoreleases(flow, stmts);\n        }\n        body = module.flatten(stmts, instance.signature.returnType.toNativeType());\n      } else {\n        body = module.unreachable();\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        body\n      );\n\n    // imported function\n    } else if (instance.is(CommonFlags.AMBIENT)) {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declarationNode); // TODO: check for duplicates\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n\n    // abstract or interface function\n    } else if (instance.is(CommonFlags.ABSTRACT) || instance.parent.kind == ElementKind.INTERFACE) {\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        null,\n        module.unreachable()\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        instance.identifierNode.range\n      );\n      funcRef = 0; // TODO?\n      instance.set(CommonFlags.ERRORED);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    pendingElements.delete(instance);\n    return true;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements also being returned. Creates a new array if omitted. */\n    stmts: ExpressionRef[]\n  ): bool {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n    var thisLocal = instance.signature.thisType\n      ? assert(flow.lookupLocal(CommonNames.this_))\n      : null;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      // take special care of properly retaining the returned value\n      let expr = this.compileReturnedExpression((<ExpressionStatement>bodyNode).expression, returnType, Constraints.CONV_IMPLICIT);\n\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // Make constructors return their instance pointer, and prepend a conditional\n    // allocation if any code path accesses `this`.\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      thisLocal = assert(thisLocal);\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n\n      if (flow.isAny(FlowFlags.ACCESSES_THIS | FlowFlags.CONDITIONALLY_ACCESSES_THIS) || !flow.is(FlowFlags.TERMINATES)) {\n        // Allocate `this` if not a super call, and initialize fields\n        let allocStmts = new Array<ExpressionRef>();\n        allocStmts.push(\n          module.if(\n            module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n              module.local_get(thisLocal.index, nativeSizeType)\n            ),\n            module.local_set(thisLocal.index,\n              this.makeRetain(\n                this.makeAllocation(classInstance),\n                classInstance.type\n              )\n            )\n          )\n        );\n        this.makeFieldInitializationInConstructor(classInstance, allocStmts);\n        if (flow.isInline) {\n          let firstStmt = stmts[0]; // `this` alias assignment\n          assert(getExpressionId(firstStmt) == ExpressionId.LocalSet);\n          assert(getLocalSetIndex(firstStmt) == thisLocal.index);\n          allocStmts.unshift(firstStmt);\n          stmts[0] = module.flatten(allocStmts, NativeType.None);\n        } else {\n          stmts.unshift(\n            module.flatten(allocStmts, NativeType.None)\n          );\n        }\n\n        // Just prepended allocation is dropped when returning non-'this'\n        if (flow.is(FlowFlags.MAY_RETURN_NONTHIS)) {\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Explicitly_returning_constructor_drops_this_allocation,\n              instance.identifierNode.range\n            );\n          }\n        }\n      }\n\n      // Returning something else than 'this' would break 'super()' calls\n      if (flow.is(FlowFlags.MAY_RETURN_NONTHIS) && !classInstance.hasDecorator(DecoratorFlags.FINAL)) {\n        this.error(\n          DiagnosticCode.A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final,\n          classInstance.identifierNode.range\n        );\n      }\n\n      // Implicitly return `this` if the flow falls through\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        assert(flow.isAnyLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED));\n        flow.unsetLocalFlag(thisLocal.index, LocalFlags.ANY_RETAINED); // undo\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if (classInstance.base !== null && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n      return false; // not recoverable\n    }\n\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  /** Compiles a priorly resolved class. */\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      // TODO: for (let element of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    this.ensureConstructor(instance, instance.identifierNode);\n    this.checkFieldInitialization(instance);\n\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      // TODO: for (let element of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let element = unchecked(_values[i]);\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (element.is(CommonFlags.GENERIC)) break;\n            let functionInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n            if (!functionInstance) break;\n            element = functionInstance;\n            // fall-through\n          }\n          case ElementKind.FUNCTION: {\n            this.compileFunction(<Function>element);\n            break;\n          }\n          case ElementKind.FIELD: {\n            this.compileField(<Field>element);\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>element);\n            if (!propertyInstance) break;\n            element = propertyInstance;\n            // fall-through\n          }\n          case ElementKind.PROPERTY: {\n            this.compileProperty(<Property>element);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Compiles an instance field to a getter and a setter. */\n  compileField(instance: Field): bool {\n    this.compileFieldGetter(instance);\n    this.compileFieldSetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /** Compiles the getter of the specified instance field. */\n  compileFieldGetter(instance: Field): bool {\n    // A getter retains, while a load, as of a field access, does not.\n    if (instance.getterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr = module.load(type.byteSize, type.isSignedIntegerValue,\n      module.local_get(0, nativeThisType),\n      nativeValueType, instance.memoryOffset\n    );\n    if (type.isManaged) valueExpr = this.makeRetain(valueExpr, type);\n    instance.getterRef = module.addFunction(instance.internalGetterName, nativeThisType, nativeValueType, null, valueExpr);\n    if (instance.setterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles the setter of the specified instance field. */\n  compileFieldSetter(instance: Field): bool {\n    if (instance.setterRef) return true;\n    var type = instance.type;\n    var nativeThisType = this.options.nativeSizeType;\n    var nativeValueType = type.toNativeType();\n    var module = this.module;\n    var valueExpr: ExpressionRef;\n    var varTypes: NativeType[] | null = null;\n    if (type.isManaged) {\n      // Can't use makeReplace here since there's no corresponding flow, so\n      // 0: this, 1: value, 2: oldValue (temp)\n      valueExpr = module.block(null, [\n        module.if(\n          module.binary(nativeValueType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            // value != (oldValue = this.field)\n            module.local_get(1, nativeValueType),\n            module.local_tee(2,\n              module.load(type.byteSize, false,\n                module.local_get(0, nativeThisType),\n                nativeValueType, instance.memoryOffset\n              )\n            )\n          ),\n          module.block(null, [\n            module.drop(\n              this.makeRetain(module.local_get(1, nativeValueType), type)\n            ),\n            this.makeRelease(module.local_get(2, nativeValueType), type)\n          ])\n        ),\n        module.local_get(1, nativeValueType)\n      ], nativeValueType);\n      varTypes = [ nativeValueType ];\n    } else {\n      valueExpr = module.local_get(1, nativeValueType);\n    }\n    instance.setterRef = module.addFunction(instance.internalSetterName, createType([ nativeThisType, nativeValueType ]), NativeType.None, varTypes,\n      module.store(type.byteSize,\n        module.local_get(0, nativeThisType),\n        valueExpr,\n        nativeValueType, instance.memoryOffset\n      )\n    );\n    if (instance.getterRef) {\n      instance.set(CommonFlags.COMPILED);\n    } else {\n      let typeNode = instance.typeNode;\n      if (typeNode) this.checkTypeSupported(instance.type, typeNode);\n    }\n    return true;\n  }\n\n  /** Compiles a property to a getter and potentially a setter. */\n  compileProperty(instance: Property): bool {\n    this.compilePropertyGetter(instance);\n    this.compilePropertySetter(instance);\n    return instance.is(CommonFlags.COMPILED);\n  }\n\n  /* Compiles the getter of the specified property. */\n  compilePropertyGetter(instance: Property): bool {\n    var getterInstance = instance.getterInstance;\n    if (getterInstance) {\n      let ret = this.compileFunction(getterInstance);\n      let setterInstance = instance.setterInstance;\n      if (getterInstance.is(CommonFlags.COMPILED) && (!setterInstance || setterInstance.is(CommonFlags.COMPILED))) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  /** Compiles the setter of the specified property. */\n  compilePropertySetter(instance: Property): bool {\n    var setterInstance = instance.setterInstance;\n    if (setterInstance) {\n      let ret = this.compileFunction(setterInstance);\n      let getterInstance = instance.getterInstance;\n      if (getterInstance !== null && getterInstance.is(CommonFlags.COMPILED) && setterInstance.is(CommonFlags.COMPILED)) {\n        instance.set(CommonFlags.COMPILED);\n      }\n      return ret;\n    }\n    return false;\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 16): MemorySegment {\n    assert(isPowerOf2(alignment));\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = new MemorySegment(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that a string exists in static memory and returns a pointer to it. Deduplicates. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = assert(segments.get(stringValue)); // reuse\n    } else {\n      let len = stringValue.length;\n      let buf = stringInstance.createBuffer(len << 1);\n      for (let i = 0; i < len; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var ptr = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ptr), i64_high(ptr));\n    } else {\n      assert(i64_is_u32(ptr));\n      return this.module.i32(i64_low(ptr));\n    }\n  }\n\n  /** Writes a series of static values of the specified type to a buffer. */\n  writeStaticBuffer(buf: Uint8Array, pos: i32, elementType: Type, values: ExpressionRef[]): i32 {\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var nativeType = elementType.toNativeType();\n    switch (<u32>nativeType) {\n      case <u32>NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case <u32>NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case <u32>NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case <u32>NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    return pos;\n  }\n\n  /** Adds a buffer to static memory and returns the created segment. */\n  addStaticBuffer(elementType: Type, values: ExpressionRef[], id: u32 = this.program.arrayBufferInstance.id): MemorySegment {\n    var program = this.program;\n    var arrayBufferInstance = program.arrayBufferInstance;\n    var buf = arrayBufferInstance.createBuffer(values.length * elementType.byteSize);\n    writeI32(id, buf, 8); // use specified rtId\n    assert(this.writeStaticBuffer(buf, program.runtimeHeaderSize, elementType, values) == buf.length);\n    return this.addMemorySegment(buf);\n  }\n\n  /** Adds an array header to static memory and returns the created segment. */\n  private addStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n    var bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n    var buf = arrayInstance.createBuffer();\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress, buf));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf));\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a runtime counterpart of the specified function exists and returns its address. */\n  ensureRuntimeFunction(instance: Function): i64 {\n    assert(instance.is(CommonFlags.COMPILED) && !instance.is(CommonFlags.STUB));\n    var program = this.program;\n    var memorySegment = instance.memorySegment;\n    if (!memorySegment) {\n\n      // Add to the function table\n      let functionTable = this.functionTable;\n      let tableBase = this.options.tableBase;\n      if (!tableBase) tableBase = 1; // leave first elem blank\n      let index = tableBase + functionTable.length;\n      functionTable.push(instance);\n\n      // Create runtime function\n      let rtInstance = assert(this.resolver.resolveClass(program.functionPrototype, [ instance.type ]));\n      let buf = rtInstance.createBuffer();\n      assert(rtInstance.writeField(\"_index\", index, buf));\n      assert(rtInstance.writeField(\"_env\", 0, buf));\n      instance.memorySegment = memorySegment = this.addMemorySegment(buf);\n    }\n    return i64_add(memorySegment.offset, i64_new(program.runtimeHeaderSize));\n  }\n\n  // === Statements ===============================================================================\n\n  /** Compiles a top level statement (incl. function declarations etc.) to the specified body. */\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let declaration = <NamespaceDeclaration>statement;\n        let element = this.program.getElementByDeclaration(declaration);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = declaration.members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        let exportStatement = <ExportStatement>statement;\n        let internalPath = exportStatement.internalPath;\n        if (internalPath !== null) {\n          this.compileFileByPath(internalPath, assert(exportStatement.path));\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        let importStatement = <ImportStatement>statement;\n        this.compileFileByPath(importStatement.internalPath, importStatement.path);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATURE:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  /** Compiles a statement. */\n  compileStatement(\n    /** Statement to compile. */\n    statement: Statement,\n    /** Whether this is the last statement of the body, if known. */\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.FOROF: {\n        stmt = this.compileForOfStatement(<ForOfStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          statement.range,\n          \"Inner type alias\"\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  /** Compiles a series of statements. */\n  compileStatements(\n    /** Statements to compile. */\n    statements: Statement[],\n    /** Whether this is an immediate body statement. */\n    isBody: bool = false,\n    /** Statements to append to that is also returned. Created if omitted. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j: Index = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChildAt(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  private compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return this.module.flatten(stmts);\n  }\n\n  private compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var labelNode = statement.label;\n    if (labelNode) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        labelNode.range,\n        \"Break label\"\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return module.flatten(stmts);\n  }\n\n  private compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        label.range,\n        \"Continue label\"\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current !== null && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return module.flatten(stmts);\n  }\n\n  private compileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement\n  ): ExpressionRef {\n    return this.doCompileDoStatement(statement, null);\n  }\n\n  private doCompileDoStatement(\n    /** Statement to compile. */\n    statement: DoStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                          └►┐ flow\n    //  (loop $continue                         ├◄───────────┐ recompile?\n    //   (body)                                 └─┐ bodyFlow │\n    //   [autorelease]                          ┌─┘          │\n    //                                        ┌◄┼►╢          │ breaks or terminates?\n    //   (local.set $tcond (condition))       │ └─┐ condFlow │\n    //   [autorelease]                        │ ┌─┘          │\n    //   (br_if (local.get $tcond) $continue) ├◄┴────────────┘ condition?\n    //  )                                     └─┐\n    // )                                      ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"do-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"do-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Compile the body (always executes)\n    var bodyFlow = flow.fork();\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Shortcut if body never falls through\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      flow.inherit(bodyFlow);\n\n    // Otherwise evaluate the condition\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n\n      let condFlow = flow.fork();\n      this.currentFlow = condFlow;\n      let condExpr = this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType,\n        statement.condition\n      );\n      let condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false\n      if (condKind == ConditionKind.FALSE) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        flow.inherit(bodyFlow);\n\n      // Terminate if condition is always true and body never breaks\n      } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        bodyStmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n        flow.set(FlowFlags.TERMINATES);\n\n      } else {\n        let tcond = condFlow.getTempLocal(Type.bool);\n        bodyStmts.push(\n          module.local_set(tcond.index, condExpr)\n        );\n        this.performAutoreleases(condFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel,\n            module.local_get(tcond.index, NativeType.I32)\n          )\n        );\n        condFlow.freeTempLocal(tcond);\n        flow.inherit(condFlow);\n\n        // Detect if local flags are incompatible before and after looping, and\n        // if so recompile by unifying local flags between iterations.\n        if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n          assert(!flowAfter); // should work on the first attempt\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return this.doCompileDoStatement(statement, flow);\n        }\n      }\n    }\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(bodyStmts)\n      )\n    ]);\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  private compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  private compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  private compileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement\n  ): ExpressionRef {\n    return this.doCompileForStatement(statement, null);\n  }\n\n  private doCompileForStatement(\n    /** Statement to compile. */\n    statement: ForStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (initializer)                  └►┐ flow\n    // (block $break                    │\n    //  (loop $loop                     ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (block $continue            │ │            │\n    //     (body)                     │ └─┐ bodyFlow │\n    //     [autorelease]              │ ┌─┘          │\n    //    )                           ├◄┼►╢          │ breaks or terminates?\n    //    (incrementor)               │ └─┐ incrFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                │ └────────────┘\n    //    (br $loop)                  └─┐\n    //   )                              │\n    //  )                               │\n    // )                                │\n    // [autorelease]                  ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    this.currentFlow = flow;\n\n    var breakLabel = \"for-break\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"for-continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var loopLabel = \"for-loop|\" + label;\n\n    // Compile initializer if present (but wait with autoreleases)\n    var initializer = statement.initializer;\n    if (initializer) {\n      assert(\n        initializer.kind == NodeKind.EXPRESSION ||\n        initializer.kind == NodeKind.VARIABLE\n      );\n      stmts.push(this.compileStatement(initializer));\n    }\n\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr: ExpressionRef;\n    var condKind: ConditionKind;\n    var condition = statement.condition;\n    if (condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpression(condition, Type.bool),\n        this.currentType,\n        condition\n      );\n      condKind = this.evaluateCondition(condExpr);\n\n      // Shortcut if condition is always false (body never runs)\n      if (condKind == ConditionKind.FALSE) {\n        stmts.push(\n          module.drop(condExpr)\n        );\n        this.performAutoreleases(condFlow, stmts);\n        condFlow.freeScopedLocals();\n        flow.inherit(condFlow);\n        this.performAutoreleases(flow, stmts);\n        flow.freeScopedLocals();\n        outerFlow.inherit(flow);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return module.flatten(stmts);\n      }\n    } else {\n      condExpr = module.i32(1);\n      condKind = ConditionKind.TRUE;\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    var loopStmts = new Array<ExpressionRef>();\n    loopStmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, loopStmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Check if body terminates\n    if (bodyFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n      bodyStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n    }\n    if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n    else flow.inheritBranch(bodyFlow);\n    bodyFlow.freeScopedLocals();\n\n    var ifStmts = new Array<ExpressionRef>();\n    ifStmts.push(\n      module.block(continueLabel, bodyStmts)\n    );\n\n    // Compile the incrementor if it runs\n    // Can still fall through to here if body continues, hence is already known to terminate\n    if (!bodyFlow.is(FlowFlags.TERMINATES) || bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\n      let incrementor = statement.incrementor;\n      if (incrementor) {\n        let incrFlow = flow.fork();\n        this.currentFlow = incrFlow;\n        ifStmts.push(\n          this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP)\n        );\n        this.performAutoreleases(incrFlow, ifStmts);\n        incrFlow.freeScopedLocals();\n        flow.inherit(incrFlow); // mostly local flags, also covers late termination by throwing\n        this.currentFlow = flow;\n      }\n\n      ifStmts.push(\n        module.br(loopLabel)\n      );\n\n      // Detect if local flags are incompatible before and after looping, and if\n      // so recompile by unifying local flags between iterations.\n      if (Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        assert(!bodyFlow.hasScopedLocals);\n        flow.freeScopedLocals();\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileForStatement(statement, flow);\n      }\n    }\n    loopStmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(ifStmts)\n      )\n    );\n\n    stmts.push(\n      module.block(breakLabel, [\n        module.loop(loopLabel,\n          module.flatten(loopStmts)\n        )\n      ])\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    flow.freeScopedLocals();\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    if (outerFlow.is(FlowFlags.TERMINATES)) {\n      stmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(flow, stmts);\n    }\n    this.currentFlow = outerFlow;\n    return module.flatten(stmts);\n  }\n\n  private compileForOfStatement(\n    statement: ForOfStatement\n  ): ExpressionRef {\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Iterators\"\n    );\n    return this.module.unreachable();\n  }\n\n  private compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // (if              └►┐ flow\n    //  (condition)      ┌┴───────────┐ condition?\n    //  (block           │            │\n    //   (ifTrue)        └►┐ thenFlow │\n    //   [autorelease]   ┌─┘          │\n    //  )                ├─╢          │\n    //  (block           │          ┌◄┤ present?\n    //   (ifFalse)       │          │ └►┐ elseFlow\n    //   [autorelease]   │          │ ┌─┘\n    //  )                │          │ ├─╢\n    // )                 └┬─────────┴─┘\n    // ...              ┌◄┘\n    // [autorelease]               incl. condition\n\n    // Precompute the condition (always executes)\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if the condition is constant\n    switch (condKind) {\n      case ConditionKind.TRUE: {\n        return module.block(null, [\n          module.drop(condExpr),\n          this.compileStatement(ifTrue)\n        ]);\n      }\n      case ConditionKind.FALSE: {\n        return ifFalse\n          ? module.block(null, [\n              module.drop(condExpr),\n              this.compileStatement(ifFalse)\n            ])\n          : module.drop(condExpr);\n      }\n    }\n\n    // From here on condition is always unknown\n\n    var flow = this.currentFlow;\n\n    // Compile ifTrue assuming the condition turned out true\n    var thenStmts = new Array<ExpressionRef>();\n    var thenFlow = flow.fork();\n    this.currentFlow = thenFlow;\n    thenFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, thenStmts);\n    } else {\n      thenStmts.push(this.compileStatement(ifTrue));\n    }\n    var thenTerminates = thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n    if (thenTerminates) {\n      thenStmts.push(module.unreachable());\n    } else {\n      this.performAutoreleases(thenFlow, thenStmts);\n    }\n    thenFlow.freeScopedLocals();\n    this.currentFlow = flow;\n\n    // Compile ifFalse assuming the condition turned out false, if present\n    if (ifFalse) {\n      let elseStmts = new Array<ExpressionRef>();\n      let elseFlow = flow.fork();\n      this.currentFlow = elseFlow;\n      elseFlow.inheritNonnullIfFalse(condExpr);\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, elseStmts);\n      } else {\n        elseStmts.push(this.compileStatement(ifFalse));\n      }\n      let elseTerminates = elseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS);\n      if (elseTerminates) {\n        elseStmts.push(module.unreachable());\n      } else {\n        this.performAutoreleases(elseFlow, elseStmts);\n      }\n      elseFlow.freeScopedLocals();\n      this.currentFlow = flow;\n      flow.inheritMutual(thenFlow, elseFlow);\n      return module.if(condExpr,\n        module.flatten(thenStmts),\n        module.flatten(elseStmts)\n      );\n    } else {\n      flow.inheritBranch(thenFlow);\n      flow.inheritNonnullIfFalse(condExpr,\n        thenFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)\n          ? null     // thenFlow terminates: just inherit\n          : thenFlow // must become nonnull in thenFlow otherwise\n      );\n      return module.if(condExpr,\n        module.flatten(thenStmts)\n      );\n    }\n  }\n\n  private compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n\n      // take special care of properly retaining the returned value\n      expr = this.compileReturnedExpression(valueExpression, returnType, constraints);\n      if (flow.actualFunction.is(CommonFlags.CONSTRUCTOR) && valueExpression.kind != NodeKind.THIS) {\n        flow.set(FlowFlags.MAY_RETURN_NONTHIS);\n      }\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    if (returnType != Type.void && stmts.length > 0) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr != 0 && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.flatten(stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.isInline) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.flatten(stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.flatten(stmts);\n  }\n\n  private compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString() + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n      ? \"case\" + defaultIndex.toString()\n      : \"break\"\n    ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString() + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  private compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    // TODO: requires exception-handling spec.\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).args;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(\n      this.makeAbort(message, statement)\n    );\n    // generates dead code (after unreachable) but still updates state\n    var dropped = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, dropped);\n    this.finishAutoreleases(flow, dropped);\n    flow.freeScopedLocals();\n\n    return this.module.flatten(stmts);\n  }\n\n  private compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented_0,\n      statement.range,\n      \"Exceptions\"\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  private compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      let typeNode = declaration.type;\n      let initializerNode = declaration.initializer;\n      if (typeNode) {\n        type = resolver.resolveType( // reports\n          typeNode,\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!type) continue;\n        this.checkTypeSupported(type, typeNode);\n\n        if (initializerNode) {\n          let pendingElements = this.pendingElements;\n          let dummy = flow.addScopedDummyLocal(name, type); // pending dummy\n          pendingElements.add(dummy);\n          initExpr = this.compileExpression(initializerNode, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n          pendingElements.delete(dummy);\n          flow.freeScopedDummyLocal(name);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let pendingElements = this.pendingElements;\n        let temp = flow.addScopedDummyLocal(name, Type.auto); // pending dummy\n        pendingElements.add(temp);\n        initExpr = this.compileExpression(initializerNode, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        pendingElements.delete(temp);\n        flow.freeScopedDummyLocal(name);\n\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          let precomp = module.runExpression(initExpr, ExpressionRunnerFlags.PreserveSideeffects);\n          if (precomp) {\n            initExpr = precomp; // always use precomputed initExpr\n            let local: Local | null = null;\n            switch (<u32>getExpressionType(initExpr)) {\n              case <u32>NativeType.I32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.I64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case <u32>NativeType.F32: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case <u32>NativeType.F64: {\n                local = new Local(name, -1, type, flow.parentFunction);\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n            }\n            if (local) {\n              // Add as a virtual local that doesn't actually exist in WebAssembly\n              let scopedLocals = flow.scopedLocals;\n              if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n              else if (scopedLocals.has(name)) {\n                let existing = assert(scopedLocals.get(name));\n                this.errorRelated(\n                  DiagnosticCode.Duplicate_identifier_0,\n                  declaration.name.range,\n                  existing.declaration.name.range,\n                  name\n                );\n                return this.module.unreachable();\n              }\n              scopedLocals.set(name, local);\n              isStatic = true;\n            }\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.isInline\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr, type)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.isShortIntegerValue) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type, declaration)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.isShortIntegerValue) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : module.flatten(initializers);\n  }\n\n  private compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  private compileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement\n  ): ExpressionRef {\n    return this.doCompileWhileStatement(statement, null);\n  }\n\n  private doCompileWhileStatement(\n    /** Statement to compile. */\n    statement: WhileStatement,\n    /** If recompiling, the flow with differing local flags that triggered it. */\n    flowAfter: Flow | null\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // (block $break                  └►┐ flow\n    //  (loop $continue                 ├◄───────────┐ recompile?\n    //   (local.set $tcond (condition)) └─┐ condFlow │\n    //   [autorelease]                  ┌─┘          │\n    //   (if (local.get $tcond)       ┌◄┤            │ condition?\n    //    (body)                      │ └─┐ bodyFlow │\n    //    [autorelease]               │ ┌─┘          │\n    //                                ├◄┼►╢          │ breaks or terminates?\n    //    (br $continue)              │ └────────────┘\n    //   )                            └─┐\n    //  )                               │\n    // )                              ┌─┘\n\n    var label = outerFlow.pushBreakLabel();\n    var stmts = new Array<ExpressionRef>();\n    var flow = outerFlow.fork(/* resetBreakContext */ true);\n    if (flowAfter) flow.unifyLocalFlags(flowAfter);\n    var flowBefore = flow.fork();\n    this.currentFlow = flow;\n\n    var breakLabel = \"while-break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"while-continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    // Precompute the condition\n    var condFlow = flow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.bool),\n      this.currentType,\n      statement.condition\n    );\n    var condKind = this.evaluateCondition(condExpr);\n\n    // Shortcut if condition is always false (body never runs)\n    if (condKind == ConditionKind.FALSE) {\n      stmts.push(\n        module.drop(condExpr)\n      );\n      this.performAutoreleases(condFlow, stmts);\n      assert(!flow.hasScopedLocals);\n      outerFlow.popBreakLabel();\n      this.currentFlow = outerFlow;\n      return module.flatten(stmts);\n    }\n\n    // From here on condition is either always true or unknown\n\n    // Store condition result in a temp while we autorelease\n    var tcond = flow.getTempLocal(Type.bool);\n    stmts.push(\n      module.local_set(tcond.index, condExpr)\n    );\n    this.performAutoreleases(condFlow, stmts);\n    condFlow.freeScopedLocals();\n\n    flow.inherit(condFlow); // always executes\n    this.currentFlow = flow;\n\n    // Compile the body assuming the condition turned out true\n    var bodyFlow = flow.fork();\n    bodyFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = bodyFlow;\n    var bodyStmts = new Array<ExpressionRef>();\n    var body = statement.statement;\n    if (body.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>body).statements, false, bodyStmts);\n    } else {\n      bodyStmts.push(this.compileStatement(body));\n    }\n\n    // Simplify if body always terminates\n    if (bodyFlow.is(FlowFlags.TERMINATES)) {\n      bodyStmts.push(\n        module.unreachable()\n      );\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n    // Terminate if condition is always true and body never breaks\n    } else if (condKind == ConditionKind.TRUE && !bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n      this.performAutoreleases(bodyFlow, bodyStmts);\n      bodyStmts.push(\n        module.br(continueLabel)\n      );\n      flow.set(FlowFlags.TERMINATES);\n\n    } else {\n      let breaks = bodyFlow.is(FlowFlags.BREAKS);\n      if (breaks) {\n        bodyStmts.push(\n          module.unreachable()\n        );\n      } else {\n        this.performAutoreleases(bodyFlow, bodyStmts);\n        bodyStmts.push(\n          module.br(continueLabel)\n        );\n      }\n      if (condKind == ConditionKind.TRUE) flow.inherit(bodyFlow);\n      else flow.inheritBranch(bodyFlow);\n\n      // Detect if local flags are incompatible before and after looping, and\n      // if so recompile by unifying local flags between iterations.\n      // Here: Only relevant if flow does not always break.\n      if (!breaks && Flow.hasIncompatibleLocalStates(flowBefore, flow)) {\n        assert(!flowAfter); // should work on the first attempt\n        flow.freeTempLocal(tcond);\n        outerFlow.popBreakLabel();\n        this.currentFlow = outerFlow;\n        return this.doCompileWhileStatement(statement, flow);\n      }\n    }\n    stmts.push(\n      module.if(module.local_get(tcond.index, NativeType.I32),\n        module.flatten(bodyStmts)\n      )\n    );\n    flow.freeTempLocal(tcond);\n    this.currentFlow = flow;\n\n    // Finalize\n    assert(!flow.hasScopedLocals);\n    outerFlow.inherit(flow);\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var expr = module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.flatten(stmts)\n      )\n    ]);\n    if (condKind == ConditionKind.TRUE && outerFlow.is(FlowFlags.TERMINATES)) {\n      expr = module.block(null, [ expr, module.unreachable() ]);\n    }\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED | CommonFlags.RESOLVED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.isIntegerValue &&\n      contextualType.isIntegerValue &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64(element.constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32(<f32>element.constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType.nonNullableType) { // allow assigning non-nullable to nullable\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression that is about to be returned, taking special care of retaining and setting flow states. */\n  private compileReturnedExpression(\n    /** Expression to compile. */\n    expression: Expression,\n    /** Return type of the function. */\n    returnType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    // pretend to retain the expression immediately so the autorelease, if any, is skipped\n    var expr = this.compileExpression(expression, returnType, constraints | Constraints.WILL_RETAIN);\n    var flow = this.currentFlow;\n    if (returnType.isManaged) {\n      // check if that worked, and if it didn't, keep the reference alive\n      if (!this.skippedAutoreleases.has(expr)) {\n        let index = this.tryUndoAutorelease(expr, flow);\n        if (index == -1) expr = this.makeRetain(expr, returnType);\n        this.skippedAutoreleases.add(expr);\n      }\n    }\n    // remember return states\n    if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n    return expr;\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    // reference involved\n    if (fromType.isReference || toType.isReference) {\n      if (this.currentFlow.isNonnull(expr, fromType)) {\n        fromType = fromType.nonNullableType;\n      } else if (explicit && fromType.isNullableReference && !toType.isNullableReference) {\n        // explicit conversion from nullable to non-nullable requires a runtime\n        // check here because nonnull state above already didn't know better\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, fromType, reportNode);\n        }\n        fromType = fromType.nonNullableType;\n      }\n      if (fromType.isAssignableTo(toType)) { // downcast or same\n        assert(fromType.kind == toType.kind);\n        this.currentType = toType;\n        return expr;\n      }\n      if (explicit && toType.nonNullableType.isAssignableTo(fromType)) { // upcast\n        // <Cat | null>(<Animal>maybeCat)\n        assert(fromType.kind == toType.kind);\n        if (!this.options.noAssert) {\n          expr = this.makeRuntimeUpcastCheck(expr, fromType, toType, reportNode);\n        }\n        this.currentType = toType;\n        return expr;\n      }\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      this.currentType = toType;\n      return module.unreachable();\n    }\n\n    // not dealing with references from here on\n    assert(!fromType.isReference && !toType.isReference);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.isFloatValue) {\n\n      // float to float\n      if (toType.isFloatValue) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.isIntegerValue) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f32, reportNode);\n            wrap = false;\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.isBooleanValue) {\n            expr = this.makeIsTrueish(expr, Type.f64, reportNode);\n            wrap = false;\n          } else if (toType.isSignedIntegerValue) {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.isLongIntegerValue) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.isIntegerValue && toType.isFloatValue) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.isLongIntegerValue) {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.isSignedIntegerValue\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.isLongIntegerValue) {\n\n        // i64 to i32 or smaller\n        if (toType.isBooleanValue) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.isLongIntegerValue) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.isLongIntegerValue) {\n        expr = module.unary(\n          fromType.isSignedIntegerValue ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.isShortIntegerValue) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        // same size\n        } else {\n          if (!explicit && !this.options.isWasm64 && fromType.isVaryingIntegerValue && !toType.isVaryingIntegerValue) {\n            this.warning(\n              DiagnosticCode.Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit,\n              reportNode.range, fromType.toString(), toType.toString()\n            );\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  private compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          uniqueMap(flow.contextualTypeArguments)\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          expr = this.makeRuntimeNonNullCheck(expr, type, expression);\n        }\n        this.currentType = type.nonNullableType;\n        return expr;\n      }\n      case AssertionKind.CONST: {\n        // TODO: decide on the layout of ReadonlyArray first\n        // let operand = expression.expression;\n        // if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.ARRAY) {\n        //   let element = this.resolver.lookupExpression(expression /* ! */, this.currentFlow, contextualType);\n        //   if (!element) return this.module.unreachable();\n        //   if (element.kind == ElementKind.CLASS) {\n        //     let arrayInstance = <Class>element;\n        //     if (arrayInstance.extends(this.program.readonlyArrayPrototype)) {\n        //       return this.compileStaticArrayLiteral(<ArrayLiteralExpression>operand, arrayInstance.type, constraints);\n        //     }\n        //   }\n        // }\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Const assertion\"\n        );\n        return this.module.unreachable();\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n  private i32PowInstance: Function | null = null;\n  private i64PowInstance: Function | null = null;\n\n  private compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (!commonType) {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        leftExpr = this.convertExpression(leftExpr,\n          leftType, leftType = commonType,\n          false, true, // !\n          left\n        );\n        rightExpr = this.convertExpression(rightExpr,\n          rightType, rightType = commonType,\n          false, true, // !\n          right\n        );\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GT);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, true);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.LE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.GE);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EQUALS_EQUALS) { // can't overload '==='\n          let classReference = leftType.getClassOrWrapper(this.program);\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.EXTERNREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.range,\n              \"ref.eq instruction\"\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS) { // can't overload '!=='\n          let classReference = leftType.getClass();\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // fall back to compare by value\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        commonType = Type.commonDenominator(leftType, rightType, false);\n        if (commonType) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, commonType,\n            false, true, // !\n            left\n          );\n          leftType = commonType;\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, commonType,\n            false, true, // !\n            right\n          );\n          rightType = commonType;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.EXTERNREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented_0,\n              expression.range,\n              \"ref.eq instruction\"\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POW);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = commonType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"**\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n\n        let instance: Function | null;\n        switch (commonType.kind) {\n          case TypeKind.BOOL: {\n            expr = module.select(\n              module.i32(1),\n              module.binary(BinaryOp.EqI32, rightExpr, module.i32(0)),\n              leftExpr\n            );\n            break;\n          }\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            instance = this.i32PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(CommonNames.ipow32);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"ipow32\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.i32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n              if (commonType.size != 32) {\n                expr = this.ensureSmallIntegerWrap(expr, commonType);\n              }\n            }\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            instance = this.i64PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(CommonNames.ipow64);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"ipow64\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.i64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let isWasm64 = this.options.isWasm64;\n            instance = isWasm64 ? this.i64PowInstance : this.i32PowInstance;\n            if (!instance) {\n              let prototype = this.program.lookupGlobal(isWasm64 ? CommonNames.ipow64 : CommonNames.ipow32);\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, isWasm64 ? \"ipow64\" : \"ipow32\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n              if (isWasm64) {\n                this.i64PowInstance = instance;\n              } else {\n                this.i32PowInstance = instance;\n              }\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F32: {\n            instance = this.f32PowInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.pow\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.pow));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          // Math.pow otherwise (result is f64)\n          case TypeKind.F64: {\n            instance = this.f64PowInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.pow)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.pow\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.pow));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n            break;\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.REM);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, true, // !\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, true, // !\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonNames.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let namespaceMembers = namespace.members;\n              if (!namespaceMembers || !namespaceMembers.has(CommonNames.mod)) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = assert(namespaceMembers.get(CommonNames.mod));\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!instance || !this.compileFunction(instance)) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        let classReference = leftType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n          if (overload) {\n            expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n            break;\n          }\n        }\n        if (!leftType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          commonType = Type.commonDenominator(leftType, rightType, false);\n          if (commonType) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, commonType,\n              false, false,\n              left\n            );\n            leftType = commonType;\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, commonType,\n              false, false,\n              right\n            );\n            rightType = commonType;\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            this.makeIsTrueish(rightExpr, rightType, right),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType, left),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType, left),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints);\n          rightType = this.currentType;\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType, left),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType, right)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n          rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr, rightType);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType()),\n                  leftType\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType, left),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType()),\n                    leftType\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType, left),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType, left),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target);\n    if (!targetType) targetType = Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      this.currentType,\n      right,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  private compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  private compileAssignment(\n    expression: Expression,\n    valueExpression: Expression,\n    contextualType: Type\n  ): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        if (this.pendingElements.has(target)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            target.internalName\n          );\n          return this.module.unreachable();\n        }\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return this.module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, propertyInstance.internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, classInstance.internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, classInstance.internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        if (!isUnchecked && this.options.pedantic) {\n          this.pedantic(\n            DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n            expression.range\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, Constraints.WILL_RETAIN);\n    var valueType = this.currentType;\n    return this.makeAssignment(\n      target,\n      this.convertExpression(valueExpr, valueType, targetType, false, false, valueExpression),\n      valueType,\n      valueExpression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Value expression type. */\n    valueType: Type,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        if (flow.isLocalFlag(local.index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? local.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(local, valueExpr, valueType, tee);\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? global.type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(global, valueExpr, valueType, tee);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let initializerNode = fieldInstance.initializerNode;\n        let isConstructor = flow.actualFunction.is(CommonFlags.CONSTRUCTOR);\n\n        // Cannot assign to readonly fields except in constructors if there's no initializer\n        if (fieldInstance.is(CommonFlags.READONLY)) {\n          if (!isConstructor || initializerNode !== null) {\n            this.error(\n              DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n              valueExpression.range, fieldInstance.internalName\n            );\n            return module.unreachable();\n          }\n        }\n\n        // Mark initialized fields in constructors\n        thisExpression = assert(thisExpression);\n        if (isConstructor && thisExpression.kind == NodeKind.THIS) {\n          flow.setThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED);\n        }\n\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        return this.makeFieldAssignment(fieldInstance,\n          valueExpr,\n          valueType,\n          this.compileExpression(\n            thisExpression,\n            (<Class>fieldParent).type,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let setterInstance = propertyInstance.setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          let thisType = assert(setterInstance.signature.thisType);\n          let thisExpr = this.compileExpression(\n            assert(thisExpression),\n            thisType,\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n          if (!tee) return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          assert(getterInstance.signature.thisType == thisType);\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          let tempThis = flow.getTempLocal(returnType);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempThis.index, thisExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempThis.index, nativeReturnType)\n            ], valueExpression)\n          ], nativeReturnType);\n          flow.freeTempLocal(tempThis);\n          return ret;\n        } else {\n          if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n          let getterInstance = assert((<Property>target).getterInstance);\n          return module.block(null, [\n            this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n            this.makeCallDirect(getterInstance, null, valueExpression)\n          ], getterInstance.signature.returnType.toNativeType());\n        }\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let indexSignature = <IndexSignature>target;\n        let parent = indexSignature.parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let classInstance = <Class>parent;\n        assert(classInstance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let getterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!getterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, classInstance.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = classInstance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, classInstance.internalName\n          );\n          this.currentType = tee ? getterInstance.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 2);\n        let valueType = setterInstance.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(\n          assert(thisExpression),\n          classInstance.type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(classInstance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = getterInstance.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(setterInstance, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(getterInstance, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(setterInstance, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** Local to assign to. */\n    local: Local,\n    /** Value to assign. */\n    valueExpr: ExpressionRef,\n    /** Value type. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.isNullableReference) {\n      if (!valueType.isNullableReference || flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.INITIALIZED);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          valueExpr,\n          valueType,\n          module.local_get(localIndex, type.toNativeType()),\n          type,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr, valueType);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.isShortIntegerValue) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global variable to assign to. */\n    global: VariableLikeElement,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          valueExpr,\n          valueType,\n          module.global_get(global.internalName, nativeType),\n          type,\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  private makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The type of the value to assign. */\n    valueType: Type,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (!field.is(CommonFlags.COMPILED)) {\n      field.set(CommonFlags.COMPILED);\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(field.type, typeNode);\n    }\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType, findUsedLocals(valueExpr));\n      // set before and read after valueExpr executes below ^\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.local_tee(tempValue.index, valueExpr),\n              valueType,\n              module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              fieldType,\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            valueExpr,\n            valueType,\n            module.load(fieldType.byteSize, fieldType.isSignedIntegerValue,\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            fieldType,\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  private compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let parent = assert(actualFunction.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let baseClassInstance = assert(classInstance.base);\n      let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      let baseCtorInstance = this.ensureConstructor(baseClassInstance, expression);\n      this.checkFieldInitialization(baseClassInstance, expression);\n      let superCall = this.compileCallDirect(\n        baseCtorInstance,\n        expression.args,\n        expression,\n        module.local_get(thisLocal.index, nativeSizeType),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(superCall)); // guaranteed\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ACCESSES_THIS |\n        FlowFlags.CONDITIONALLY_ACCESSES_THIS\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ACCESSES_THIS | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.local_set(thisLocal.index, superCall);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = this.resolver.currentThisExpression;\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        if (functionPrototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          // builtins handle present respectively omitted type arguments on their own\n          return this.compileCallExpressionBuiltin(functionPrototype, expression, contextualType);\n        }\n        let functionInstance = this.resolver.maybeInferCall(expression, functionPrototype, flow);\n        if (!functionInstance) return this.module.unreachable();\n        target = functionInstance;\n        // fall-through\n      }\n      case ElementKind.FUNCTION: {\n        let functionInstance = <Function>target;\n        let thisArg: ExpressionRef = 0;\n        if (functionInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(functionInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(\n          functionInstance,\n          expression.args,\n          expression,\n          thisArg,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        signature = local.type.signatureReference;\n        if (signature) {\n          if (local.is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low(local.constantIntegerValue));\n          } else {\n            indexArg = module.local_get(local.index, NativeType.I32);\n          }\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, local.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        signature = global.type.signatureReference;\n        if (signature) {\n          indexArg = module.global_get(global.internalName, global.type.toNativeType());\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, global.type.toString()\n        );\n        return module.unreachable();\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        signature = fieldType.signatureReference;\n        if (signature) {\n          let fieldParent = fieldInstance.parent;\n          assert(fieldParent.kind == ElementKind.CLASS);\n          indexArg = module.load(4, false,\n            this.compileExpression(\n              assert(thisExpression),\n              (<Class>fieldParent).type,\n              Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n            ),\n            NativeType.I32,\n            fieldInstance.memoryOffset\n          );\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          expression.range, fieldType.toString()\n        );\n        return module.unreachable();\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = this.resolver.resolveProperty(<PropertyPrototype>target);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (propertyInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression, thisArg);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let classInstance = <Class>target;\n        let typeArguments = classInstance.getTypeArgumentsTo(this.program.functionPrototype);\n        if (typeArguments !== null && typeArguments.length > 0) {\n          let ftype = typeArguments[0];\n          signature = ftype.getSignature();\n          indexArg = this.compileExpression(expression.expression, ftype, Constraints.CONV_IMPLICIT);\n          break;\n        }\n        // fall-through\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      assert(signature), // FIXME: bootstrap can't see this yet\n      indexArg,\n      expression.args,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        uniqueMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n    var callee = expression.expression;\n    var ctx = new BuiltinContext(\n      this,\n      prototype,\n      typeArguments,\n      expression.args,\n      callee.kind == NodeKind.PROPERTYACCESS\n        ? (<PropertyAccessExpression>callee).expression\n        : null,\n      contextualType,\n      expression,\n      false\n    );\n    // global builtins\n    var internalName = prototype.internalName;\n    if (builtins.has(internalName)) {\n      let fn = assert(builtins.get(internalName));\n      return fn(ctx);\n    }\n    // class builtins\n    var parent = prototype.parent;\n    if (parent.kind == ElementKind.CLASS) {\n      let classPrototype = (<Class>parent).prototype;\n      if (classPrototype == this.program.functionPrototype) {\n        let methodName = prototype.name;\n        if (function_builtins.has(methodName)) {\n          let fn = assert(function_builtins.get(methodName));\n          return fn(ctx);\n        }\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented_0,\n        reportNode.range,\n        \"Rest parameters\"\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node, relatedReportNode: Node | null = null): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      if (relatedReportNode) {\n        this.errorRelated(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range, relatedReportNode.range\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Operation_is_unsafe,\n          reportNode.range\n        );\n      }\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // handle call on `this` in constructors\n    let actualFunction = this.currentFlow.actualFunction;\n    if (actualFunction.is(CommonFlags.CONSTRUCTOR) && reportNode.isAccessOnThis) {\n      let parent = actualFunction.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitialization(<Class>parent, reportNode);\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE) && (!instance.is(CommonFlags.VIRTUAL) || reportNode.isAccessOnSuper)) {\n      assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n      let inlineStack = this.inlineStack;\n      if (inlineStack.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        inlineStack.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        inlineStack.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr, paramType);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      let classInstance = <Class>parent;\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonNames.this_, thisType, usedLocals);\n      // In normal instance functions, `this` is effectively a constant\n      // retained elsewhere so does not need to be retained.\n      if (instance.is(CommonFlags.CONSTRUCTOR)) {\n        // Constructors, however, can allocate their own memory, and as such\n        // must refcount the allocation in case something else is `return`ed.\n        flow.setLocalFlag(thisLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let base = classInstance.base;\n      if (base) flow.addScopedAlias(CommonNames.super_, base.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(instance.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr, initType);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // If a constructor, perform field init checks on its flow directly\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let parent = instance.parent;\n      assert(parent.kind == ElementKind.CLASS);\n      this.checkFieldInitializationInFlow(<Class>parent, flow);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Makes sure that the arguments length helper global is present. */\n  ensureArgumentsLength(): void {\n    if (!this.builtinArgumentsLength) {\n      let module = this.module;\n      this.builtinArgumentsLength = module.addGlobal(BuiltinNames.argumentsLength, NativeType.I32, true, module.i32(0));\n    }\n  }\n\n  /** Ensures compilation of the varargs stub for the specified function. */\n  ensureVarargsStub(original: Function): Function {\n    // A varargs stub is a function called with omitted arguments being zeroed,\n    // reading the `argumentsLength` helper global to decide which initializers\n    // to inject before calling the original function. It is typically attempted\n    // to circumvent the varargs stub where possible, for example where omitted\n    // arguments are constants and can be inlined into the original call.\n    var stub = original.varargsStub;\n    if (stub) return stub;\n\n    var originalSignature = original.signature;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the varargs stub\n    stub = original.newStub(\"varargs\");\n    stub.signature.requiredParameters = maxArguments;\n    original.varargsStub = stub;\n\n    // compile initializers of omitted arguments in the scope of the stub,\n    // accounting for additional locals and a proper `this` context.\n    var previousFlow = this.currentFlow;\n    var flow = stub.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString();\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString() + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinNames.argumentsLength, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinNames.argumentsLength, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(original.internalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      typesToNativeTypes(stub.additionalLocals),\n      module.flatten(stmts, returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n    stub.finalize(module, funcRef);\n    return stub;\n  }\n\n  /** Ensures compilation of the virtual stub for the specified function. */\n  ensureVirtualStub(original: Function): Function {\n    // A virtual stub is a function redirecting virtual calls to the actual\n    // overload targeted by the call. It utilizes varargs stubs where necessary\n    // and as such has the same semantics as one. Here, we only make sure that\n    // a placeholder exist, with actual code being generated as a finalization\n    // step once module compilation is otherwise complete.\n    var stub = original.virtualStub;\n    if (stub) return stub;\n    stub = original.newStub(\"virtual\");\n    original.virtualStub = stub;\n    var module = this.module;\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      null,\n      module.unreachable()\n    );\n    this.virtualCalls.add(original);\n    return stub;\n  }\n\n  /** Finalizes the virtual stub of the specified function. */\n  private finalizeVirtualStub(instance: Function): void {\n    var stub = this.ensureVirtualStub(instance);\n    if (stub.is(CommonFlags.COMPILED)) return;\n\n    // Wouldn't be here if there wasn't at least one overload\n    var overloadPrototypes = assert(instance.prototype.overloads);\n\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var parameterTypes = instance.signature.parameterTypes;\n    var returnType = instance.signature.returnType;\n    var numParameters = parameterTypes.length;\n    var tempIndex = 1 + parameterTypes.length; // incl. `this`\n\n    // Switch over this's rtId and map it to the respective overload\n    var builder = new SwitchBuilder(this.module,\n      module.load(4, false,\n        module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.SubI64\n            : BinaryOp.SubI32,\n          module.local_get(0, nativeSizeType),\n          nativeSizeType == NativeType.I64\n            ? module.i64(8) // rtId offset = -8\n            : module.i32(8)\n        ),\n        NativeType.I32\n      )\n    );\n\n    // A method's `overloads` property contains its unbound overload prototypes\n    // so we first have to find the concrete classes it became bound to, obtain\n    // their bound prototypes and make sure these are resolved and compiled as\n    // we are going to call them conditionally based on this's class id.\n    for (let _values = Set_values(overloadPrototypes), i = 0, k = _values.length; i < k; ++i) {\n      let unboundOverloadPrototype = _values[i];\n      assert(!unboundOverloadPrototype.isBound);\n      let unboundOverloadParent = unboundOverloadPrototype.parent;\n      let isProperty = unboundOverloadParent.kind == ElementKind.PROPERTY_PROTOTYPE;\n      let classInstances: Map<string,Class> | null;\n      if (isProperty) {\n        let propertyParent = (<PropertyPrototype>unboundOverloadParent).parent;\n        assert(propertyParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>propertyParent).instances;\n      } else {\n        assert(unboundOverloadParent.kind == ElementKind.CLASS_PROTOTYPE);\n        classInstances = (<ClassPrototype>unboundOverloadParent).instances;\n      }\n      if (classInstances) {\n        for (let _values = Map_values(classInstances), j = 0, l = _values.length; j < l; ++j) {\n          let classInstance = _values[j];\n          let overloadInstance: Function | null;\n          if (isProperty) {\n            let boundProperty = assert(classInstance.members!.get(unboundOverloadParent.name));\n            assert(boundProperty.kind == ElementKind.PROPERTY_PROTOTYPE);\n            let boundPropertyInstance = this.resolver.resolveProperty(<PropertyPrototype>boundProperty);\n            if (!boundPropertyInstance) continue;\n            if (instance.is(CommonFlags.GET)) {\n              overloadInstance = boundPropertyInstance.getterInstance;\n            } else {\n              assert(instance.is(CommonFlags.SET));\n              overloadInstance = boundPropertyInstance.setterInstance;\n            }\n          } else {\n            let boundPrototype = assert(classInstance.members!.get(unboundOverloadPrototype.name));\n            assert(boundPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            overloadInstance = this.resolver.resolveFunction(<FunctionPrototype>boundPrototype, instance.typeArguments);\n          }\n          if (!overloadInstance || !this.compileFunction(overloadInstance)) continue;\n          let overloadType = overloadInstance.type;\n          let originalType = instance.type;\n          if (!overloadType.isAssignableTo(originalType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              overloadInstance.identifierNode.range, overloadType.toString(), originalType.toString()\n            );\n            continue;\n          }\n          // TODO: additional optional parameters are not permitted by `isAssignableTo` yet\n          let overloadSignature = overloadInstance.signature;\n          let overloadParameterTypes = overloadSignature.parameterTypes;\n          let overloadNumParameters = overloadParameterTypes.length;\n          let paramExprs = new Array<ExpressionRef>(1 + overloadNumParameters);\n          paramExprs[0] = module.local_get(0, nativeSizeType); // this\n          for (let n = 1; n <= numParameters; ++n) {\n            paramExprs[n] = module.local_get(n, parameterTypes[n - 1].toNativeType());\n          }\n          let needsVarargsStub = false;\n          for (let n = numParameters; n < overloadNumParameters; ++n) {\n            // TODO: inline constant initializers and skip varargs stub\n            paramExprs[1 + n] = this.makeZero(overloadParameterTypes[n], overloadInstance.declaration);\n            needsVarargsStub = true;\n          }\n          let calledName = needsVarargsStub\n            ? this.ensureVarargsStub(overloadInstance).internalName\n            : overloadInstance.internalName;\n          let nativeReturnType = overloadSignature.returnType.toNativeType();\n          let stmts = new Array<ExpressionRef>();\n          if (needsVarargsStub) {\n            this.ensureArgumentsLength();\n            // Safe to prepend since paramExprs are local.get's\n            stmts.push(module.global_set(BuiltinNames.argumentsLength, module.i32(numParameters)));\n          }\n          if (returnType == Type.void) {\n            stmts.push(\n              module.call(calledName, paramExprs, nativeReturnType)\n            );\n            stmts.push(\n              module.return()\n            );\n          } else {\n            stmts.push(\n              module.return(\n                module.call(calledName, paramExprs, nativeReturnType)\n              )\n            );\n          }\n          builder.addCase(classInstance.id, stmts);\n          // Also alias each extendee inheriting this exact overload\n          let extendees = classInstance.getAllExtendees(\n            isProperty\n              ? unboundOverloadParent.name\n              : instance.prototype.name\n          );\n          for (let _values = Set_values(extendees), a = 0, b = _values.length; a < b; ++a) {\n            let extendee = _values[a];\n            builder.addCase(extendee.id, stmts);\n          }\n        }\n      }\n    }\n\n    // Call the original function if no other id matches and the method is not\n    // abstract or part of an interface. Note that doing so will not catch an\n    // invalid id, but can reduce code size significantly since we also don't\n    // have to add branches for extendees inheriting the original function.\n    var body: ExpressionRef;\n    if (instance.prototype.bodyNode) {\n      let paramExprs = new Array<ExpressionRef>(numParameters);\n      paramExprs[0] = module.local_get(0, nativeSizeType); // this\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        paramExprs[1 + i] = module.local_get(1 + i, parameterTypes[i].toNativeType());\n      }\n      body = module.call(instance.internalName, paramExprs, returnType.toNativeType());\n\n    // Otherwise trap\n    } else {\n      body = module.unreachable();\n    }\n\n    // Create the virtual stub function\n    var ref = stub.ref;\n    if (ref) module.removeFunction(stub.internalName);\n    stub.ref = module.addFunction(\n      stub.internalName,\n      stub.signature.nativeParams,\n      stub.signature.nativeResults,\n      [ NativeType.I32 ],\n      module.block(null, [\n        builder.render(tempIndex),\n        body\n      ], returnType.toNativeType())\n    );\n    stub.set(CommonFlags.COMPILED);\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef, type: Type): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef, type: Type): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(\n    /** New value being assigned. */\n    newExpr: ExpressionRef,\n    /** The type of the new expression. */\n    newType: Type,\n    /** Old value being replaced. */\n    oldExpr: ExpressionRef,\n    /** The type of the old expression. */\n    oldType: Type,\n    /** Whether the new value is already retained. */\n    alreadyRetained: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr, oldType),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType), newType)\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType), oldType)\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // The following assumes that the expression actually belongs to the flow and that\n    // top-level autoreleases are never undone. While that's true, it's not necessary\n    // to check presence in scopedLocals.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalGet: { // local.get(idx)\n        let index = getLocalGetIndex(expr);\n        if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n          return index;\n        }\n        break;\n      }\n      case ExpressionId.LocalSet: { // local.tee(idx, expr)\n        if (isLocalTee(expr)) {\n          // NOTE: Can't remove the local.tee completely because it's already compiled\n          // and a child of something else. Preventing the final release however makes\n          // it optimize away.\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.get|tee(...) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChildAt(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr, type), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      // TODO: for (let local of scopedLocals.values()) {\n      for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n        let local = unchecked(_values[i]);\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType()),\n                local.type\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    var module = this.module;\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.flatten(stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return module.flatten(stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    if (flow.isInline) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let current = flow;\n      let parent: Flow | null;\n      while (parent = current.parent) current = parent;\n      let scopedLocals = current.scopedLocals;\n      if (scopedLocals) {\n        // TODO: for (let local of scopedLocals.values()) {\n        for (let _values = Map_values(scopedLocals), i = 0, k = _values.length; i < k; ++i) {\n          let local = unchecked(_values[i]);\n          this.maybeFinishAutorelease(local, flow, stmts);\n        }\n      }\n    } else {\n      let localsByIndex = flow.parentFunction.localsByIndex;\n      for (let i = 0, k = localsByIndex.length; i < k; ++i) {\n        let local = unchecked(localsByIndex[i]);\n        this.maybeFinishAutorelease(local, flow, stmts);\n      }\n    }\n  }\n\n  /** Finishes a single autorelease of the specified local. */\n  private maybeFinishAutorelease(\n    /** Local to finish autoreleasing. */\n    local: Local,\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    var localIndex = local.index;\n    var module = this.module;\n    if (~localIndex && flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n      flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n      stmts.push(\n        this.makeRelease(\n          module.local_get(localIndex, local.type.toNativeType()),\n          local.type\n        )\n      );\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      if (!instance.is(CommonFlags.VIRTUAL)) {\n        assert(!instance.is(CommonFlags.STUB)); // doesn't make sense\n        let inlineStack = this.inlineStack;\n        if (inlineStack.includes(instance)) {\n          this.warning(\n            DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n            reportNode.range, instance.internalName\n          );\n        } else {\n          inlineStack.push(instance);\n          let expr: ExpressionRef;\n          if (instance.is(CommonFlags.INSTANCE)) {\n            let theOperands = assert(operands);\n            assert(theOperands.length);\n            expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n          } else {\n            expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n          }\n          let returnType = this.currentType;\n          if (returnType.isManaged) {\n            if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          inlineStack.pop();\n          return expr;\n        }\n      } else {\n        this.warning(\n          DiagnosticCode.Function_0_is_virtual_and_will_not_be_inlined,\n          reportNode.range, instance.internalName\n        );\n      }\n    }\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = instance.signature.parameterTypes;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (initializer.compilesToConst) {\n            operands.push(this.compileExpression(\n              initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i], ReportMode.SWALLOW);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i], instance.declaration));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!instance.is(CommonFlags.MODULE_IMPORT)) {\n          let original = instance;\n          instance = this.ensureVarargsStub(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          // We know the last operand is optional and omitted, so inject setting\n          // ~argumentsLength into that operand, which is always safe.\n          let lastOperand = operands[maxOperands - 1];\n          assert(!(getSideEffects(lastOperand) & SideEffects.WritesGlobal));\n          let lastOperandType = parameterTypes[maxArguments - 1];\n          operands[maxOperands - 1] = module.block(null, [\n            module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n            lastOperand\n          ], lastOperandType.toNativeType());\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr, returnType);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          this.ensureArgumentsLength();\n          return expr;\n        }\n      }\n    }\n\n    // Call the virtual stub with the vtable if the function has overloads\n    if (instance.is(CommonFlags.VIRTUAL) && !reportNode.isAccessOnSuper) {\n      instance = this.ensureVirtualStub(instance);\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, reportNode, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    reportNode: Node,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false,\n  ): ExpressionRef {\n    var module = this.module;\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var parameterTypes = signature.parameterTypes;\n    var returnType = signature.returnType;\n    var maxArguments = parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i], reportNode));\n      }\n    }\n\n    if (this.options.isWasm64) {\n      indexArg = module.unary(UnaryOp.WrapI64, indexArg);\n    }\n\n    // We might be calling a varargs stub here, even if all operands have been\n    // provided, so we must set `argumentsLength` in any case. Inject setting it\n    // into the index argument, which becomes executed last after any operands.\n    this.ensureArgumentsLength();\n    var nativeSizeType = this.options.nativeSizeType;\n    if (getSideEffects(indexArg) & SideEffects.WritesGlobal) {\n      let flow = this.currentFlow;\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(indexArg));\n      indexArg = module.block(null, [\n        module.local_set(temp.index, indexArg),\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n    } else { // simplify\n      indexArg = module.block(null, [\n        module.global_set(BuiltinNames.argumentsLength, module.i32(numArguments)),\n        indexArg\n      ], nativeSizeType);\n    }\n    var expr = module.call_indirect(\n      nativeSizeType == NativeType.I64\n        ? module.unary(UnaryOp.WrapI64,\n            module.load(8, false, indexArg, NativeType.I64)\n          )\n        : module.load(4, false, indexArg, NativeType.I32),\n      operands,\n      signature.nativeParams,\n      signature.nativeResults\n    );\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr, returnType);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  private compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.flatten(exprs, this.currentType.toNativeType());\n  }\n\n  private compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      let classReference = targetType.getClassOrWrapper(this.program);\n      if (classReference) {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (indexedGet) {\n          let thisType = assert(indexedGet.signature.thisType);\n          let thisArg = this.compileExpression(targetExpression, thisType,\n            Constraints.CONV_IMPLICIT\n          );\n          if (!isUnchecked && this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Indexed_access_may_involve_bounds_checking,\n              expression.range\n            );\n          }\n          return this.compileCallDirect(indexedGet, [\n            expression.elementExpression\n          ], expression, thisArg, constraints);\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  private compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = uniqueMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      instance = new Function(\n        prototype.name,\n        prototype,\n        null,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.resolver.resolveFunction(prototype, null, contextualTypeArguments);\n      if (!instance) return this.module.unreachable();\n      this.compileFunction(instance);\n      this.currentType = instance.signature.type;\n    }\n\n    var offset = this.ensureRuntimeFunction(instance); // reports\n    return this.options.isWasm64\n      ? this.module.i64(i64_low(offset), i64_high(offset))\n      : this.module.i32(i64_low(offset));\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = assert(filesByName.get(internalPath));\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  private compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.isReference) {\n          let classReference = contextualType.getClass();\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.getSignature();\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          // TODO: return null ref for externref or funcref\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"ref.null\"\n          );\n          return module.unreachable();\n        }\n        this.currentType = options.usizeType;\n        this.warning(\n          DiagnosticCode.Expression_resolves_to_unusual_type_0,\n          expression.range, this.currentType.toString()\n        );\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        let thisType = actualFunction.signature.thisType;\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n          this.currentType = this.options.usizeType;\n          return module.unreachable();\n        }\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR) && !(constraints & Constraints.IS_THIS)) {\n          let parent = actualFunction.parent;\n          assert(parent.kind == ElementKind.CLASS);\n          this.checkFieldInitialization(<Class>parent, expression);\n        }\n        let thisLocal = assert(flow.lookupLocal(CommonNames.this_));\n        flow.set(FlowFlags.ACCESSES_THIS);\n        this.currentType = thisType;\n        return module.local_get(thisLocal.index, thisType.toNativeType());\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.isInline) {\n          let scopedThis = flow.lookupLocal(CommonNames.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.getClass());\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(actualFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let classInstance = <Class>parent;\n          let baseClassInstance = classInstance.base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var currentParent = this.currentParent;\n    if (!currentParent) currentParent = actualFunction;\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      currentParent\n    );\n    if (!target) {\n      // make a guess to avoid assertions in calling code\n      if (this.currentType == Type.void) this.currentType = Type.i32;\n      return module.unreachable();\n    }\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let local = <Local>target;\n        let localType = local.type;\n        assert(localType != Type.void);\n        if (this.pendingElements.has(local)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            local.internalName\n          );\n          this.currentType = localType;\n          return module.unreachable();\n        }\n        if (local.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(local, contextualType, constraints);\n        }\n        let localIndex = local.index;\n        assert(localIndex >= 0);\n        if (localType.isNullableReference && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          localType = localType.nonNullableType;\n        }\n        this.currentType = localType;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented_0,\n            expression.range,\n            \"Closures\"\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = global.type;\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        assert(globalType != Type.void);\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        let enumValue = <EnumValue>target;\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low(enumValue.constantIntegerValue));\n        }\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let typeParameterNodes = functionPrototype.typeParameterNodes;\n\n        if (typeParameterNodes !== null && typeParameterNodes.length != 0) {\n          this.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            expression.range, typeParameterNodes.length.toString(), \"0\"\n          );\n          return module.unreachable();\n        }\n\n        let functionInstance = this.resolver.resolveFunction(\n          functionPrototype,\n          null,\n          uniqueMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!functionInstance || !this.compileFunction(functionInstance)) return module.unreachable();\n        if (contextualType.isExternalReference) {\n          this.currentType = Type.externref;\n          return module.ref_func(functionInstance.internalName);\n        }\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        this.currentType = functionInstance.signature.type;\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return this.module.unreachable();\n  }\n\n  private compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n    var isType = expression.isType;\n\n    // Mimic `instanceof CLASS`\n    if (isType.kind == NodeKind.NAMEDTYPE) {\n      let namedType = <NamedTypeNode>isType;\n      if (!(namedType.isNullable || namedType.hasTypeArguments)) {\n        let element = this.resolver.resolveTypeName(namedType.name, flow.actualFunction, ReportMode.SWALLOW);\n        if (element !== null && element.kind == ElementKind.CLASS_PROTOTYPE) {\n          let prototype = <ClassPrototype>element;\n          if (prototype.is(CommonFlags.GENERIC)) {\n            return this.makeInstanceofClass(expression, prototype);\n          }\n        }\n      }\n    }\n\n    // Fall back to `instanceof TYPE`\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      flow.actualFunction,\n      uniqueMap(flow.contextualTypeArguments)\n    );\n    if (!expectedType) {\n      this.currentType = Type.bool;\n      return this.module.unreachable();\n    }\n    return this.makeInstanceofType(expression, expectedType);\n  }\n\n  private makeInstanceofType(expression: InstanceOfExpression, expectedType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var expr = this.compileExpression(expression.expression, expectedType);\n    var actualType = this.currentType;\n    this.currentType = Type.bool;\n\n    // instanceof <value> - must be exact\n    if (expectedType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(actualType == expectedType ? 1 : 0));\n    }\n\n    // <value> instanceof <nonValue> - always false\n    if (actualType.isValue) {\n      return module.maybeDropCondition(expr, module.i32(0));\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.isNullableReference && !expectedType.isNullableReference) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType, expression.expression)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          if (this.options.pedantic) {\n            this.pedantic(\n              DiagnosticCode.Expression_compiles_to_a_dynamic_check_at_runtime,\n              expression.range\n            );\n          }\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.maybeDropCondition(expr, module.i32(1));\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private makeInstanceofClass(expression: InstanceOfExpression, prototype: ClassPrototype): ExpressionRef {\n    var module = this.module;\n    var expr = this.compileExpression(expression.expression, Type.auto);\n    var actualType = this.currentType;\n    var nativeSizeType = actualType.toNativeType();\n\n    this.currentType = Type.bool;\n\n    // exclusively interested in class references here\n    var classReference = actualType.getClass();\n    if (classReference) {\n\n      // static check\n      if (classReference.extends(prototype)) {\n\n        // <nullable> instanceof <PROTOTYPE> - LHS must be != 0\n        if (actualType.isNullableReference) {\n          return module.binary(\n            nativeSizeType == NativeType.I64\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            this.makeZero(actualType, expression.expression)\n          );\n\n        // <nonNullable> is just `true`\n        } else {\n          return module.maybeDropCondition(expr, module.i32(1));\n        }\n\n      // dynamic check against all possible concrete ids\n      } else if (prototype.extends(classReference.prototype)) {\n        this.pendingClassInstanceOf.add(prototype);\n        return module.call(prototype.internalName + \"~instanceof\", [ expr ], NativeType.I32);\n      }\n    }\n\n    // false\n    return module.maybeDropCondition(expr, module.i32(0));\n  }\n\n  private compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        return this.compileArrayLiteral(\n          <ArrayLiteralExpression>expression,\n          contextualType,\n          constraints\n        );\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      case LiteralKind.REGEXP: {\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          expression.range,\n          \"Regular expressions\"\n        );\n        this.currentType = contextualType;\n        return module.unreachable();\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  private compileArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // handle static arrays\n    let contextualClass = contextualType.getClass();\n    if (contextualClass !== null && contextualClass.extends(program.staticArrayPrototype)) {\n      return this.compileStaticArrayLiteral(expression, contextualType, constraints);\n    }\n\n    // handle normal arrays\n    var element = this.resolver.lookupExpression(expression, flow, this.currentType);\n    if (!element) return module.unreachable();\n    assert(element.kind == ElementKind.CLASS);\n    var arrayInstance = <Class>element;\n    var arrayType = arrayInstance.type;\n    var elementType = arrayInstance.getTypeArgumentsTo(program.arrayPrototype)![0];\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = !elementType.isExternalReference;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(<Expression>elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.addStaticBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.addStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // __allocArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], expression);\n        this.currentType = arrayType;\n        expr = this.makeRetain(expr, arrayType);\n        if (arrayType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, arrayType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocArrayInstance, [\n            module.i32(length),\n            program.options.isWasm64\n              ? module.i64(elementType.alignLog2)\n              : module.i32(elementType.alignLog2),\n            module.i32(arrayInstance.id),\n            program.options.isWasm64\n              ? module.i64(0)\n              : module.i32(0)\n          ], expression),\n          arrayType\n        )\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStartMember = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStartMember.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStartMember).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles a special `fixed` array literal. */\n  private compileStaticArrayLiteral(\n    expression: ArrayLiteralExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var program = this.program;\n\n    // make sure this method is only called with a valid contextualType\n    var arrayInstance = assert(contextualType.getClass());\n    var arrayType = arrayInstance.type;\n    var typeArguments = assert(arrayInstance.getTypeArgumentsTo(program.staticArrayPrototype));\n    var elementType = typeArguments[0];\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(this.options.usizeType);\n\n    // compile value expressions and check if all are compile-time constants\n    var expressions = expression.elementExpressions;\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = !elementType.isExternalReference;\n    for (let i = 0; i < length; ++i) {\n      let elementExpression = expressions[i];\n      if (elementExpression.kind != NodeKind.OMITTED) {\n        let expr = this.compileExpression(elementExpression, elementType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        let precomp = module.runExpression(expr, ExpressionRunnerFlags.PreserveSideeffects);\n        if (precomp) {\n          expr = precomp;\n        } else {\n          isStatic = false;\n        }\n        values[i] = expr;\n      } else {\n        values[i] = this.makeZero(elementType, elementExpression);\n      }\n    }\n\n    var isWasm64 = this.options.isWasm64;\n    var bufferSize = values.length << elementType.alignLog2;\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n\n      let bufferSegment = this.addStaticBuffer(elementType, values, arrayInstance.id);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(program.runtimeHeaderSize));\n\n      // return the static buffer directly if assigned to a global\n      if (constraints & Constraints.PREFER_STATIC) {\n        let expr = this.options.isWasm64\n          ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n          : module.i32(i64_low(bufferAddress));\n        if (constraints & Constraints.WILL_RETAIN) {\n          this.skippedAutoreleases.add(expr);\n        } else {\n          // not necessary since this is static data anyway\n          // expr = this.makeAutorelease(expr, arrayType, flow);\n        }\n        this.currentType = arrayType;\n        return expr;\n\n      // otherwise allocate a new chunk of memory and return a copy of the buffer\n      } else {\n        // __allocBuffer(bufferSize, id, buffer)\n        let expr = this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id),\n            isWasm64\n              ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n              : module.i32(i64_low(bufferAddress))\n          ], expression),\n          program.arrayBufferInstance.type\n        );\n        if (arrayType.isManaged) {\n          if (constraints & Constraints.WILL_RETAIN) {\n            this.skippedAutoreleases.add(expr);\n          } else {\n            expr = this.makeAutorelease(expr, arrayType);\n          }\n        }\n        this.currentType = arrayType;\n        return expr;\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        expression.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = __allocBuffer(bufferSize, classId)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeRetain(\n          this.makeCallDirect(program.allocBufferInstance, [\n            isWasm64\n              ? module.i64(bufferSize)\n              : module.i32(bufferSize),\n            module.i32(arrayInstance.id)\n          ], expression),\n          program.arrayBufferInstance.type\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        if (!this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeRetain(valueExpr, elementType);\n        }\n      }\n      // store<T>(tempThis, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempThis.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    this.currentType = arrayType;\n    var expr = module.flatten(stmts, nativeArrayType);\n    if (arrayType.isManaged) {\n      if (constraints & Constraints.WILL_RETAIN) {\n        this.skippedAutoreleases.add(expr);\n      } else {\n        expr = this.makeAutorelease(expr, arrayType, this.currentFlow);\n      }\n    }\n    return expr;\n  }\n\n  private compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // Check that contextual type is a class (TODO: hidden class for interfaces?)\n    var classReference = contextualType.getClass();\n    if (!classReference) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n    var classType = classReference.type;\n    this.currentType = classType.nonNullableType;\n    if (classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.range\n      );\n      return module.unreachable();\n    }\n\n    // Check that the class is compatible with object literals\n    var ctorPrototype = classReference.prototype.constructorPrototype;\n    if (ctorPrototype) {\n      this.errorRelated(\n        DiagnosticCode.Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal,\n        expression.range, ctorPrototype.identifierNode.range, classType.toString()\n      );\n      return module.unreachable();\n    }\n\n    var isManaged = classType.isManaged;\n    if (!isManaged) {\n      this.checkUnsafe(expression, findDecorator(DecoratorKind.UNMANAGED, classReference.decoratorNodes));\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>();\n    var flow = this.currentFlow;\n    var tempLocal = isManaged\n      ? flow.getAutoreleaseLocal(classType)\n      : flow.getTempLocal(classType);\n    var nativeClassType = classType.toNativeType();\n    assert(numNames == values.length);\n\n    // Assume all class fields will be omitted, and add them to our omitted list\n    var omittedFields = new Set<Field>();\n    if (members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberKey = _keys[i];\n        let member = assert(members.get(memberKey));\n        if (member !== null && member.kind == ElementKind.FIELD) {\n          omittedFields.add(<Field>member); // incl. private/protected\n        }\n      }\n    }\n\n    // Iterate through the members defined in our expression\n    for (let i = 0; i < numNames; ++i) {\n      let memberName = names[i].text;\n      let member: DeclaredElement;\n      if (!members || !members.has(memberName) || (member = assert(members.get(memberName))).kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Property_0_is_private_and_only_accessible_within_class_1,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      if (member.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses,\n          names[i].range, memberName, classType.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let fieldInstance = <Field>member;\n      let fieldType = fieldInstance.type;\n\n      let expr = this.compileExpression(values[i], fieldType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n      if (fieldType.isManaged && !this.skippedAutoreleases.has(expr)) {\n        expr = this.makeRetain(expr, fieldType);\n      }\n      exprs.push(\n        module.store( // TODO: handle setters as well\n          fieldType.byteSize,\n          module.local_get(tempLocal.index, nativeClassType),\n          expr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        )\n      );\n\n      // This member is no longer omitted, so delete from our omitted fields\n      omittedFields.delete(fieldInstance);\n    }\n    this.currentType = classType.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // Check remaining omitted fields\n    for (let _values = Set_values(omittedFields), j = 0, l = _values.length; j < l; ++j) {\n      let fieldInstance = _values[j];\n      let fieldType = fieldInstance.type;\n\n      if (fieldInstance.initializerNode) {\n        continue; // set by generated ctor\n      }\n\n      if (fieldType.isReference) {\n        if (!fieldType.isNullableReference) {\n          this.error(\n            DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n            expression.range, fieldInstance.name, \"<object>\", classType.toString()\n          );\n          hasErrors = true;\n          continue;\n        }\n      }\n\n      switch (fieldType.kind) {\n        // Number Types (and Number alias types)\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL:\n        case TypeKind.F32:\n        case TypeKind.F64: {\n          exprs.push(\n            module.store( // TODO: handle setters as well\n              fieldType.byteSize,\n              module.local_get(tempLocal.index, nativeClassType),\n              this.makeZero(fieldType, expression),\n              fieldType.toNativeType(),\n              fieldInstance.memoryOffset\n            )\n          );\n          continue;\n        }\n      }\n\n      // Otherwise error\n      this.error(\n        DiagnosticCode.Property_0_is_missing_in_type_1_but_required_in_type_2,\n        expression.range, fieldInstance.name, \"<object>\", classType.toString()\n      );\n      hasErrors = true;\n    }\n    if (hasErrors) return module.unreachable();\n\n    // generate the default constructor\n    var ctor = this.ensureConstructor(classReference, expression);\n    // note that this is not checking field initialization within the ctor, but\n    // instead checks conditions above with provided fields taken into account.\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs.unshift(\n      module.local_set(tempLocal.index,\n        this.compileInstantiate(ctor, [], Constraints.WILL_RETAIN, expression)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs.push(\n      module.local_get(tempLocal.index, nativeClassType)\n    );\n\n    if (!isManaged) flow.freeTempLocal(tempLocal);\n    this.currentType = classType.nonNullableType;\n    return module.flatten(exprs, nativeClassType);\n  }\n\n  private compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    if (target.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Cannot_create_an_instance_of_an_abstract_class,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        uniqueMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        uniqueMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var ctor = this.ensureConstructor(classInstance, expression);\n    if (!ctor.hasDecorator(DecoratorFlags.INLINE)) {\n      // Inlined ctors haven't been compiled yet and are checked upon inline\n      // compilation of their body instead.\n      this.checkFieldInitialization(classInstance, expression);\n    }\n    return this.compileInstantiate(ctor, expression.args, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(\n    /** Class wanting a constructor. */\n    classInstance: Class,\n    /** Report node. */\n    reportNode: Node\n  ): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // shortcut if already compiled\n      if (instance.is(CommonFlags.COMPILED)) return instance;\n      // do not attempt to compile if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n    } else {\n      // clone base constructor if a derived class\n      let baseClass = classInstance.base;\n      let contextualTypeArguments = uniqueMap(classInstance.contextualTypeArguments);\n      if (baseClass) {\n        let baseCtor = this.ensureConstructor(baseClass, reportNode);\n        this.checkFieldInitialization(baseClass, reportNode);\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance,\n            // declaration is important, i.e. to access optional parameter initializers\n            (<FunctionDeclaration>baseCtor.declaration).clone()\n          ),\n          null,\n          baseCtor.signature,\n          contextualTypeArguments\n        );\n\n      // otherwise make a default constructor\n      } else {\n        instance = new Function(\n          CommonNames.constructor,\n          new FunctionPrototype(\n            CommonNames.constructor,\n            classInstance, // bound\n            this.program.makeNativeFunctionDeclaration(CommonNames.constructor,\n              CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n            )\n          ),\n          null,\n          new Signature(this.program, null, classInstance.type, classInstance.type),\n          contextualTypeArguments\n        );\n        let members = classInstance.members;\n        if (!members) classInstance.members = members = new Map();\n        members.set(\"constructor\", instance.prototype);\n      }\n\n      instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n      instance.set(CommonFlags.COMPILED);\n      instance.prototype.setResolvedInstance(\"\", instance);\n      classInstance.constructorInstance = instance;\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n\n      // generate body\n      let signature = instance.signature;\n      let module = this.module;\n      let nativeSizeType = this.options.nativeSizeType;\n      let stmts = new Array<ExpressionRef>();\n\n      // {\n      //   if (!this) this = <ALLOC>\n      //   IF_DERIVED: this = super(this, ...args)\n      //   this.a = X\n      //   this.b = Y\n      //   return this\n      // }\n      let allocExpr = this.makeAllocation(classInstance);\n      let classType = classInstance.type;\n      if (classType.isManaged) allocExpr = this.makeRetain(allocExpr, classType);\n      stmts.push(\n        module.if(\n          module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n            module.local_get(0, nativeSizeType)\n          ),\n          module.local_set(0, allocExpr)\n        )\n      );\n      if (baseClass) {\n        let parameterTypes = signature.parameterTypes;\n        let numParameters = parameterTypes.length;\n        let operands = new Array<ExpressionRef>(1 + numParameters);\n        operands[0] = module.local_get(0, nativeSizeType);\n        for (let i = 1; i <= numParameters; ++i) {\n          operands[i] = module.local_get(i, parameterTypes[i - 1].toNativeType());\n        }\n        stmts.push(\n          module.local_set(0,\n            this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n          )\n        );\n      }\n      this.makeFieldInitializationInConstructor(classInstance, stmts);\n      let body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n      flow.freeScopedLocals();\n      this.currentFlow = previousFlow;\n\n      // make the function\n      let locals = instance.localsByIndex;\n      let varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n      let numOperands = 1 + signature.parameterTypes.length;\n      let numLocals = locals.length;\n      if (numLocals > numOperands) {\n        for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n      }\n      let funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n      instance.finalize(module, funcRef);\n    }\n\n    return instance;\n  }\n\n  /** Checks that all class fields have been initialized. */\n  checkFieldInitialization(classInstance: Class, relatedNode: Node | null = null): void {\n    if (classInstance.didCheckFieldInitialization) return;\n    classInstance.didCheckFieldInitialization = true;\n    var ctor = assert(classInstance.constructorInstance);\n    this.checkFieldInitializationInFlow(classInstance, ctor.flow, relatedNode);\n  }\n\n  /** Checks that all class fields have been initialized in the specified flow. */\n  checkFieldInitializationInFlow(classInstance: Class, flow: Flow, relatedNode: Node | null = null): void {\n    var members = classInstance.members;\n    if (members) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let element = _values[i];\n        if (element.kind == ElementKind.FIELD && element.parent == classInstance) {\n          let field = <Field>element;\n          if (!field.initializerNode && !flow.isThisFieldFlag(field, FieldFlags.INITIALIZED)) {\n            if (!field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n              if (relatedNode) {\n                this.errorRelated(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  relatedNode.range,\n                  field.internalName\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned,\n                  field.declaration.name.range,\n                  field.internalName\n                );\n              }\n            }\n          } else if (field.is(CommonFlags.DEFINITELY_ASSIGNED)) {\n            if (field.type.isReference) {\n              this.warning( // involves a runtime check\n                DiagnosticCode.Property_0_is_always_assigned_before_being_used,\n                field.identifierNode.range,\n                field.internalName\n              );\n            } else {\n              this.pedantic( // is a nop anyway\n                DiagnosticCode.Unnecessary_definite_assignment,\n                field.identifierNode.range\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  compileInstantiate(\n    /** Constructor to call. */\n    ctorInstance: Function,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(ctorInstance.is(CommonFlags.CONSTRUCTOR));\n    var parent = ctorInstance.parent;\n    assert(parent.kind == ElementKind.CLASS);\n    var classInstance = <Class>parent;\n    if (classInstance.type.isUnmanaged || ctorInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctorInstance,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType, reportNode),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly WILL_DROP\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  private compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        let global = <Global>target;\n        if (!this.compileGlobal(global)) return module.unreachable(); // reports\n        let globalType = global.type;\n        assert(globalType != Type.void);\n        if (this.pendingElements.has(global)) {\n          this.error(\n            DiagnosticCode.Variable_0_used_before_its_declaration,\n            expression.range,\n            global.internalName\n          );\n          this.currentType = globalType;\n          return module.unreachable();\n        }\n        if (global.is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(global, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get(global.internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let enumValue = <EnumValue>target;\n        let parent = assert(enumValue.parent);\n        assert(parent.kind == ElementKind.ENUM);\n        let parentEnum = <Enum>parent;\n        if (!this.compileEnum(parentEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if (enumValue.is(CommonFlags.INLINED)) {\n          assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(enumValue, ctxType, constraints);\n        }\n        assert(enumValue.type == Type.i32);\n        return module.global_get(enumValue.internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>target;\n        let fieldType = fieldInstance.type;\n        assert(fieldInstance.memoryOffset >= 0);\n        let fieldParent = fieldInstance.parent;\n        assert(fieldParent.kind == ElementKind.CLASS);\n        thisExpression = assert(thisExpression);\n        let thisExpr = this.compileExpression(\n          thisExpression,\n          (<Class>fieldParent).type,\n          Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n        );\n        let thisType = this.currentType;\n        if (\n          flow.actualFunction.is(CommonFlags.CONSTRUCTOR) &&\n          thisExpression.kind == NodeKind.THIS &&\n          !flow.isThisFieldFlag(fieldInstance, FieldFlags.INITIALIZED) &&\n          !fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED)\n        ) {\n          this.errorRelated(\n            DiagnosticCode.Property_0_is_used_before_being_assigned,\n            expression.range,\n            fieldInstance.identifierNode.range,\n            fieldInstance.internalName\n          );\n        }\n        if (thisType.isNullableReference) {\n          if (!flow.isNonnull(thisExpr, thisType)) {\n            this.error(\n              DiagnosticCode.Object_is_possibly_null,\n              thisExpression.range\n            );\n          }\n        }\n        if (!fieldInstance.is(CommonFlags.COMPILED)) {\n          fieldInstance.set(CommonFlags.COMPILED);\n          let typeNode = fieldInstance.typeNode;\n          if (typeNode) this.checkTypeSupported(fieldInstance.type, typeNode);\n        }\n        this.currentType = fieldType;\n        let ret = module.load(\n          fieldType.byteSize,\n          fieldType.isSignedIntegerValue,\n          thisExpr,\n          fieldType.toNativeType(),\n          fieldInstance.memoryOffset\n        );\n        if (fieldInstance.is(CommonFlags.DEFINITELY_ASSIGNED) && fieldType.isReference && !fieldType.isNullableReference) {\n          ret = this.makeRuntimeNonNullCheck(ret, fieldType, expression);\n        }\n        return ret;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyPrototype = <PropertyPrototype>target;\n        let propertyInstance = this.resolver.resolveProperty(propertyPrototype);\n        if (!propertyInstance) return module.unreachable();\n        target = propertyInstance;\n        // fall-through\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>target;\n        let getterInstance = assert(propertyInstance.getterInstance);\n        let thisArg: ExpressionRef = 0;\n        if (getterInstance.is(CommonFlags.INSTANCE)) {\n          thisArg = this.compileExpression(\n            assert(thisExpression),\n            assert(getterInstance.signature.thisType),\n            Constraints.CONV_IMPLICIT | Constraints.IS_THIS\n          );\n        }\n        return this.compileCallDirect(getterInstance, [], expression, thisArg);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let functionPrototype = <FunctionPrototype>target;\n        let functionInstance = this.resolver.resolveFunction(functionPrototype, null);\n        if (!functionInstance) return module.unreachable();\n        if (!this.compileFunction(functionInstance)) return module.unreachable();\n        this.currentType = functionInstance.type;\n        let offset = this.ensureRuntimeFunction(functionInstance);\n        return this.options.isWasm64\n          ? module.i64(i64_low(offset), i64_high(offset))\n          : module.i32(i64_low(offset));\n      }\n    }\n    assert(false);\n    return module.unreachable();\n  }\n\n  private compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(expression.condition, Type.bool),\n      this.currentType,\n      expression.condition\n    );\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking branch type\n    var condKind = this.evaluateCondition(condExpr);\n    if (condKind == ConditionKind.TRUE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifThen, ctxType));\n    }\n    if (condKind == ConditionKind.FALSE) {\n      return module.maybeDropCondition(condExpr, this.compileExpression(ifElse, ctxType));\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var outerFlow = this.currentFlow;\n    var ifThenFlow = outerFlow.fork();\n    ifThenFlow.inheritNonnullIfTrue(condExpr);\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    ifElseFlow.inheritNonnullIfFalse(condExpr);\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType == Type.auto ? ifThenType : ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr, ifThenType);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr, ifElseType);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  private compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (isInstance) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n          if (overload) {\n            let isInstance = overload.is(CommonFlags.INSTANCE);\n            if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n              getValue = getLocalSetValue(getValue);\n              flow.freeTempLocal(tempLocal);\n              tempLocal = null;\n            }\n            expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break;\n            return expr; // here\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        this.currentType,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  private compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PLUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        let operand = expression.operand;\n        if (operand.isNumericLiteral) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.MINUS);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType, expression.operand),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n          if (overload) {\n            expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n            if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n            return expr; // skip re-assign\n          }\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          // fall back to compare by value\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType, expression.operand));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.isFloatValue\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        let classReference = this.currentType.getClassOrWrapper(this.program);\n        if (classReference) {\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n          if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n        }\n        if (!this.currentType.isValue) {\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        expr = this.convertExpression(expr,\n          this.currentType, this.currentType.intType,\n          false, false,\n          expression.operand\n        );\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      this.currentType,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  private compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER: break; // ignore error: typeof doesntExist -> undefined\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) { // access on non-object\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            // fall-through\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto); // may trigger an error\n            expr = this.convertExpression(expr, this.currentType, Type.void, true, false, operand);\n          }\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.isReference) {\n              let signatureReference = type.getSignature();\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.getClass();\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"externref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isNumericValue) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  /** Checks whether a particular feature is enabled. */\n  checkFeatureEnabled(feature: Feature, reportNode: Node): bool {\n    if (!this.options.hasFeature(feature)) {\n      this.error(\n        DiagnosticCode.Feature_0_is_not_enabled,\n        reportNode.range, featureToString(feature)\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Checks whether a particular type is supported. */\n  checkTypeSupported(type: Type, reportNode: Node): bool {\n    switch (type.kind) {\n      case TypeKind.V128: return this.checkFeatureEnabled(Feature.SIMD, reportNode);\n      case TypeKind.EXTERNREF: return this.checkFeatureEnabled(Feature.REFERENCE_TYPES, reportNode);\n    }\n    let classReference = type.getClass();\n    if (classReference) {\n      do {\n        let typeArguments = classReference.typeArguments;\n        if (typeArguments) {\n          for (let i = 0, k = typeArguments.length; i < k; ++i) {\n            if (!this.checkTypeSupported(typeArguments[i], reportNode)) {\n              return false;\n            }\n          }\n        }\n        classReference = classReference.base;\n      } while(classReference);\n    } else {\n      let signatureReference = type.getSignature();\n      if (signatureReference) {\n        let thisType = signatureReference.thisType;\n        if (thisType) {\n          if (!this.checkTypeSupported(thisType, reportNode)) {\n            return false;\n          }\n        }\n        let parameterTypes = signatureReference.parameterTypes;\n        for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n          if (!this.checkTypeSupported(parameterTypes[i], reportNode)) {\n            return false;\n          }\n        }\n        let returnType = signatureReference.returnType;\n        if (!this.checkTypeSupported(returnType, reportNode)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /** Checks whether a particular function signature is supported. */\n  checkSignatureSupported(signature: Signature, reportNode: FunctionTypeNode): bool {\n    var supported = true;\n    var explicitThisType = reportNode.explicitThisType;\n    if (explicitThisType) {\n      if (!this.checkTypeSupported(assert(signature.thisType), explicitThisType)) {\n        supported = false;\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n      if (!this.checkTypeSupported(parameterTypes[i], reportNode.parameters[i])) {\n        supported = false;\n      }\n    }\n    if (!this.checkTypeSupported(signature.returnType, reportNode.returnType)) {\n      supported = false;\n    }\n    return supported;\n  }\n\n  /** Evaluates a boolean condition, determining whether it is TRUE, FALSE or UNKNOWN. */\n  evaluateCondition(expr: ExpressionRef): ConditionKind {\n    var module = this.module;\n    var evaled = module.runExpression(expr, ExpressionRunnerFlags.Default);\n    if (evaled) {\n      return getConstValueI32(evaled)\n        ? ConditionKind.TRUE\n        : ConditionKind.FALSE;\n    }\n    return ConditionKind.UNKNOWN;\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n      case TypeKind.EXTERNREF:\n        // TODO: return null ref for both externref as well as funcref\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          reportNode.range,\n          \"ref.null\"\n        );\n        return module.unreachable();\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u32>(x) & 0x7FFFFFFF) - 1 <= 0x7F800000 - 1\n        //\n        // and finally:\n        // (reinterpret<u32>(x) << 1) - (1 << 1) <= ((0x7F800000 - 1) << 1)\n        return module.binary(BinaryOp.LeU32,\n          module.binary(BinaryOp.SubI32,\n            module.binary(BinaryOp.ShlI32,\n              module.unary(UnaryOp.ReinterpretF32, expr),\n              module.i32(1)\n            ),\n            module.i32(2) // 1 << 1\n          ),\n          module.i32(0xFEFFFFFE) // (0x7F800000 - 1) << 1\n        );\n      }\n      case TypeKind.F64: {\n        // 0 < abs(bitCast(x)) <= bitCast(Infinity) or\n        // (reinterpret<u64>(x) & 0x7FFFFFFFFFFFFFFF) - 1 <= 0x7FF0000000000000 - 1\n        //\n        // and finally:\n        // (reinterpret<u64>(x) << 1) - (1 << 1) <= ((0x7FF0000000000000 - 1) << 1)\n        return module.binary(BinaryOp.LeU64,\n          module.binary(BinaryOp.SubI64,\n            module.binary(BinaryOp.ShlI64,\n              module.unary(UnaryOp.ReinterpretF64, expr),\n              module.i64(1)\n            ),\n            module.i64(2) // 1 << 1\n          ),\n          module.i64(0xFFFFFFFE, 0xFFDFFFFF) // (0x7FF0000000000000 - 1) << 1\n        );\n      }\n      case TypeKind.EXTERNREF: {\n        // TODO: non-null object might still be considered falseish\n        // i.e. a ref to Boolean(false), Number(0), String(\"\") etc.\n        // TODO: return module.unary(UnaryOp.EqzI32, module.ref_is_null(expr));\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          reportNode.range,\n          \"ref.is_null\"\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.nextMemoryOffset)\n        : module.i32(classInstance.nextMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields within the constructor. */\n  makeFieldInitializationInConstructor(\n    /** Class being initialized. */\n    classInstance: Class,\n    /** Statements to append to also being returned. Created if omitted. */\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return stmts;\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.isInline;\n    var thisLocalIndex = isInline\n      ? flow.lookupLocal(CommonNames.this_)!.index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member;\n      assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      let typeNode = field.typeNode;\n      if (typeNode) this.checkTypeSupported(fieldType, typeNode);\n\n      // if declared as a constructor parameter, use its value\n      if (parameterIndex >= 0) {\n        initExpr = module.local_get(\n          isInline\n            ? flow.lookupLocal(field.name)!.index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr, fieldType);\n\n      // fall back to use initializer if present\n      } else if (initializerNode) {\n        initExpr = this.compileExpression(initializerNode, fieldType,\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr, fieldType);\n        }\n\n      // otherwise initialize with zero\n      } else {\n        initExpr = this.makeZero(fieldType, fieldPrototype.declaration);\n      }\n\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeAbort(\n    /** Message argument of type string, if any. */\n    message: Expression | null,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return this.module.unreachable();\n\n    var stringInstance = program.stringInstance;\n    var messageArg: ExpressionRef;\n    if (message !== null) {\n      // The message argument works much like an arm of an IF that does not become executed if the\n      // assertion succeeds respectively is only being computed if the program actually crashes.\n      // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n      // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n      messageArg = this.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n    } else {\n      messageArg = this.makeZero(stringInstance.type, codeLocation);\n    }\n\n    return this.makeStaticAbort(messageArg, codeLocation);\n  }\n\n  /** Makes a call to `abort`, if present, otherwise creates a trap. */\n  makeStaticAbort(\n    /** Message argument of type string. May be zero. */\n    messageExpr: ExpressionRef,\n    /** Code location to report when aborting. */\n    codeLocation: Node\n  ): ExpressionRef {\n    var program = this.program;\n    var module = this.module;\n    var abortInstance = program.abortInstance;\n    if (!abortInstance || !this.compileFunction(abortInstance)) return module.unreachable();\n\n    var filenameExpr = this.ensureStaticString(codeLocation.range.source.normalizedPath);\n    var range = codeLocation.range;\n    var source = range.source;\n    return module.block(null, [\n      module.call(\n        abortInstance.internalName, [\n          messageExpr,\n          filenameExpr,\n          module.i32(source.lineAt(range.start)),\n          module.i32(source.columnAt())\n        ],\n        NativeType.None\n      ),\n      module.unreachable()\n    ]);\n  }\n\n  /** Makes a runtime non-null check, e.g. on `<Type>possiblyNull` or `possiblyNull!`. */\n  makeRuntimeNonNullCheck(\n    /** Expression being checked. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n    flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n    expr = module.if(\n      module.local_tee(temp.index, expr),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected null\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = type.nonNullableType;\n    return expr;\n  }\n\n  /** Makes a runtime upcast check, e.g. on `<Child>parent`. */\n  makeRuntimeUpcastCheck(\n    /** Expression being upcast. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Type casting to. */\n    toType: Type,\n    /** Report node. */\n    reportNode: Node\n  ): ExpressionRef {\n    assert(toType.isReference && toType.nonNullableType.isAssignableTo(type));\n    var module = this.module;\n    var flow = this.currentFlow;\n    var temp = flow.getTempLocal(type);\n    var instanceofInstance = this.program.instanceofInstance;\n    assert(this.compileFunction(instanceofInstance));\n    expr = module.if(\n      module.call(instanceofInstance.internalName, [\n        module.local_tee(temp.index, expr),\n        module.i32(toType.classReference!.id)\n      ], NativeType.I32),\n      module.local_get(temp.index, type.toNativeType()),\n      this.makeStaticAbort(this.ensureStaticString(\"unexpected upcast\"), reportNode) // TODO: throw\n    );\n    flow.freeTempLocal(temp);\n    this.currentType = toType;\n    return expr;\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.args;\n  if (args !== null && args.length > 0) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.isLiteralKind(LiteralKind.STRING)) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.isLiteralKind(LiteralKind.STRING)) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * @fileoverview Generated from diagnosticsMessages.json. Do not edit.\n * @license Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented_0 = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Low_memory_limit_exceeded_by_static_data_0_1 = 104,\n  Module_requires_at_least_0_pages_of_initial_memory = 105,\n  Module_requires_at_least_0_pages_of_maximum_memory = 106,\n  Shared_memory_requires_maximum_memory_to_be_defined = 107,\n  Shared_memory_requires_feature_threads_to_be_enabled = 108,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_final_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Class_0_cannot_declare_a_constructor_when_instantiated_from_an_object_literal = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Expression_resolves_to_unusual_type_0 = 226,\n  Array_literal_expected = 227,\n  Function_0_is_virtual_and_will_not_be_inlined = 228,\n  Property_0_only_has_a_setter_and_is_missing_a_getter = 229,\n  _0_keyword_cannot_be_used_here = 230,\n  A_class_with_a_constructor_explicitly_returning_something_else_than_this_must_be_final = 231,\n  Exported_generic_function_or_class_has_no_concrete_instances = 232,\n  Property_0_is_always_assigned_before_being_used = 233,\n  Type_0_is_cyclic_Module_will_include_deferred_garbage_collection = 900,\n  Importing_the_table_disables_some_indirect_call_optimizations = 901,\n  Exporting_the_table_disables_some_indirect_call_optimizations = 902,\n  Expression_compiles_to_a_dynamic_check_at_runtime = 903,\n  Indexed_access_may_involve_bounds_checking = 904,\n  Explicitly_returning_constructor_drops_this_allocation = 905,\n  Unnecessary_definite_assignment = 906,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  Type_argument_list_cannot_be_empty = 1099,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer = 1190,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  An_interface_can_only_extend_an_interface = 2312,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Property_0_is_private_and_only_accessible_within_class_1 = 2341,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  Getter_and_setter_accessors_do_not_agree_in_visibility = 2379,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Overload_signatures_must_all_be_public_private_or_protected = 2385,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  This_overload_signature_is_not_compatible_with_its_implementation_signature = 2394,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_class_can_only_implement_an_interface = 2422,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses = 2445,\n  Variable_0_used_before_its_declaration = 2448,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  _0_is_referenced_directly_or_indirectly_in_its_own_base_expression = 2506,\n  Cannot_create_an_instance_of_an_abstract_class = 2511,\n  Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_2 = 2515,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  Property_0_has_no_initializer_and_is_not_assigned_in_the_constructor_before_this_is_used_or_returned = 2564,\n  Property_0_is_used_before_being_assigned = 2565,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Property_0_is_missing_in_type_1_but_required_in_type_2 = 2741,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented: {0}\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 104: return \"Low memory limit exceeded by static data: {0} > {1}\";\n    case 105: return \"Module requires at least '{0}' pages of initial memory.\";\n    case 106: return \"Module requires at least '{0}' pages of maximum memory.\";\n    case 107: return \"Shared memory requires maximum memory to be defined.\";\n    case 108: return \"Shared memory requires feature 'threads' to be enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is final and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Class '{0}' cannot declare a constructor when instantiated from an object literal.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 226: return \"Expression resolves to unusual type '{0}'.\";\n    case 227: return \"Array literal expected.\";\n    case 228: return \"Function '{0}' is virtual and will not be inlined.\";\n    case 229: return \"Property '{0}' only has a setter and is missing a getter.\";\n    case 230: return \"'{0}' keyword cannot be used here.\";\n    case 231: return \"A class with a constructor explicitly returning something else than 'this' must be '@final'.\";\n    case 232: return \"Exported generic function or class has no concrete instances.\";\n    case 233: return \"Property '{0}' is always assigned before being used.\";\n    case 900: return \"Type '{0}' is cyclic. Module will include deferred garbage collection.\";\n    case 901: return \"Importing the table disables some indirect call optimizations.\";\n    case 902: return \"Exporting the table disables some indirect call optimizations.\";\n    case 903: return \"Expression compiles to a dynamic check at runtime.\";\n    case 904: return \"Indexed access may involve bounds checking.\";\n    case 905: return \"Explicitly returning constructor drops 'this' allocation.\";\n    case 906: return \"Unnecessary definite assignment.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1099: return \"Type argument list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1190: return \"The variable declaration of a 'for...of' statement cannot have an initializer.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2312: return \"An interface can only extend an interface.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2341: return \"Property '{0}' is private and only accessible within class '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2379: return \"Getter and setter accessors do not agree in visibility.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2385: return \"Overload signatures must all be public, private or protected.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2394: return \"This overload signature is not compatible with its implementation signature.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2422: return \"A class can only implement an interface.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2445: return \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\";\n    case 2448: return \"Variable '{0}' used before its declaration.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2506: return \"'{0}' is referenced directly or indirectly in its own base expression.\";\n    case 2511: return \"Cannot create an instance of an abstract class.\";\n    case 2515: return \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from '{2}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2564: return \"Property '{0}' has no initializer and is not assigned in the constructor before 'this' is used or returned.\";\n    case 2565: return \"Property '{0}' is used before being assigned.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2741: return \"Property '{0}' is missing in type '{1}' but required in type '{2}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * @fileoverview A TypeScript parser for the AssemblyScript subset.\n *\n * Takes the tokens produced by the `Tokenizer` and builds an abstract\n * syntax tree composed of `Node`s wrapped in a `Source` out of it.\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter,\n  DiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForOfStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureNode,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Represents a dependee. */\nclass Dependee {\n  constructor(\n    public source: Source,\n    public reportNode: Node\n  ) {}\n}\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source | null = null;\n  /** Map of dependees being depended upon by a source, by path. */\n  dependees: Map<string, Dependee> = new Map();\n  /** An array of parsed sources. */\n  sources: Source[];\n\n  /** Constructs a new parser. */\n  constructor(\n    diagnostics: DiagnosticMessage[] | null = null,\n    sources: Source[] | null = null\n  ) {\n    super(diagnostics);\n    this.sources = sources ? sources : new Array<Source>();\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file, or `null` to indicate not found. */\n    text: string | null,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with file extensions\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(path);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // check if this is an error\n    if (text === null) {\n      let dependees = this.dependees;\n      let dependee: Dependee | null = null;\n      if (dependees.has(internalPath)) dependee = assert(dependees.get(internalPath));\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        dependee\n          ? dependee.reportNode.range\n          : null,\n        path\n      );\n      return;\n    }\n\n    // create the source element\n    var source = new Source(\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER,\n      normalizedPath,\n      text\n    );\n\n    this.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, this.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) {\n        statements.push(statement);\n      } else {\n        this.skipStatement(tn);\n      }\n    }\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart = 0;\n    var exportEnd = 0;\n    var defaultStart = 0;\n    var defaultEnd = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart = 0;\n    var declareEnd = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        let abstractStart = tn.tokenPos;\n        let abstractEnd = tn.pos;\n        let next = tn.peek(true);\n        if (tn.nextTokenOnNewLine) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        }\n        if (next != Token.CLASS) {\n          if (next == Token.INTERFACE) {\n            this.error(\n              DiagnosticCode._abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration,\n              tn.range(abstractStart, abstractEnd)\n            );\n          }\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? assert(backlog.shift()) : null;\n  }\n\n  /** Obtains the path of the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var dependees = this.dependees;\n    if (dependees.has(dependent)) {\n      let dependee = assert(dependees.get(dependent));\n      return dependee.source.internalPath;\n    }\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'null'\n    } else if (token == Token.NULL) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"null\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: TypeNode[] | null = null;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [ parameter ];\n          else parameters.push(parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      if (!parameters) parameters = [];\n      type = Node.createNamedType(name, parameters, false, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... | null\n    while (tn.skip(Token.BAR)) {\n      if (tn.skip(Token.NULL)) {\n        type.isNullable = true;\n      } else {\n        let notNullStart = tn.pos;\n        let notNull = this.parseType(tn, false, true);\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            notNull ? notNull.range : tn.range(notNullStart), \"null\"\n          );\n        }\n        return null;\n      }\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let paramStart = -1;\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          paramStart = tn.tokenPos;\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn, false);\n            if (!type) return null;\n            if (type.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                type.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>type;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          if (paramStart < 0) paramStart = tn.tokenPos;\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = Node.createParameter(kind, name, type, null, tn.range(paramStart, tn.pos));\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = Node.createParameter(kind, name, Node.createOmittedType(tn.range(tn.pos)), null, tn.range(paramStart, tn.pos));\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = Node.createParameter(\n            firstParamKind,\n            firstParamNameNoType,\n            Node.createOmittedType(firstParamNameNoType.range.atEnd),\n            null,\n            firstParamNameNoType.range\n          );\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    if (!parameters) parameters = [];\n    return Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32,\n    isFor: bool = false\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var declarations = new Array<VariableDeclaration>();\n    do {\n      let declaration = this.parseVariableDeclaration(tn, flags, decorators, isFor);\n      if (!declaration) return null;\n      declarations.push(declaration);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(decorators, declarations, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null,\n    isFor: bool = false\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITELY_ASSIGNED;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn, true);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else if (!isFor) {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if (initializer !== null && (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range\n      );\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      parentDecorators,\n      flags,\n      type,\n      initializer,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      decorators,\n      flags,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      parentFlags,\n      value,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    var start = tn.tokenPos;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!typeParameters.length) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range(start, tn.pos)\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>type;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>type;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest !== null && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        identifier,\n        type,\n        initializer,\n        Range.join(assert(startRange), tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length > 0 && parameters[0].initializer !== null) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      decorators,\n      flags,\n      typeParameters,\n      signature,\n      body,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n      // or at '(' of arrow function:\n      //  Parameters (':' Type)?\n      //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, this.parseParametersThis, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    explicitThis: NamedTypeNode | null,\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      explicitThis,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      signature,\n      body,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let type = this.parseType(tn);\n      if (!type) return null;\n      if (type.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          type.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>type;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (type.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            type.range\n          );\n          return null;\n        }\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        null,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        decorators,\n        flags,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(member instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      null,\n      CommonFlags.NONE,\n      null,\n      null,\n      null,\n      members,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) {\n          if (member.kind == NodeKind.INDEXSIGNATURE) {\n            declaration.indexSignature = <IndexSignatureNode>member;\n          } else {\n            assert(declaration instanceof DeclarationStatement);\n            members.push(<DeclarationStatement>member);\n          }\n        } else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): Node | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n    var startPos = 0;\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      startPos = tn.tokenPos;\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = new Array();\n        decorators.push(decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface && decorators !== null) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      } else {\n        flags |= CommonFlags.PUBLIC;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      } else {\n        flags |= CommonFlags.PRIVATE;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      } else {\n        flags |= CommonFlags.PROTECTED;\n        accessStart = tn.tokenPos;\n        accessEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      } else {\n        flags |= CommonFlags.STATIC;\n        staticStart = tn.tokenPos;\n        staticEnd = tn.pos;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface || !parent.is(CommonFlags.ABSTRACT)) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        } else {\n          flags |= CommonFlags.ABSTRACT;\n          abstractStart = tn.tokenPos;\n          abstractEnd = tn.pos;\n        }\n        if (!startPos) startPos = tn.tokenPos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart = 0;\n    var readonlyEnd = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n        if (!startPos) startPos = readonlyStart;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart = 0;\n    var getEnd = 0;\n    var isSetter = false;\n    var setStart = 0;\n    var setEnd = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          getStart = tn.tokenPos;\n          getEnd = tn.pos;\n          if (!startPos) startPos = getStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (!startPos) startPos = setStart;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (!startPos) startPos = tn.tokenPos;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var isGetterOrSetter = isGetter || isSetter;\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!isGetterOrSetter && tn.skip(Token.OPENBRACKET)) {\n        if (!startPos) startPos = tn.tokenPos;\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignature(tn, flags, decorators);\n        if (!retIndex) {\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n          return null;\n        }\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      if (!startPos) startPos = tn.tokenPos;\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetterOrSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.type,\n              null, // initialized via parameter\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length > 0 && parameters[0].initializer !== null) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      } else if (name.text == \"constructor\") {\n        this.error(\n          DiagnosticCode._0_keyword_cannot_be_used_here,\n          name.range, \"constructor\"\n        );\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, isSetter || name.kind == NodeKind.CONSTRUCTOR);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        } else if (isInterface) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!isInterface && !(flags & (CommonFlags.AMBIENT | CommonFlags.ABSTRACT))) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        decorators,\n        flags,\n        typeParameters,\n        signature,\n        body,\n        tn.range(startPos, tn.pos)\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetterOrSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITELY_ASSIGNED;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if (\n        (flags & CommonFlags.DEFINITELY_ASSIGNED) != 0 &&\n        (isInterface || initializer !== null || (flags & CommonFlags.STATIC) != 0)\n      ) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        decorators,\n        flags,\n        type,\n        initializer,\n        range\n      );\n      if (!(isInterface && tn.skip(Token.COMMA))) {\n        tn.skip(Token.SEMICOLON);\n      }\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignature(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n  ): IndexSignatureNode | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators !== null && decorators.length > 0) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              if (valueType.kind != NodeKind.NAMEDTYPE) {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  valueType.range\n                );\n                return null;\n              }\n              return Node.createIndexSignature(<NamedTypeNode>keyType, valueType, flags, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          decorators,\n          flags,\n          members,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    var currentSource = assert(this.currentSource);\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      if (path !== null) {\n        let internalPath = assert(ret.internalPath);\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(currentSource, path));\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, new Dependee(currentSource, path));\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createExportMember(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createExportMember(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented_0,\n          tn.range(),\n          \"Mixed default and named imports\"\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createWildcardImportStatement(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, new Dependee(assert(this.currentSource), path));\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      if (asIdentifier) {\n        return Node.createImportDeclaration(\n          identifier,\n          asIdentifier,\n          Range.join(identifier.range, asIdentifier.range)\n        );\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        null,\n        identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(statement, condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): Statement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos, true);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos, true);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (initializer) {\n        if (tn.skip(Token.OF)) {\n          // TODO: for (let [key, val] of ...)\n          if (initializer.kind == NodeKind.EXPRESSION) {\n            if ((<ExpressionStatement>initializer).expression.kind != NodeKind.IDENTIFIER) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                initializer.range\n              );\n              return null;\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          if (initializer.kind == NodeKind.VARIABLE) {\n            let declarations = (<VariableStatement>initializer).declarations;\n            for (let i = 0, k = declarations.length; i < k; ++i) {\n              let declaration = declarations[i];\n              let initializer = declaration.initializer;\n              if (initializer) {\n                this.error(\n                  DiagnosticCode.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer,\n                  initializer.range\n                ); // recoverable\n              }\n            }\n            return this.parseForOfStatement(tn, startPos, initializer);\n          }\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            initializer.range\n          );\n          return null;\n        }\n        // non-for..of needs type or initializer\n        if (initializer.kind == NodeKind.VARIABLE) {\n          let declarations = (<VariableStatement>initializer).declarations;\n          for (let i = 0, k = declarations.length; i < k; ++i) {\n            let declaration = declarations[i];\n            if (!declaration.initializer) {\n              if (declaration.flags & CommonFlags.CONST) {\n                this.error(\n                  DiagnosticCode._const_declarations_must_be_initialized,\n                  declaration.name.range\n                );\n              } else if (!declaration.type) {\n                this.error(\n                  DiagnosticCode.Type_expected,\n                  declaration.name.range.atEnd\n                );\n              }\n            }\n          }\n        }\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseForOfStatement(\n    tn: Tokenizer,\n    startPos: i32,\n    variable: Statement,\n  ): ForOfStatement | null {\n\n    // at 'of': Expression ')' Statement\n\n    var iterable = this.parseExpression(tn);\n    if (!iterable) return null;\n\n    if (!tn.skip(Token.CLOSEPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \")\"\n      );\n      return null;\n    }\n\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    return Node.createForOfStatement(\n      variable,\n      iterable,\n      statement,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let switchCases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let switchCase = this.parseSwitchCase(tn);\n            if (!switchCase) return null;\n            switchCases.push(switchCase);\n          }\n          let ret = Node.createSwitchStatement(condition, switchCases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n      // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (\n          tn.peek() != Token.CASE &&\n          tn.nextToken != Token.DEFAULT &&\n          tn.nextToken != Token.CLOSEBRACE\n        ) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          decorators,\n          flags,\n          typeParameters,\n          type,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN) ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            null,\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = Node.createOmittedExpression(tn.range(tn.pos));\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                ParameterKind.DEFAULT,\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                identifier.range\n              )\n            ],\n            null,\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var start = tn.tokenPos;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN)) {\n      let end = tn.pos;\n      if (tn.skip(Token.OPENPAREN)) {\n        if (!typeArguments) {\n          this.error(\n            DiagnosticCode.Type_argument_list_cannot_be_empty,\n            tn.range(start, end)\n          );\n        }\n        return typeArguments;\n      }\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          if (tn.skip(Token.CONST)) {\n            expr = Node.createAssertionExpression(\n              AssertionKind.CONST,\n              expr,\n              null,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let toType = this.parseType(tn); // reports\n            if (!toType) return null;\n            expr = Node.createAssertionExpression(\n              AssertionKind.AS,\n              expr,\n              toType,\n              tn.range(startPos, tn.pos)\n            );\n          }\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN) ||\n      potentiallyGeneric &&\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * @fileoverview Builders for various definitions describing a module.\n *\n * - TSDBuilder: Creates a TypeScript definition file (.d.ts)\n * - IDLBuilder: Creates a WebIDL interface definition (.webidl)\n *\n * @license Apache-2.0\n */\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n} from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate = includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    // TODO: for (let file of this.program.filesByName.values()) {\n    for (let _values = Map_values(this.program.filesByName), i = 0, k = _values.length; i < k; ++i) {\n      let file = unchecked(_values[i]);\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var exports = file.exports;\n    if (exports) {\n      // TODO: for (let [memberName, member] of exports) {\n      for (let _keys = Map_keys(exports), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(exports.get(memberName));\n        this.visitElement(memberName, member);\n      }\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = unchecked(exportsStar[i]);\n        this.visitFile(exportStar);\n      }\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (!element.is(CommonFlags.INSTANCE) && seen.has(element)) {\n      this.visitAlias(name, element, assert(seen.get(element)));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.ENUMVALUE: break; // handled by visitEnum\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let fieldInstance = <Field>element;\n        if (fieldInstance.is(CommonFlags.COMPILED)) this.visitField(name, fieldInstance);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let propertyInstance = (<PropertyPrototype>element).instance;\n        if (!propertyInstance) break;\n        element = propertyInstance;\n        // fall-through\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let propertyInstance = <Property>element;\n        let getterInstance = propertyInstance.getterInstance;\n        if (getterInstance) this.visitFunction(name, getterInstance);\n        let setterInstance = propertyInstance.setterInstance;\n        if (setterInstance) this.visitFunction(name, setterInstance);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      // TODO: for (let instance of instances.values()) {\n      for (let _values = Map_values(instances), i = 0, k = _values.length; i < k; ++i) {\n        let instance = unchecked(_values[i]);\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, instance);\n      }\n    }\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          let isConst = enumValue.is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(memberName);\n          if (isConst) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(element.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export \");\n    if (element.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    var remainingMembers = 0;\n    if (members) {\n      remainingMembers = members.size;\n      // TODO: for (let [memberName, member] of members) {\n      for (let _keys = Map_keys(members), i = 0, k = _keys.length; i < k; ++i) {\n        let memberName = unchecked(_keys[i]);\n        let member = assert(members.get(memberName));\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let enumValue = <EnumValue>member;\n          indent(sb, this.indentLevel);\n          sb.push(memberName);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert(enumValue.constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low(enumValue.constantIntegerValue).toString());\n          }\n          sb.push(\",\\n\");\n          --remainingMembers;\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n    if (remainingMembers) this.visitNamespace(name, element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(element.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      sb.push(\"export \");\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(name);\n    var base = element.base;\n    if (base !== null && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      let extendsNode = assert(element.prototype.extendsNode);\n      sb.push(extendsNode.name.identifier.text); // TODO: fqn?\n    }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      // TODO: for (let member of staticMembers.values()) {\n      for (let _values = Map_values(staticMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      // TODO: for (let member of instanceMembers.values()) {\n      for (let _values = Map_values(instanceMembers), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        if (member.parent == element) { // own member\n          this.visitElement(member.name, member);\n        }\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members !== null && members.size > 0) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      // TODO: for (let member of members.values()) {\n      for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n        let member = unchecked(_values[i]);\n        this.visitElement(member.name, member);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    var isWasm64 = this.program.options.isWasm64;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type i64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type isize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type isize = number;\\n\");\n    }\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type u64 = BigInt;\\n\");\n    if (isWasm64) {\n      sb.push(\"  type usize = BigInt;\\n\");\n    } else {\n      sb.push(\"  type usize = number;\\n\");\n    }\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    // TODO: for (let member of members.values()) {\n    for (let _values = Map_values(members), i = 0, k = _values.length; i < k; ++i) {\n      let member = unchecked(_values[i]);\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            // TODO: for (let instance of instances.values()) {\n            for (let _values = Map_values(instances), j = 0, l = _values.length; j < l; ++j) {\n              let instance = unchecked(_values[j]);\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * @fileoverview JavaScript glue code.\n * @license Apache-2.0\n */\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\nimport \"./collections\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; },\n  {\n    \"MIN_VALUE\": { value: -128, writable: false },\n    \"MAX_VALUE\": { value:  127, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; },\n  {\n    \"MIN_VALUE\": { value: -32768, writable: false },\n    \"MAX_VALUE\": { value:  32767, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; },\n  {\n    \"MIN_VALUE\": { value: -2147483648, writable: false },\n    \"MAX_VALUE\": { value:  2147483647, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; },\n  {\n    \"MIN_VALUE\": { value:   0, writable: false },\n    \"MAX_VALUE\": { value: 255, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; },\n  {\n    \"MIN_VALUE\": { value:     0, writable: false },\n    \"MAX_VALUE\": { value: 65535, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; },\n  {\n    \"MIN_VALUE\": { value:          0, writable: false },\n    \"MAX_VALUE\": { value: 4294967295, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; },\n  {\n    \"MIN_VALUE\": { value: false, writable: false },\n    \"MAX_VALUE\": { value: true,  writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); },\n  {\n    \"EPSILON\":   { value: 1.1920928955078125e-07, writable: false },\n    \"MIN_VALUE\": { value: 1.4012984643248170e-45, writable: false },\n    \"MAX_VALUE\": { value: 3.4028234663852886e+38, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  1.1754943508222875e-38, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; },\n  {\n    \"EPSILON\":   { value: 2.2204460492503131e-016, writable: false },\n    \"MIN_VALUE\": { value:                  5e-324, writable: false },\n    \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n    \"MIN_NORMAL_VALUE\":  { value:  2.2250738585072014e-308, writable: false },\n    \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n    \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false },\n    \"POSITIVE_INFINITY\": { value:  Infinity, writable: false },\n    \"NEGATIVE_INFINITY\": { value: -Infinity, writable: false },\n    \"NaN\": { value: NaN, writable: false }\n  }\n);\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCharCode.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCharCode.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  const CHUNKSIZE = 1 << 13;\n  const len = arr.length;\n  if (len <= CHUNKSIZE) {\n    return String.fromCodePoint.apply(String, arr);\n  }\n  let index = 0;\n  let parts = '';\n  while (index < len) {\n    parts += String.fromCodePoint.apply(\n      String,\n      arr.slice(index, Math.min(index + CHUNKSIZE, len))\n    );\n    index += CHUNKSIZE;\n  }\n  return parts;\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n};\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  },\n  exp2: {\n    value: function exp2(x) {\n      return Math.pow(2, x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() { /* nop */ };\n\nglobalScope[\"trace\"] = function(message, n) {\n  if (n) message += Array.prototype.slice.call(arguments, 2, 2 + n);\n  console.error(\"trace: \" + message);\n};\n\nObject.defineProperty(Int8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint8ClampedArray, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint8ClampedArray(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint16Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint16Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Int32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Int32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Uint32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Uint32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float32Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float32Array(buffer, byteOffset, length);\n  }\n});\n\nObject.defineProperty(Float64Array, \"wrap\", {\n  value: function wrap(buffer, byteOffset, length) {\n    return new Float64Array(buffer, byteOffset, length);\n  }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8, // see: https://github.com/WebAssembly/reference-types\n  /** Multi value types. */\n  MULTI_VALUE = 1 << 9 // see: https://github.com/WebAssembly/multi-value\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n    case Feature.MULTI_VALUE: return \"multi-value\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** Portable. */\n  JS = 0,\n  /** WebAssembly with 32-bit pointers. */\n  WASM32 = 1,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64 = 2,\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags = TypeinfoFlags.NONE;\n  /** Base class id or `0` if none. */\n  base: u32 = 0;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `StaticArray`. */\n  STATICARRAY = 1 << 2,\n  /** Type is a `Set`. */\n  SET = 1 << 3,\n  /** Type is a `Map`. */\n  MAP = 1 << 4,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 5,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 6,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 7,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 8,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 9,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 10,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 11,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 12,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 13,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 14,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 15,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 16,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 17,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 18,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 19,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 20,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 21,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 22,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 23\n}\n","/**\n * @fileoverview Floating point glue code for JaavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function f32_as_i32(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function i32_as_f32(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function f64_as_i64(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function i64_as_f64(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","/**\n * @fileoverview 64-bit integer glue code for JavaScript.\n * @license Apache-2.0\n */\n\n/* eslint-disable no-undef */\n\nconst Long = global.Long || require(\"long\");\n\nglobal.i64_zero    = Long.ZERO;\nglobal.i64_one     = Long.ONE;\nglobal.i64_neg_one = Long.fromInt(-1);\n\nglobal.i64_is = function i64_is(value) {\n  return Long.isLong(value);\n};\n\nglobal.i64_new = function i64_new(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function i64_low(value) {\n  return value.low;\n};\n\nglobal.i64_high = function i64_high(value) {\n  return value.high;\n};\n\nglobal.i64_add = function i64_add(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function i64_sub(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function i64_mul(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_pow = function i64_pow(left, right) {\n  var rightLo = right.low;\n  var rightHi = right.high;\n  if (rightHi <= 0) {\n    if (rightHi < 0) {\n      if (left.eq(global.i64_neg_one)) {\n        return rightLo & 1 ? left : Long.ONE;\n      }\n      return left.eq(Long.ONE) ? left : Long.ZERO;\n    }\n    if (rightLo == 0) return Long.ONE;\n    if (rightLo == 1) return left;\n    if (rightLo == 2) return left.mul(left);\n  }\n  var result = Long.ONE;\n  while (rightLo | rightHi) {\n    if (rightLo & 1) result = result.mul(left);\n    right = right.shru(1);\n    left  = left.mul(left);\n    rightLo = right.low;\n    rightHi = right.high;\n  }\n  return result;\n};\n\nglobal.i64_div = function i64_div(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function i64_div_u(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function i64_rem(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function i64_rem_u(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function i64_and(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function i64_or(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function i64_xor(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function i64_shl(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function i64_shr(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function i64_shr_u(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function i64_not(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function i64_eq(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function i64_ne(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_gt = function i64_gt(left, right) {\n  return left.gt(right);\n};\n\nglobal.i64_align = function i64_align(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function i64_is_i8(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function i64_is_i16(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function i64_is_i32(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function i64_is_u8(value) {\n  return value.high === 0 && (value.low >>> 0) <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function i64_is_u16(value) {\n  return value.high === 0 && (value.low >>> 0) <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function i64_is_u32(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function i64_is_bool(value) {\n  return (value.high | (value.low & ~1)) === 0;\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function i64_is_f32(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function i64_is_f64(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function i64_to_f32(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function i64_to_f64(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function i64_to_string(value, unsigned) {\n  return unsigned ? value.toUnsigned().toString() : value.toString();\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * @fileoverview Collections glue code for JavaScript.\n * @license Apache-2.0\n */\n\nglobal.Map_keys = function Map_keys(map) {\n  return Array.from(map.keys());\n};\n\nglobal.Map_values = function Map_values(map) {\n  return Array.from(map.values());\n};\n\nglobal.Set_values = function Set_values(set) {\n  return Array.from(set.values());\n};\n","/**\n * @license\n * Copyright 2020 Daniel Wirtz / The AssemblyScript Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview The C-like and re-exported public compiler interface.\n *\n * The intended way to consume the compiler sources is to import this\n * file, which again exports all relevant functions, classes and constants\n * as a flat namespace.\n *\n * Note though that the compiler sources are written in \"portable\n * AssemblyScript\" that can be compiled to both JavaScript with tsc and\n * to WebAssembly with asc, and as such require additional glue code\n * depending on the target.\n *\n * When compiling to JavaScript `glue/js/index.js` must be included.\n * When compiling to WebAssembly `glue/wasm/index.ts` must be included.\n */\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `exportMemory` option. */\nexport function setExportMemory(options: Options, exportMemory: bool): void {\n  options.exportMemory = exportMemory;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `initialMemory` option. */\nexport function setInitialMemory(options: Options, initialMemory: u32): void {\n  options.initialMemory = initialMemory;\n}\n\n/** Sets the `maximumMemory` option. */\nexport function setMaximumMemory(options: Options, maximumMemory: u32): void {\n  options.maximumMemory = maximumMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: bool): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets the `tableBase` option. */\nexport function setTableBase(options: Options, tableBase: u32): void {\n  options.tableBase = tableBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sets the `lowMemoryLimit` option. */\nexport function setLowMemoryLimit(options: Options, lowMemoryLimit: i32): void {\n  options.lowMemoryLimit = lowMemoryLimit;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n/** Multi value types. */\nexport const FEATURE_MULTI_VALUE = Feature.MULTI_VALUE;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Sets the `pedantic` option. */\nexport function setPedantic(options: Options, pedantic: bool): void {\n  options.pedantic = pedantic;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file, or `null` to indicate not found. */\n  text: string | null,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Initializes the program pre-emptively for transform hooks. */\nexport function initializeProgram(program: Program): void {\n  program.initialize();\n}\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// Full API\nexport * from \"./ast\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\n// TODO: When vTables are pulled, perhaps it would be better to extend an ASTWalker\nexport * from \"./extra/ast\";\nimport * as util from \"./util/index\";\nexport { util };\n\n// TODO: compat with 0.9, remove with 0.10\nexport * from \"./util/index\";\n","/**\n * @fileoverview Various binary reading and writing utility.\n * @license Apache-2.0\n */\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Writes a 32-bit integer as a 64-bit integer to the specified buffer. */\nexport function writeI32AsI64(value: i32, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  writeI32(value, buffer, offset);\n  writeI32(unsigned || value >= 0 ? 0 : -1, buffer, offset + 4);\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): i64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: i64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Writes a 64-bit integer as a 32-bit integer to the specified buffer. */\nexport function writeI64AsI32(value: i64, buffer: Uint8Array, offset: i32, unsigned: bool = false): void {\n  assert(unsigned ? i64_is_u32(value) : i64_is_i32(value));\n  writeI32(i64_low(value), buffer, offset);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * @fileoverview Various collections utility.\n * @license Apache-2.0\n */\n\n/** Makes a unique map. Typically used to track contextual type arguemnts. */\nexport function uniqueMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    // TODO: for (let [k, v] of original) {\n    for (let _keys = Map_keys(original), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(original.get(k));\n      cloned.set(k, v);\n    }\n  }\n  if (overrides) {\n    // TODO: for (let [k, v] of overrides) {\n    for (let _keys = Map_keys(overrides), i = 0, k = _keys.length; i < k; ++i) {\n      let k = unchecked(_keys[i]);\n      let v = assert(overrides.get(k));\n      cloned.set(k, v);\n    }\n  }\n  return cloned;\n}\n","/**\n * @fileoverview Various math utility.\n * @license Apache-2.0\n */\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * @fileoverview Various file path utility.\n * @license Apache-2.0\n */\n\nimport {\n  CharCode\n} from \"./text\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/**\n * @fileoverview Various character and text utility.\n * @license Apache-2.0\n */\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is trivially alphanumeric. */\nexport function isTrivialAlphanum(code: i32): bool {\n  return code >= CharCode.a && code <= CharCode.z\n      || code >= CharCode.A && code <= CharCode.Z\n      || code >= CharCode._0 && code <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false :\n         lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/**\n * @fileoverview Various vector utility.\n * @license Apache-2.0\n */\n\n/** v128 zero constant. */\nexport const v128_zero = new Uint8Array(16);\n","/**\n * @fileoverview Abstract Syntax Tree extras.\n *\n * Provides serialization of the AssemblyScript AST back to it source form.\n *\n * @license Apache-2.0\n */\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  ArrowKind,\n\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  TypeName,\n  TypeParameterNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  FloatLiteralExpression,\n  IntegerLiteralExpression,\n  StringLiteralExpression,\n  RegexpLiteralExpression,\n  ArrayLiteralExpression,\n  AssertionExpression,\n  AssertionKind,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FunctionExpression,\n  NewExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  UnaryPostfixExpression,\n  UnaryExpression,\n  UnaryPrefixExpression,\n  ClassExpression,\n  ObjectLiteralExpression,\n\n  BlockStatement,\n  BreakStatement,\n  ContinueStatement,\n  DoStatement,\n  EmptyStatement,\n  ExportImportStatement,\n  ExportStatement,\n  ExportDefaultStatement,\n  ExpressionStatement,\n  ForStatement,\n  ForOfStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  WhileStatement,\n\n  DeclarationStatement,\n  ClassDeclaration,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n\n  DecoratorNode,\n  ParameterNode,\n  ParameterKind,\n  ExportMember,\n  SwitchCase,\n  IndexSignatureNode,\n\n  isTypeOmitted\n} from \"../ast\";\n\nimport {\n  operatorTokenToString\n} from \"../tokenizer\";\n\nimport {\n  CharCode,\n  indent\n} from \"../util\";\n\nimport {\n  CommonFlags\n} from \"../common\";\n\n/** An AST builder. */\nexport class ASTBuilder {\n\n  /** Rebuilds the textual source from the specified AST, as far as possible. */\n  static build(node: Node): string {\n    var builder = new ASTBuilder();\n    builder.visitNode(node);\n    return builder.finish();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  visitNode(node: Node): void {\n    switch (node.kind) {\n      case NodeKind.SOURCE: {\n        this.visitSource(<Source>node);\n        break;\n      }\n\n      // types\n\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      case NodeKind.TYPEPARAMETER: {\n        this.visitTypeParameter(<TypeParameterNode>node);\n        break;\n      }\n\n      // expressions\n\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.SUPER:\n      case NodeKind.THIS:\n      case NodeKind.TRUE:\n      case NodeKind.CONSTRUCTOR:\n      case NodeKind.IDENTIFIER: {\n        this.visitIdentifierExpression(<IdentifierExpression>node);\n        break;\n      }\n      case NodeKind.ASSERTION: {\n        this.visitAssertionExpression(<AssertionExpression>node);\n        break;\n      }\n      case NodeKind.BINARY: {\n        this.visitBinaryExpression(<BinaryExpression>node);\n        break;\n      }\n      case NodeKind.CALL: {\n        this.visitCallExpression(<CallExpression>node);\n        break;\n      }\n      case NodeKind.CLASS: {\n        this.visitClassExpression(<ClassExpression>node);\n        break;\n      }\n      case NodeKind.COMMA: {\n        this.visitCommaExpression(<CommaExpression>node);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        this.visitElementAccessExpression(<ElementAccessExpression>node);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        this.visitFunctionExpression(<FunctionExpression>node);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        this.visitInstanceOfExpression(<InstanceOfExpression>node);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        this.visitLiteralExpression(<LiteralExpression>node);\n        break;\n      }\n      case NodeKind.NEW: {\n        this.visitNewExpression(<NewExpression>node);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        this.visitParenthesizedExpression(<ParenthesizedExpression>node);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        this.visitPropertyAccessExpression(<PropertyAccessExpression>node);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        this.visitTernaryExpression(<TernaryExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n\n      // statements\n\n      case NodeKind.BLOCK: {\n        this.visitBlockStatement(<BlockStatement>node);\n        break;\n      }\n      case NodeKind.BREAK: {\n        this.visitBreakStatement(<BreakStatement>node);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        this.visitContinueStatement(<ContinueStatement>node);\n        break;\n      }\n      case NodeKind.DO: {\n        this.visitDoStatement(<DoStatement>node);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        this.visitEmptyStatement(<EmptyStatement>node);\n        break;\n      }\n      case NodeKind.EXPORT: {\n        this.visitExportStatement(<ExportStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.visitExportDefaultStatement(<ExportDefaultStatement>node);\n        break;\n      }\n      case NodeKind.EXPORTIMPORT: {\n        this.visitExportImportStatement(<ExportImportStatement>node);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        this.visitExpressionStatement(<ExpressionStatement>node);\n        break;\n      }\n      case NodeKind.FOR: {\n        this.visitForStatement(<ForStatement>node);\n        break;\n      }\n      case NodeKind.FOROF: {\n        this.visitForOfStatement(<ForOfStatement>node);\n        break;\n      }\n      case NodeKind.IF: {\n        this.visitIfStatement(<IfStatement>node);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.visitImportStatement(<ImportStatement>node);\n        break;\n      }\n      case NodeKind.RETURN: {\n        this.visitReturnStatement(<ReturnStatement>node);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        this.visitSwitchStatement(<SwitchStatement>node);\n        break;\n      }\n      case NodeKind.THROW: {\n        this.visitThrowStatement(<ThrowStatement>node);\n        break;\n      }\n      case NodeKind.TRY: {\n        this.visitTryStatement(<TryStatement>node);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        this.visitVariableStatement(<VariableStatement>node);\n        break;\n      }\n      case NodeKind.WHILE: {\n        this.visitWhileStatement(<WhileStatement>node);\n        break;\n      }\n\n      // declaration statements\n\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>node);\n        break;\n      }\n      case NodeKind.ENUMVALUEDECLARATION: {\n        this.visitEnumValueDeclaration(<EnumValueDeclaration>node);\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        this.visitFieldDeclaration(<FieldDeclaration>node);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>node);\n        break;\n      }\n      case NodeKind.IMPORTDECLARATION: {\n        this.visitImportDeclaration(<ImportDeclaration>node);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>node);\n        break;\n      }\n      case NodeKind.METHODDECLARATION: {\n        this.visitMethodDeclaration(<MethodDeclaration>node);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>node);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        this.visitTypeDeclaration(<TypeDeclaration>node);\n        break;\n      }\n      case NodeKind.VARIABLEDECLARATION: {\n        this.visitVariableDeclaration(<VariableDeclaration>node);\n        break;\n      }\n\n      // other\n\n      case NodeKind.DECORATOR: {\n        this.serializeDecorator(<DecoratorNode>node);\n        break;\n      }\n      case NodeKind.EXPORTMEMBER: {\n        this.visitExportMember(<ExportMember>node);\n        break;\n      }\n      case NodeKind.PARAMETER: {\n        this.serializeParameter(<ParameterNode>node);\n        break;\n      }\n      case NodeKind.SWITCHCASE: {\n        this.visitSwitchCase(<SwitchCase>node);\n        break;\n      }\n      case NodeKind.INDEXSIGNATURE: {\n        this.visitIndexSignature(<IndexSignatureNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitSource(source: Source): void {\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      this.visitNodeAndTerminate(statements[i]);\n    }\n  }\n\n  // types\n\n  visitTypeNode(node: TypeNode): void {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        this.visitNamedTypeNode(<NamedTypeNode>node);\n        break;\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        this.visitFunctionTypeNode(<FunctionTypeNode>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitTypeName(node: TypeName): void {\n    this.visitIdentifierExpression(node.identifier);\n    var sb = this.sb;\n    var current = node.next;\n    while (current) {\n      sb.push(\".\");\n      this.visitIdentifierExpression(current.identifier);\n      current = current.next;\n    }\n  }\n\n  visitNamedTypeNode(node: NamedTypeNode): void {\n    this.visitTypeName(node.name);\n    var typeArguments = node.typeArguments;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      let sb = this.sb;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">\");\n      }\n      if (node.isNullable) sb.push(\" | null\");\n    }\n  }\n\n  visitFunctionTypeNode(node: FunctionTypeNode): void {\n    var isNullable = node.isNullable;\n    var sb = this.sb;\n    sb.push(isNullable ? \"((\" : \"(\");\n    var explicitThisType = node.explicitThisType;\n    if (explicitThisType) {\n      sb.push(\"this: \");\n      this.visitTypeNode(explicitThisType);\n    }\n    var parameters = node.parameters;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      if (explicitThisType) sb.push(\", \");\n      this.serializeParameter(parameters[0]);\n      for (let i = 1; i < numParameters; ++i) {\n        sb.push(\", \");\n        this.serializeParameter(parameters[i]);\n      }\n    }\n    var returnType = node.returnType;\n    if (returnType) {\n      sb.push(\") => \");\n      this.visitTypeNode(returnType);\n    } else {\n      sb.push(\") => void\");\n    }\n    if (isNullable) sb.push(\") | null\");\n  }\n\n  visitTypeParameter(node: TypeParameterNode): void {\n    this.visitIdentifierExpression(node.name);\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      this.sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var defaultType = node.defaultType;\n    if (defaultType) {\n      this.sb.push(\"=\");\n      this.visitTypeNode(defaultType);\n    }\n  }\n\n  // expressions\n\n  visitIdentifierExpression(node: IdentifierExpression): void {\n    if (node.isQuoted) this.visitStringLiteral(node.text);\n    else this.sb.push(node.text);\n  }\n\n  visitArrayLiteralExpression(node: ArrayLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"[\");\n    var elements = node.elementExpressions;\n    var numElements = elements.length;\n    if (numElements) {\n      let element = elements[0];\n      if (element) this.visitNode(element);\n      for (let i = 1; i < numElements; ++i) {\n        element = elements[i];\n        sb.push(\", \");\n        if (element) this.visitNode(element);\n      }\n    }\n    sb.push(\"]\");\n  }\n\n  visitObjectLiteralExpression(node: ObjectLiteralExpression): void {\n    var sb = this.sb;\n    var names = node.names;\n    var values = node.values;\n    var numElements = names.length;\n    assert(numElements == values.length);\n    if (numElements) {\n      sb.push(\"{\\n\");\n      indent(sb, ++this.indentLevel);\n      this.visitNode(names[0]);\n      sb.push(\": \");\n      this.visitNode(values[0]);\n      for (let i = 1; i < numElements; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, this.indentLevel);\n        let name = names[i];\n        let value = values[i];\n        if (name === value) {\n          this.visitNode(name);\n        } else {\n          this.visitNode(name);\n          sb.push(\": \");\n          this.visitNode(value);\n        }\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitAssertionExpression(node: AssertionExpression): void {\n    var sb = this.sb;\n    switch (node.assertionKind) {\n      case AssertionKind.PREFIX: {\n        sb.push(\"<\");\n        this.visitTypeNode(assert(node.toType));\n        sb.push(\">\");\n        this.visitNode(node.expression);\n        break;\n      }\n      case AssertionKind.AS: {\n        this.visitNode(node.expression);\n        sb.push(\" as \");\n        this.visitTypeNode(assert(node.toType));\n        break;\n      }\n      case AssertionKind.NONNULL: {\n        this.visitNode(node.expression);\n        sb.push(\"!\");\n        break;\n      }\n      case AssertionKind.CONST: {\n        this.visitNode(node.expression);\n        sb.push(\" as const\");\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitBinaryExpression(node: BinaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.left);\n    sb.push(\" \");\n    sb.push(operatorTokenToString(node.operator));\n    sb.push(\" \");\n    this.visitNode(node.right);\n  }\n\n  visitCallExpression(node: CallExpression): void {\n    this.visitNode(node.expression);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  private visitArguments(typeArguments: TypeNode[] | null, args: Expression[]): void {\n    var sb = this.sb;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (numTypeArguments) {\n        sb.push(\"<\");\n        this.visitTypeNode(typeArguments[0]);\n        for (let i = 1; i < numTypeArguments; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(typeArguments[i]);\n        }\n        sb.push(\">(\");\n      }\n    } else {\n      sb.push(\"(\");\n    }\n    var numArgs = args.length;\n    if (numArgs) {\n      this.visitNode(args[0]);\n      for (let i = 1; i < numArgs; ++i) {\n        sb.push(\", \");\n        this.visitNode(args[i]);\n      }\n    }\n    sb.push(\")\");\n  }\n\n  visitClassExpression(node: ClassExpression): void {\n    var declaration = node.declaration;\n    this.visitClassDeclaration(declaration);\n  }\n\n  visitCommaExpression(node: CommaExpression): void {\n    var expressions = node.expressions;\n    var numExpressions = assert(expressions.length);\n    this.visitNode(expressions[0]);\n    var sb = this.sb;\n    for (let i = 1; i < numExpressions; ++i) {\n      sb.push(\",\");\n      this.visitNode(expressions[i]);\n    }\n  }\n\n  visitElementAccessExpression(node: ElementAccessExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.expression);\n    sb.push(\"[\");\n    this.visitNode(node.elementExpression);\n    sb.push(\"]\");\n  }\n\n  visitFunctionExpression(node: FunctionExpression): void {\n    var declaration = node.declaration;\n    if (!declaration.arrowKind) {\n      if (declaration.name.text.length) {\n        this.sb.push(\"function \");\n      } else {\n        this.sb.push(\"function\");\n      }\n    } else {\n      assert(declaration.name.text.length == 0);\n    }\n    this.visitFunctionCommon(declaration);\n  }\n\n  visitLiteralExpression(node: LiteralExpression): void {\n    switch (node.literalKind) {\n      case LiteralKind.FLOAT: {\n        this.visitFloatLiteralExpression(<FloatLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.INTEGER: {\n        this.visitIntegerLiteralExpression(<IntegerLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.STRING: {\n        this.visitStringLiteralExpression(<StringLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.REGEXP: {\n        this.visitRegexpLiteralExpression(<RegexpLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.ARRAY: {\n        this.visitArrayLiteralExpression(<ArrayLiteralExpression>node);\n        break;\n      }\n      case LiteralKind.OBJECT: {\n        this.visitObjectLiteralExpression(<ObjectLiteralExpression>node);\n        break;\n      }\n      default: {\n        assert(false);\n        break;\n      }\n    }\n  }\n\n  visitFloatLiteralExpression(node: FloatLiteralExpression): void {\n    this.sb.push(node.value.toString());\n  }\n\n  visitInstanceOfExpression(node: InstanceOfExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\" instanceof \");\n    this.visitTypeNode(node.isType);\n  }\n\n  visitIntegerLiteralExpression(node: IntegerLiteralExpression): void {\n    this.sb.push(i64_to_string(node.value));\n  }\n\n  visitStringLiteral(str: string, singleQuoted: bool = false): void {\n    var sb = this.sb;\n    var off = 0;\n    var quote = singleQuoted ? \"'\" : \"\\\"\";\n    sb.push(quote);\n    var i = 0;\n    for (let k = str.length; i < k;) {\n      switch (str.charCodeAt(i)) {\n        case CharCode.NULL: {\n          if (i > off) sb.push(str.substring(off, off = i + 1));\n          sb.push(\"\\\\0\");\n          off = ++i;\n          break;\n        }\n        case CharCode.BACKSPACE: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\b\");\n          break;\n        }\n        case CharCode.TAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\t\");\n          break;\n        }\n        case CharCode.LINEFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\n\");\n          break;\n        }\n        case CharCode.VERTICALTAB: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\v\");\n          break;\n        }\n        case CharCode.FORMFEED: {\n          if (i > off) sb.push(str.substring(off, i));\n          off = ++i;\n          sb.push(\"\\\\f\");\n          break;\n        }\n        case CharCode.CARRIAGERETURN: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\r\");\n          off = ++i;\n          break;\n        }\n        case CharCode.DOUBLEQUOTE: {\n          if (!singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\\\\"\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.SINGLEQUOTE: {\n          if (singleQuoted) {\n            if (i > off) sb.push(str.substring(off, i));\n            sb.push(\"\\\\'\");\n            off = ++i;\n          } else {\n            ++i;\n          }\n          break;\n        }\n        case CharCode.BACKSLASH: {\n          if (i > off) sb.push(str.substring(off, i));\n          sb.push(\"\\\\\\\\\");\n          off = ++i;\n          break;\n        }\n        default: {\n          ++i;\n          break;\n        }\n      }\n    }\n    if (i > off) sb.push(str.substring(off, i));\n    sb.push(quote);\n  }\n\n  visitStringLiteralExpression(node: StringLiteralExpression): void {\n    this.visitStringLiteral(node.value);\n  }\n\n  visitRegexpLiteralExpression(node: RegexpLiteralExpression): void {\n    var sb = this.sb;\n    sb.push(\"/\");\n    sb.push(node.pattern);\n    sb.push(\"/\");\n    sb.push(node.patternFlags);\n  }\n\n  visitNewExpression(node: NewExpression): void {\n    this.sb.push(\"new \");\n    this.visitTypeName(node.typeName);\n    this.visitArguments(node.typeArguments, node.args);\n  }\n\n  visitParenthesizedExpression(node: ParenthesizedExpression): void {\n    var sb = this.sb;\n    sb.push(\"(\");\n    this.visitNode(node.expression);\n    sb.push(\")\");\n  }\n\n  visitPropertyAccessExpression(node: PropertyAccessExpression): void {\n    this.visitNode(node.expression);\n    this.sb.push(\".\");\n    this.visitIdentifierExpression(node.property);\n  }\n\n  visitTernaryExpression(node: TernaryExpression): void {\n    var sb = this.sb;\n    this.visitNode(node.condition);\n    sb.push(\" ? \");\n    this.visitNode(node.ifThen);\n    sb.push(\" : \");\n    this.visitNode(node.ifElse);\n  }\n\n  visitUnaryExpression(node: UnaryExpression): void {\n    switch (node.kind) {\n      case NodeKind.UNARYPOSTFIX: {\n        this.visitUnaryPostfixExpression(<UnaryPostfixExpression>node);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        this.visitUnaryPrefixExpression(<UnaryPrefixExpression>node);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitUnaryPostfixExpression(node: UnaryPostfixExpression): void {\n    this.visitNode(node.operand);\n    this.sb.push(operatorTokenToString(node.operator));\n  }\n\n  visitUnaryPrefixExpression(node: UnaryPrefixExpression): void {\n    this.sb.push(operatorTokenToString(node.operator));\n    this.visitNode(node.operand);\n  }\n\n  // statements\n\n  visitNodeAndTerminate(node: Node): void {\n    this.visitNode(node);\n    var sb = this.sb;\n    if (\n      !sb.length ||                     // leading EmptyStatement\n      node.kind == NodeKind.VARIABLE || // potentially assigns a FunctionExpression\n      node.kind == NodeKind.EXPRESSION  // potentially assigns a FunctionExpression\n    ) {\n      sb.push(\";\\n\");\n    } else {\n      let last = sb[sb.length - 1];\n      let lastCharPos = last.length - 1;\n      if (lastCharPos >= 0 && (\n        last.charCodeAt(lastCharPos) == CharCode.CLOSEBRACE ||\n        last.charCodeAt(lastCharPos) == CharCode.SEMICOLON)\n      ) {\n        sb.push(\"\\n\");\n      } else {\n        sb.push(\";\\n\");\n      }\n    }\n  }\n\n  visitBlockStatement(node: BlockStatement): void {\n    var sb = this.sb;\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      sb.push(\"{\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\"{}\");\n    }\n  }\n\n  visitBreakStatement(node: BreakStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"break \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"break\");\n    }\n  }\n\n  visitContinueStatement(node: ContinueStatement): void {\n    var label = node.label;\n    if (label) {\n      this.sb.push(\"continue \");\n      this.visitIdentifierExpression(label);\n    } else {\n      this.sb.push(\"continue\");\n    }\n  }\n\n  visitClassDeclaration(node: ClassDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n    if (node.name.text.length) {\n      sb.push(\"class \");\n      this.visitIdentifierExpression(node.name);\n    } else {\n      sb.push(\"class\");\n    }\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    var implementsTypes = node.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (numImplementsTypes) {\n        sb.push(\" implements \");\n        this.visitTypeNode(implementsTypes[0]);\n        for (let i = 1; i < numImplementsTypes; ++i) {\n          sb.push(\", \");\n          this.visitTypeNode(implementsTypes[i]);\n        }\n      }\n    }\n    var indexSignature = node.indexSignature;\n    var members = node.members;\n    var numMembers = members.length;\n    if (indexSignature !== null || numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      if (indexSignature) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(indexSignature);\n      }\n      for (let i = 0, k = members.length; i < k; ++i) {\n        let member = members[i];\n        if (member.kind != NodeKind.FIELDDECLARATION || (<FieldDeclaration>member).parameterIndex < 0) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(member);\n        }\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitDoStatement(node: DoStatement): void {\n    var sb = this.sb;\n    sb.push(\"do \");\n    this.visitNode(node.statement);\n    if (node.statement.kind == NodeKind.BLOCK) {\n      sb.push(\" while (\");\n    } else {\n      sb.push(\";\\n\");\n      indent(sb, this.indentLevel);\n      sb.push(\"while (\");\n    }\n    this.visitNode(node.condition);\n    sb.push(\")\");\n  }\n\n  visitEmptyStatement(node: EmptyStatement): void {\n    /* nop */\n  }\n\n  visitEnumDeclaration(node: EnumDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    if (node.is(CommonFlags.CONST)) sb.push(\"const \");\n    sb.push(\"enum \");\n    this.visitIdentifierExpression(node.name);\n    var values = node.values;\n    var numValues = values.length;\n    if (numValues) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitEnumValueDeclaration(node.values[0]);\n      for (let i = 1; i < numValues; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitEnumValueDeclaration(node.values[i]);\n      }\n      sb.push(\"\\n\");\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitEnumValueDeclaration(node: EnumValueDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var initializer = node.initializer;\n    if (initializer) {\n      this.sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitExportImportStatement(node: ExportImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"export import \");\n    this.visitIdentifierExpression(node.externalName);\n    sb.push(\" = \");\n    this.visitIdentifierExpression(node.name);\n  }\n\n  visitExportMember(node: ExportMember): void {\n    this.visitIdentifierExpression(node.localName);\n    if (node.exportedName.text != node.localName.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(node.exportedName);\n    }\n  }\n\n  visitExportStatement(node: ExportStatement): void {\n    var sb = this.sb;\n    if (node.isDeclare) {\n      sb.push(\"declare \");\n    }\n    var members = node.members;\n    if (members != null && members.length > 0) {\n      let numMembers = members.length;\n      sb.push(\"export {\\n\");\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitExportMember(members[0]);\n      for (let i = 1; i < numMembers; ++i) {\n        sb.push(\",\\n\");\n        indent(sb, indentLevel);\n        this.visitExportMember(members[i]);\n      }\n      --this.indentLevel;\n      sb.push(\"\\n}\");\n    } else {\n      sb.push(\"export {}\");\n    }\n    var path = node.path;\n    if (path) {\n      sb.push(\" from \");\n      this.visitStringLiteralExpression(path);\n    }\n    sb.push(\";\");\n  }\n\n  visitExportDefaultStatement(node: ExportDefaultStatement): void {\n    var declaration = node.declaration;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        this.visitEnumDeclaration(<EnumDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        this.visitFunctionDeclaration(<FunctionDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        this.visitClassDeclaration(<ClassDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        this.visitInterfaceDeclaration(<InterfaceDeclaration>declaration, true);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        this.visitNamespaceDeclaration(<NamespaceDeclaration>declaration, true);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  visitExpressionStatement(node: ExpressionStatement): void {\n    this.visitNode(node.expression);\n  }\n\n  visitFieldDeclaration(node: FieldDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    this.visitIdentifierExpression(node.name);\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    var type = node.type;\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitForStatement(node: ForStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    var initializer = node.initializer;\n    if (initializer) {\n      this.visitNode(initializer);\n    }\n    var condition = node.condition;\n    if (condition) {\n      sb.push(\"; \");\n      this.visitNode(condition);\n    } else {\n      sb.push(\";\");\n    }\n    var incrementor = node.incrementor;\n    if (incrementor) {\n      sb.push(\"; \");\n      this.visitNode(incrementor);\n    } else {\n      sb.push(\";\");\n    }\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitForOfStatement(node: ForOfStatement): void {\n    var sb = this.sb;\n    sb.push(\"for (\");\n    this.visitNode(node.variable);\n    sb.push(\" of \");\n    this.visitNode(node.iterable);\n    sb.push(\") \");\n    this.visitNode(node.statement);\n  }\n\n  visitFunctionDeclaration(node: FunctionDeclaration, isDefault: bool = false): void {\n    var sb = this.sb;\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n      this.serializeAccessModifiers(node);\n    }\n    if (node.name.text.length) {\n      sb.push(\"function \");\n    } else {\n      sb.push(\"function\");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitFunctionCommon(node: FunctionDeclaration): void {\n    var sb = this.sb;\n    this.visitIdentifierExpression(node.name);\n    var signature = node.signature;\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        this.visitTypeParameter(typeParameters[0]);\n        for (let i = 1; i < numTypeParameters; ++i) {\n          sb.push(\", \");\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n      let parameters = signature.parameters;\n      assert(parameters.length == 1);\n      assert(!signature.explicitThisType);\n      this.serializeParameter(parameters[0]);\n    } else {\n      sb.push(\"(\");\n      let parameters = signature.parameters;\n      let numParameters = parameters.length;\n      let explicitThisType = signature.explicitThisType;\n      if (explicitThisType) {\n        sb.push(\"this: \");\n        this.visitTypeNode(explicitThisType);\n      }\n      if (numParameters) {\n        if (explicitThisType) sb.push(\", \");\n        this.serializeParameter(parameters[0]);\n        for (let i = 1; i < numParameters; ++i) {\n          sb.push(\", \");\n          this.serializeParameter(parameters[i]);\n        }\n      }\n    }\n    var body = node.body;\n    var returnType = signature.returnType;\n    if (node.arrowKind) {\n      if (body) {\n        if (node.arrowKind == ArrowKind.ARROW_SINGLE) {\n          assert(isTypeOmitted(returnType));\n        } else {\n          if (isTypeOmitted(returnType)) {\n            sb.push(\")\");\n          } else {\n            sb.push(\"): \");\n            this.visitTypeNode(returnType);\n          }\n        }\n        sb.push(\" => \");\n        this.visitNode(body);\n      } else {\n        assert(!isTypeOmitted(returnType));\n        sb.push(\" => \");\n        this.visitTypeNode(returnType);\n      }\n    } else {\n      if (\n        !isTypeOmitted(returnType) &&\n        !node.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)\n      ) {\n        sb.push(\"): \");\n        this.visitTypeNode(returnType);\n      } else {\n        sb.push(\")\");\n      }\n      if (body) {\n        sb.push(\" \");\n        this.visitNode(body);\n      }\n    }\n  }\n\n  visitIfStatement(node: IfStatement): void {\n    var sb = this.sb;\n    sb.push(\"if (\");\n    this.visitNode(node.condition);\n    sb.push(\") \");\n    var ifTrue = node.ifTrue;\n    this.visitNode(ifTrue);\n    if (ifTrue.kind != NodeKind.BLOCK) {\n      sb.push(\";\\n\");\n    }\n    var ifFalse = node.ifFalse;\n    if (ifFalse) {\n      if (ifTrue.kind == NodeKind.BLOCK) {\n        sb.push(\" else \");\n      } else {\n        sb.push(\"else \");\n      }\n      this.visitNode(ifFalse);\n    }\n  }\n\n  visitImportDeclaration(node: ImportDeclaration): void {\n    var externalName = node.foreignName;\n    var name = node.name;\n    this.visitIdentifierExpression(externalName);\n    if (externalName.text != name.text) {\n      this.sb.push(\" as \");\n      this.visitIdentifierExpression(name);\n    }\n  }\n\n  visitImportStatement(node: ImportStatement): void {\n    var sb = this.sb;\n    sb.push(\"import \");\n    var declarations = node.declarations;\n    var namespaceName = node.namespaceName;\n    if (declarations) {\n      let numDeclarations = declarations.length;\n      if (numDeclarations) {\n        sb.push(\"{\\n\");\n        let indentLevel = ++this.indentLevel;\n        indent(sb, indentLevel);\n        this.visitImportDeclaration(declarations[0]);\n        for (let i = 1; i < numDeclarations; ++i) {\n          sb.push(\",\\n\");\n          indent(sb, indentLevel);\n          this.visitImportDeclaration(declarations[i]);\n        }\n        --this.indentLevel;\n        sb.push(\"\\n} from \");\n      } else {\n        sb.push(\"{} from \");\n      }\n    } else if (namespaceName) {\n      sb.push(\"* as \");\n      this.visitIdentifierExpression(namespaceName);\n      sb.push(\" from \");\n    }\n    this.visitStringLiteralExpression(node.path);\n  }\n\n  visitIndexSignature(node: IndexSignatureNode): void {\n    var sb = this.sb;\n    sb.push(\"[key: \");\n    this.visitTypeNode(node.keyType);\n    sb.push(\"]: \");\n    this.visitTypeNode(node.valueType);\n  }\n\n  visitInterfaceDeclaration(node: InterfaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"interface \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters != null && typeParameters.length > 0) {\n      sb.push(\"<\");\n      this.visitTypeParameter(typeParameters[0]);\n      for (let i = 1, k = typeParameters.length; i < k; ++i) {\n        sb.push(\", \");\n        this.visitTypeParameter(typeParameters[i]);\n      }\n      sb.push(\">\");\n    }\n    var extendsType = node.extendsType;\n    if (extendsType) {\n      sb.push(\" extends \");\n      this.visitTypeNode(extendsType);\n    }\n    // must not have implementsTypes\n    sb.push(\" {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var members = node.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(members[i]);\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitMethodDeclaration(node: MethodDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    this.serializeAccessModifiers(node);\n    if (node.is(CommonFlags.GET)) {\n      this.sb.push(\"get \");\n    } else if (node.is(CommonFlags.SET)) {\n      this.sb.push(\"set \");\n    }\n    this.visitFunctionCommon(node);\n  }\n\n  visitNamespaceDeclaration(node: NamespaceDeclaration, isDefault: bool = false): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    if (isDefault) {\n      sb.push(\"export default \");\n    } else {\n      this.serializeExternalModifiers(node);\n    }\n    sb.push(\"namespace \");\n    this.visitIdentifierExpression(node.name);\n    var members = node.members;\n    var numMembers = members.length;\n    if (numMembers) {\n      sb.push(\" {\\n\");\n      let indentLevel = ++this.indentLevel;\n      for (let i = 0, k = members.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(members[i]);\n      }\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\");\n    } else {\n      sb.push(\" {}\");\n    }\n  }\n\n  visitReturnStatement(node: ReturnStatement): void {\n    var value = node.value;\n    if (value) {\n      this.sb.push(\"return \");\n      this.visitNode(value);\n    } else {\n      this.sb.push(\"return\");\n    }\n  }\n\n  visitSwitchCase(node: SwitchCase): void {\n    var sb = this.sb;\n    var label = node.label;\n    if (label) {\n      sb.push(\"case \");\n      this.visitNode(label);\n      sb.push(\":\\n\");\n    } else {\n      sb.push(\"default:\\n\");\n    }\n    var statements = node.statements;\n    var numStatements = statements.length;\n    if (numStatements) {\n      let indentLevel = ++this.indentLevel;\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[0]);\n      for (let i = 1; i < numStatements; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(statements[i]);\n      }\n      --this.indentLevel;\n    }\n  }\n\n  visitSwitchStatement(node: SwitchStatement): void {\n    var sb = this.sb;\n    sb.push(\"switch (\");\n    this.visitNode(node.condition);\n    sb.push(\") {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var cases = node.cases;\n    for (let i = 0, k = cases.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitSwitchCase(cases[i]);\n      sb.push(\"\\n\");\n    }\n    --this.indentLevel;\n    sb.push(\"}\");\n  }\n\n  visitThrowStatement(node: ThrowStatement): void {\n    this.sb.push(\"throw \");\n    this.visitNode(node.value);\n  }\n\n  visitTryStatement(node: TryStatement): void {\n    var sb = this.sb;\n    sb.push(\"try {\\n\");\n    var indentLevel = ++this.indentLevel;\n    var statements = node.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      indent(sb, indentLevel);\n      this.visitNodeAndTerminate(statements[i]);\n    }\n    var catchVariable = node.catchVariable;\n    if (catchVariable) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} catch (\");\n      this.visitIdentifierExpression(catchVariable);\n      sb.push(\") {\\n\");\n      let catchStatements = node.catchStatements;\n      if (catchStatements) {\n        for (let i = 0, k = catchStatements.length; i < k; ++i) {\n          indent(sb, indentLevel);\n          this.visitNodeAndTerminate(catchStatements[i]);\n        }\n      }\n    }\n    var finallyStatements = node.finallyStatements;\n    if (finallyStatements) {\n      indent(sb, indentLevel - 1);\n      sb.push(\"} finally {\\n\");\n      for (let i = 0, k = finallyStatements.length; i < k; ++i) {\n        indent(sb, indentLevel);\n        this.visitNodeAndTerminate(finallyStatements[i]);\n      }\n    }\n    indent(sb, indentLevel - 1);\n    sb.push(\"}\");\n  }\n\n  visitTypeDeclaration(node: TypeDeclaration): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    this.serializeExternalModifiers(node);\n    sb.push(\"type \");\n    this.visitIdentifierExpression(node.name);\n    var typeParameters = node.typeParameters;\n    if (typeParameters) {\n      let numTypeParameters = typeParameters.length;\n      if (numTypeParameters) {\n        sb.push(\"<\");\n        for (let i = 0; i < numTypeParameters; ++i) {\n          this.visitTypeParameter(typeParameters[i]);\n        }\n        sb.push(\">\");\n      }\n    }\n    sb.push(\" = \");\n    this.visitTypeNode(node.type);\n  }\n\n  visitVariableDeclaration(node: VariableDeclaration): void {\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var sb = this.sb;\n    if (node.flags & CommonFlags.DEFINITELY_ASSIGNED) {\n      sb.push(\"!\");\n    }\n    if (type) {\n      sb.push(\": \");\n      this.visitTypeNode(type);\n    }\n    var initializer = node.initializer;\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  visitVariableStatement(node: VariableStatement): void {\n    var decorators = node.decorators;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.serializeDecorator(decorators[i]);\n      }\n    }\n    var sb = this.sb;\n    var declarations = node.declarations;\n    var numDeclarations = assert(declarations.length);\n    var firstDeclaration = declarations[0];\n    this.serializeExternalModifiers(firstDeclaration);\n    sb.push(firstDeclaration.is(CommonFlags.CONST) ? \"const \" : firstDeclaration.is(CommonFlags.LET) ? \"let \" : \"var \");\n    this.visitVariableDeclaration(node.declarations[0]);\n    for (let i = 1; i < numDeclarations; ++i) {\n      sb.push(\", \");\n      this.visitVariableDeclaration(node.declarations[i]);\n    }\n  }\n\n  visitWhileStatement(node: WhileStatement): void {\n    var sb = this.sb;\n    sb.push(\"while (\");\n    this.visitNode(node.condition);\n    var statement = node.statement;\n    if (statement.kind == NodeKind.EMPTY) {\n      sb.push(\")\");\n    } else {\n      sb.push(\") \");\n      this.visitNode(node.statement);\n    }\n  }\n\n  // other\n\n  serializeDecorator(node: DecoratorNode): void {\n    var sb = this.sb;\n    sb.push(\"@\");\n    this.visitNode(node.name);\n    var args = node.args;\n    if (args) {\n      sb.push(\"(\");\n      let numArgs = args.length;\n      if (numArgs) {\n        this.visitNode(args[0]);\n        for (let i = 1; i < numArgs; ++i) {\n          sb.push(\", \");\n          this.visitNode(args[i]);\n        }\n      }\n      sb.push(\")\\n\");\n    } else {\n      sb.push(\"\\n\");\n    }\n    indent(sb, this.indentLevel);\n  }\n\n  serializeParameter(node: ParameterNode): void {\n    var sb = this.sb;\n    var kind = node.parameterKind;\n    var implicitFieldDeclaration = node.implicitFieldDeclaration;\n    if (implicitFieldDeclaration) {\n      this.serializeAccessModifiers(implicitFieldDeclaration);\n    }\n    if (kind == ParameterKind.REST) {\n      sb.push(\"...\");\n    }\n    this.visitIdentifierExpression(node.name);\n    var type = node.type;\n    var initializer = node.initializer;\n    if (type) {\n      if (kind == ParameterKind.OPTIONAL && !initializer) sb.push(\"?\");\n      if (!isTypeOmitted(type)) {\n        sb.push(\": \");\n        this.visitTypeNode(type);\n      }\n    }\n    if (initializer) {\n      sb.push(\" = \");\n      this.visitNode(initializer);\n    }\n  }\n\n  serializeExternalModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.EXPORT)) {\n      sb.push(\"export \");\n    } else if (node.is(CommonFlags.IMPORT)) {\n      sb.push(\"import \");\n    } else if (node.is(CommonFlags.DECLARE)) {\n      sb.push(\"declare \");\n    }\n  }\n\n  serializeAccessModifiers(node: DeclarationStatement): void {\n    var sb = this.sb;\n    if (node.is(CommonFlags.PUBLIC)) {\n      sb.push(\"public \");\n    } else if (node.is(CommonFlags.PRIVATE)) {\n      sb.push(\"private \");\n    } else if (node.is(CommonFlags.PROTECTED)) {\n      sb.push(\"protected \");\n    }\n    if (node.is(CommonFlags.STATIC)) {\n      sb.push(\"static \");\n    } else if (node.is(CommonFlags.ABSTRACT)) {\n      sb.push(\"abstract \");\n    }\n    if (node.is(CommonFlags.READONLY)) {\n      sb.push(\"readonly \");\n    }\n  }\n\n  finish(): string {\n    var ret = this.sb.join(\"\");\n    this.sb = [];\n    return ret;\n  }\n}\n"],"sourceRoot":""}